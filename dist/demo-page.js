!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=6)}([function(e,t,n){"use strict";(function(e){function n(e,t,n){return Math.min(Math.max(e,t),n)}function i(e,t){let n=1;for(let e=0;e<t;e+=1)n*=10;return Math.round((e+Number.EPSILON)*n)/n}Object.defineProperty(t,"__esModule",{value:!0}),t.hasOwnProperty=t.initBlocks=t.preventDefault=t.roundToDecimal=t.clamp=t.calculateElementCenter=t.standardize=t.removeListener=t.addListenerAfter=t.parseClassesString=void 0,t.parseClassesString=function(e){if(null==e?void 0:e.trim())return e.split(" ").filter(e=>e.length>0)},t.addListenerAfter=function(e,t,n){if(!n)return;const i=n;i.listenDictionary||(i.listenDictionary={}),n.listenDictionary[e]||(i.listenDictionary[e]={func:n[e],listeners:[]});const{listeners:r}=n.listenDictionary[e];r.push(t),function(e,t,n){const i=n,r=i.listenDictionary[e].func;i[e]=(...e)=>{const n=r.call(i,...e);t.forEach(e=>{e(n)})}}(e,r,n)},t.removeListener=function(e,t,n){var i;if(!(null===(i=null==n?void 0:n.listenDictionary)||void 0===i?void 0:i[e]))return;const{listeners:r}=n.listenDictionary[e],s=r.findIndex(e=>t===e);-1!==s&&r.splice(s,1)},t.clamp=n,t.roundToDecimal=i,t.standardize=function(e,{min:t,max:r,step:s}){const o=Math.min(r,t),a=Math.max(r,t);if(e>a)return a;if(e<o)return o;const l=(e-o)%s;if(0===l)return e;let u=e-l;return s/2<l&&(u+=s),u=n(u,o,a),i(u,4)},t.calculateElementCenter=function(e){const t=e.getBoundingClientRect();return{x:t.left+t.width/2,y:t.top+t.height/2}};t.preventDefault=e=>e.preventDefault(),t.initBlocks=function(t,n,i,...r){const s=i.name+"Instance",o=[];return(t?e(t).find(n):e(n)).each((t,n)=>{const a=e(n);if(a.data(s))return void o.push(a.data(s));const l=new i(n,...r);a.data(s,l),o.push(l)}),o},t.hasOwnProperty=function(e,t){return t in e}}).call(this,n(1))},function(e,t,n){var i;
/*!
 * jQuery JavaScript Library v3.5.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2020-05-04T22:49Z
 */!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(n,r){"use strict";var s=[],o=Object.getPrototypeOf,a=s.slice,l=s.flat?function(e){return s.flat.call(e)}:function(e){return s.concat.apply([],e)},u=s.push,c=s.indexOf,d={},h=d.toString,p=d.hasOwnProperty,f=p.toString,m=f.call(Object),g={},v=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},y=function(e){return null!=e&&e===e.window},b=n.document,x={type:!0,src:!0,nonce:!0,noModule:!0};function S(e,t,n){var i,r,s=(n=n||b).createElement("script");if(s.text=e,t)for(i in x)(r=t[i]||t.getAttribute&&t.getAttribute(i))&&s.setAttribute(i,r);n.head.appendChild(s).parentNode.removeChild(s)}function w(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?d[h.call(e)]||"object":typeof e}var T=function(e,t){return new T.fn.init(e,t)};function E(e){var t=!!e&&"length"in e&&e.length,n=w(e);return!v(e)&&!y(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}T.fn=T.prototype={jquery:"3.5.1",constructor:T,length:0,toArray:function(){return a.call(this)},get:function(e){return null==e?a.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=T.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return T.each(this,e)},map:function(e){return this.pushStack(T.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(T.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(T.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:s.sort,splice:s.splice},T.extend=T.fn.extend=function(){var e,t,n,i,r,s,o=arguments[0]||{},a=1,l=arguments.length,u=!1;for("boolean"==typeof o&&(u=o,o=arguments[a]||{},a++),"object"==typeof o||v(o)||(o={}),a===l&&(o=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)i=e[t],"__proto__"!==t&&o!==i&&(u&&i&&(T.isPlainObject(i)||(r=Array.isArray(i)))?(n=o[t],s=r&&!Array.isArray(n)?[]:r||T.isPlainObject(n)?n:{},r=!1,o[t]=T.extend(u,s,i)):void 0!==i&&(o[t]=i));return o},T.extend({expando:"jQuery"+("3.5.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==h.call(e))&&(!(t=o(e))||"function"==typeof(n=p.call(t,"constructor")&&t.constructor)&&f.call(n)===m)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){S(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,i=0;if(E(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(E(Object(e))?T.merge(n,"string"==typeof e?[e]:e):u.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:c.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;i<n;i++)e[r++]=t[i];return e.length=r,e},grep:function(e,t,n){for(var i=[],r=0,s=e.length,o=!n;r<s;r++)!t(e[r],r)!==o&&i.push(e[r]);return i},map:function(e,t,n){var i,r,s=0,o=[];if(E(e))for(i=e.length;s<i;s++)null!=(r=t(e[s],s,n))&&o.push(r);else for(s in e)null!=(r=t(e[s],s,n))&&o.push(r);return l(o)},guid:1,support:g}),"function"==typeof Symbol&&(T.fn[Symbol.iterator]=s[Symbol.iterator]),T.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){d["[object "+t+"]"]=t.toLowerCase()}));var C=
/*!
 * Sizzle CSS Selector Engine v2.3.5
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2020-03-14
 */
function(e){var t,n,i,r,s,o,a,l,u,c,d,h,p,f,m,g,v,y,b,x="sizzle"+1*new Date,S=e.document,w=0,T=0,E=le(),C=le(),A=le(),L=le(),P=function(e,t){return e===t&&(d=!0),0},I={}.hasOwnProperty,H=[],_=H.pop,D=H.push,k=H.push,j=H.slice,M=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},O="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",N="[\\x20\\t\\r\\n\\f]",R="(?:\\\\[\\da-fA-F]{1,6}"+N+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",F="\\["+N+"*("+R+")(?:"+N+"*([*^$|!~]?=)"+N+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+R+"))|)"+N+"*\\]",V=":("+R+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+F+")*)|.*)\\)|)",$=new RegExp(N+"+","g"),q=new RegExp("^"+N+"+|((?:^|[^\\\\])(?:\\\\.)*)"+N+"+$","g"),B=new RegExp("^"+N+"*,"+N+"*"),z=new RegExp("^"+N+"*([>+~]|"+N+")"+N+"*"),U=new RegExp(N+"|>"),W=new RegExp(V),X=new RegExp("^"+R+"$"),G={ID:new RegExp("^#("+R+")"),CLASS:new RegExp("^\\.("+R+")"),TAG:new RegExp("^("+R+"|[*])"),ATTR:new RegExp("^"+F),PSEUDO:new RegExp("^"+V),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+N+"*(even|odd|(([+-]|)(\\d*)n|)"+N+"*(?:([+-]|)"+N+"*(\\d+)|))"+N+"*\\)|)","i"),bool:new RegExp("^(?:"+O+")$","i"),needsContext:new RegExp("^"+N+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+N+"*((?:-\\d)?\\d*)"+N+"*\\)|)(?=[^-]|$)","i")},Y=/HTML$/i,K=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,Q=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}"+N+"?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},ie=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,re=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},se=function(){h()},oe=xe((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{k.apply(H=j.call(S.childNodes),S.childNodes),H[S.childNodes.length].nodeType}catch(e){k={apply:H.length?function(e,t){D.apply(e,j.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function ae(e,t,i,r){var s,a,u,c,d,f,v,y=t&&t.ownerDocument,S=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==S&&9!==S&&11!==S)return i;if(!r&&(h(t),t=t||p,m)){if(11!==S&&(d=Z.exec(e)))if(s=d[1]){if(9===S){if(!(u=t.getElementById(s)))return i;if(u.id===s)return i.push(u),i}else if(y&&(u=y.getElementById(s))&&b(t,u)&&u.id===s)return i.push(u),i}else{if(d[2])return k.apply(i,t.getElementsByTagName(e)),i;if((s=d[3])&&n.getElementsByClassName&&t.getElementsByClassName)return k.apply(i,t.getElementsByClassName(s)),i}if(n.qsa&&!L[e+" "]&&(!g||!g.test(e))&&(1!==S||"object"!==t.nodeName.toLowerCase())){if(v=e,y=t,1===S&&(U.test(e)||z.test(e))){for((y=ee.test(e)&&ve(t.parentNode)||t)===t&&n.scope||((c=t.getAttribute("id"))?c=c.replace(ie,re):t.setAttribute("id",c=x)),a=(f=o(e)).length;a--;)f[a]=(c?"#"+c:":scope")+" "+be(f[a]);v=f.join(",")}try{return k.apply(i,y.querySelectorAll(v)),i}catch(t){L(e,!0)}finally{c===x&&t.removeAttribute("id")}}}return l(e.replace(q,"$1"),t,i,r)}function le(){var e=[];return function t(n,r){return e.push(n+" ")>i.cacheLength&&delete t[e.shift()],t[n+" "]=r}}function ue(e){return e[x]=!0,e}function ce(e){var t=p.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function de(e,t){for(var n=e.split("|"),r=n.length;r--;)i.attrHandle[n[r]]=t}function he(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function pe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function fe(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function me(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&oe(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function ge(e){return ue((function(t){return t=+t,ue((function(n,i){for(var r,s=e([],n.length,t),o=s.length;o--;)n[r=s[o]]&&(n[r]=!(i[r]=n[r]))}))}))}function ve(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=ae.support={},s=ae.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!Y.test(t||n&&n.nodeName||"HTML")},h=ae.setDocument=function(e){var t,r,o=e?e.ownerDocument||e:S;return o!=p&&9===o.nodeType&&o.documentElement?(f=(p=o).documentElement,m=!s(p),S!=p&&(r=p.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",se,!1):r.attachEvent&&r.attachEvent("onunload",se)),n.scope=ce((function(e){return f.appendChild(e).appendChild(p.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=ce((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=ce((function(e){return e.appendChild(p.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=Q.test(p.getElementsByClassName),n.getById=ce((function(e){return f.appendChild(e).id=x,!p.getElementsByName||!p.getElementsByName(x).length})),n.getById?(i.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n=t.getElementById(e);return n?[n]:[]}}):(i.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n,i,r,s=t.getElementById(e);if(s){if((n=s.getAttributeNode("id"))&&n.value===e)return[s];for(r=t.getElementsByName(e),i=0;s=r[i++];)if((n=s.getAttributeNode("id"))&&n.value===e)return[s]}return[]}}),i.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,s=t.getElementsByTagName(e);if("*"===e){for(;n=s[r++];)1===n.nodeType&&i.push(n);return i}return s},i.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&m)return t.getElementsByClassName(e)},v=[],g=[],(n.qsa=Q.test(p.querySelectorAll))&&(ce((function(e){var t;f.appendChild(e).innerHTML="<a id='"+x+"'></a><select id='"+x+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+N+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\["+N+"*(?:value|"+O+")"),e.querySelectorAll("[id~="+x+"-]").length||g.push("~="),(t=p.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||g.push("\\["+N+"*name"+N+"*="+N+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+x+"+*").length||g.push(".#.+[+~]"),e.querySelectorAll("\\\f"),g.push("[\\r\\n\\f]")})),ce((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=p.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name"+N+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),f.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")}))),(n.matchesSelector=Q.test(y=f.matches||f.webkitMatchesSelector||f.mozMatchesSelector||f.oMatchesSelector||f.msMatchesSelector))&&ce((function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),v.push("!=",V)})),g=g.length&&new RegExp(g.join("|")),v=v.length&&new RegExp(v.join("|")),t=Q.test(f.compareDocumentPosition),b=t||Q.test(f.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},P=t?function(e,t){if(e===t)return d=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i||(1&(i=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===i?e==p||e.ownerDocument==S&&b(S,e)?-1:t==p||t.ownerDocument==S&&b(S,t)?1:c?M(c,e)-M(c,t):0:4&i?-1:1)}:function(e,t){if(e===t)return d=!0,0;var n,i=0,r=e.parentNode,s=t.parentNode,o=[e],a=[t];if(!r||!s)return e==p?-1:t==p?1:r?-1:s?1:c?M(c,e)-M(c,t):0;if(r===s)return he(e,t);for(n=e;n=n.parentNode;)o.unshift(n);for(n=t;n=n.parentNode;)a.unshift(n);for(;o[i]===a[i];)i++;return i?he(o[i],a[i]):o[i]==S?-1:a[i]==S?1:0},p):p},ae.matches=function(e,t){return ae(e,null,null,t)},ae.matchesSelector=function(e,t){if(h(e),n.matchesSelector&&m&&!L[t+" "]&&(!v||!v.test(t))&&(!g||!g.test(t)))try{var i=y.call(e,t);if(i||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){L(t,!0)}return ae(t,p,null,[e]).length>0},ae.contains=function(e,t){return(e.ownerDocument||e)!=p&&h(e),b(e,t)},ae.attr=function(e,t){(e.ownerDocument||e)!=p&&h(e);var r=i.attrHandle[t.toLowerCase()],s=r&&I.call(i.attrHandle,t.toLowerCase())?r(e,t,!m):void 0;return void 0!==s?s:n.attributes||!m?e.getAttribute(t):(s=e.getAttributeNode(t))&&s.specified?s.value:null},ae.escape=function(e){return(e+"").replace(ie,re)},ae.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},ae.uniqueSort=function(e){var t,i=[],r=0,s=0;if(d=!n.detectDuplicates,c=!n.sortStable&&e.slice(0),e.sort(P),d){for(;t=e[s++];)t===e[s]&&(r=i.push(s));for(;r--;)e.splice(i[r],1)}return c=null,e},r=ae.getText=function(e){var t,n="",i=0,s=e.nodeType;if(s){if(1===s||9===s||11===s){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=r(e)}else if(3===s||4===s)return e.nodeValue}else for(;t=e[i++];)n+=r(t);return n},(i=ae.selectors={cacheLength:50,createPseudo:ue,match:G,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ae.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ae.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return G.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&W.test(n)&&(t=o(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=E[e+" "];return t||(t=new RegExp("(^|"+N+")"+e+"("+N+"|$)"))&&E(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(i){var r=ae.attr(i,e);return null==r?"!="===t:!t||(r+="","="===t?r===n:"!="===t?r!==n:"^="===t?n&&0===r.indexOf(n):"*="===t?n&&r.indexOf(n)>-1:"$="===t?n&&r.slice(-n.length)===n:"~="===t?(" "+r.replace($," ")+" ").indexOf(n)>-1:"|="===t&&(r===n||r.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,i,r){var s="nth"!==e.slice(0,3),o="last"!==e.slice(-4),a="of-type"===t;return 1===i&&0===r?function(e){return!!e.parentNode}:function(t,n,l){var u,c,d,h,p,f,m=s!==o?"nextSibling":"previousSibling",g=t.parentNode,v=a&&t.nodeName.toLowerCase(),y=!l&&!a,b=!1;if(g){if(s){for(;m;){for(h=t;h=h[m];)if(a?h.nodeName.toLowerCase()===v:1===h.nodeType)return!1;f=m="only"===e&&!f&&"nextSibling"}return!0}if(f=[o?g.firstChild:g.lastChild],o&&y){for(b=(p=(u=(c=(d=(h=g)[x]||(h[x]={}))[h.uniqueID]||(d[h.uniqueID]={}))[e]||[])[0]===w&&u[1])&&u[2],h=p&&g.childNodes[p];h=++p&&h&&h[m]||(b=p=0)||f.pop();)if(1===h.nodeType&&++b&&h===t){c[e]=[w,p,b];break}}else if(y&&(b=p=(u=(c=(d=(h=t)[x]||(h[x]={}))[h.uniqueID]||(d[h.uniqueID]={}))[e]||[])[0]===w&&u[1]),!1===b)for(;(h=++p&&h&&h[m]||(b=p=0)||f.pop())&&((a?h.nodeName.toLowerCase()!==v:1!==h.nodeType)||!++b||(y&&((c=(d=h[x]||(h[x]={}))[h.uniqueID]||(d[h.uniqueID]={}))[e]=[w,b]),h!==t)););return(b-=r)===i||b%i==0&&b/i>=0}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||ae.error("unsupported pseudo: "+e);return r[x]?r(t):r.length>1?(n=[e,e,"",t],i.setFilters.hasOwnProperty(e.toLowerCase())?ue((function(e,n){for(var i,s=r(e,t),o=s.length;o--;)e[i=M(e,s[o])]=!(n[i]=s[o])})):function(e){return r(e,0,n)}):r}},pseudos:{not:ue((function(e){var t=[],n=[],i=a(e.replace(q,"$1"));return i[x]?ue((function(e,t,n,r){for(var s,o=i(e,null,r,[]),a=e.length;a--;)(s=o[a])&&(e[a]=!(t[a]=s))})):function(e,r,s){return t[0]=e,i(t,null,s,n),t[0]=null,!n.pop()}})),has:ue((function(e){return function(t){return ae(e,t).length>0}})),contains:ue((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||r(t)).indexOf(e)>-1}})),lang:ue((function(e){return X.test(e||"")||ae.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=m?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===f},focus:function(e){return e===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:me(!1),disabled:me(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!i.pseudos.empty(e)},header:function(e){return J.test(e.nodeName)},input:function(e){return K.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ge((function(){return[0]})),last:ge((function(e,t){return[t-1]})),eq:ge((function(e,t,n){return[n<0?n+t:n]})),even:ge((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:ge((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:ge((function(e,t,n){for(var i=n<0?n+t:n>t?t:n;--i>=0;)e.push(i);return e})),gt:ge((function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e}))}}).pseudos.nth=i.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[t]=pe(t);for(t in{submit:!0,reset:!0})i.pseudos[t]=fe(t);function ye(){}function be(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function xe(e,t,n){var i=t.dir,r=t.next,s=r||i,o=n&&"parentNode"===s,a=T++;return t.first?function(t,n,r){for(;t=t[i];)if(1===t.nodeType||o)return e(t,n,r);return!1}:function(t,n,l){var u,c,d,h=[w,a];if(l){for(;t=t[i];)if((1===t.nodeType||o)&&e(t,n,l))return!0}else for(;t=t[i];)if(1===t.nodeType||o)if(c=(d=t[x]||(t[x]={}))[t.uniqueID]||(d[t.uniqueID]={}),r&&r===t.nodeName.toLowerCase())t=t[i]||t;else{if((u=c[s])&&u[0]===w&&u[1]===a)return h[2]=u[2];if(c[s]=h,h[2]=e(t,n,l))return!0}return!1}}function Se(e){return e.length>1?function(t,n,i){for(var r=e.length;r--;)if(!e[r](t,n,i))return!1;return!0}:e[0]}function we(e,t,n,i,r){for(var s,o=[],a=0,l=e.length,u=null!=t;a<l;a++)(s=e[a])&&(n&&!n(s,i,r)||(o.push(s),u&&t.push(a)));return o}function Te(e,t,n,i,r,s){return i&&!i[x]&&(i=Te(i)),r&&!r[x]&&(r=Te(r,s)),ue((function(s,o,a,l){var u,c,d,h=[],p=[],f=o.length,m=s||function(e,t,n){for(var i=0,r=t.length;i<r;i++)ae(e,t[i],n);return n}(t||"*",a.nodeType?[a]:a,[]),g=!e||!s&&t?m:we(m,h,e,a,l),v=n?r||(s?e:f||i)?[]:o:g;if(n&&n(g,v,a,l),i)for(u=we(v,p),i(u,[],a,l),c=u.length;c--;)(d=u[c])&&(v[p[c]]=!(g[p[c]]=d));if(s){if(r||e){if(r){for(u=[],c=v.length;c--;)(d=v[c])&&u.push(g[c]=d);r(null,v=[],u,l)}for(c=v.length;c--;)(d=v[c])&&(u=r?M(s,d):h[c])>-1&&(s[u]=!(o[u]=d))}}else v=we(v===o?v.splice(f,v.length):v),r?r(null,o,v,l):k.apply(o,v)}))}function Ee(e){for(var t,n,r,s=e.length,o=i.relative[e[0].type],a=o||i.relative[" "],l=o?1:0,c=xe((function(e){return e===t}),a,!0),d=xe((function(e){return M(t,e)>-1}),a,!0),h=[function(e,n,i){var r=!o&&(i||n!==u)||((t=n).nodeType?c(e,n,i):d(e,n,i));return t=null,r}];l<s;l++)if(n=i.relative[e[l].type])h=[xe(Se(h),n)];else{if((n=i.filter[e[l].type].apply(null,e[l].matches))[x]){for(r=++l;r<s&&!i.relative[e[r].type];r++);return Te(l>1&&Se(h),l>1&&be(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(q,"$1"),n,l<r&&Ee(e.slice(l,r)),r<s&&Ee(e=e.slice(r)),r<s&&be(e))}h.push(n)}return Se(h)}return ye.prototype=i.filters=i.pseudos,i.setFilters=new ye,o=ae.tokenize=function(e,t){var n,r,s,o,a,l,u,c=C[e+" "];if(c)return t?0:c.slice(0);for(a=e,l=[],u=i.preFilter;a;){for(o in n&&!(r=B.exec(a))||(r&&(a=a.slice(r[0].length)||a),l.push(s=[])),n=!1,(r=z.exec(a))&&(n=r.shift(),s.push({value:n,type:r[0].replace(q," ")}),a=a.slice(n.length)),i.filter)!(r=G[o].exec(a))||u[o]&&!(r=u[o](r))||(n=r.shift(),s.push({value:n,type:o,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?ae.error(e):C(e,l).slice(0)},a=ae.compile=function(e,t){var n,r=[],s=[],a=A[e+" "];if(!a){for(t||(t=o(e)),n=t.length;n--;)(a=Ee(t[n]))[x]?r.push(a):s.push(a);(a=A(e,function(e,t){var n=t.length>0,r=e.length>0,s=function(s,o,a,l,c){var d,f,g,v=0,y="0",b=s&&[],x=[],S=u,T=s||r&&i.find.TAG("*",c),E=w+=null==S?1:Math.random()||.1,C=T.length;for(c&&(u=o==p||o||c);y!==C&&null!=(d=T[y]);y++){if(r&&d){for(f=0,o||d.ownerDocument==p||(h(d),a=!m);g=e[f++];)if(g(d,o||p,a)){l.push(d);break}c&&(w=E)}n&&((d=!g&&d)&&v--,s&&b.push(d))}if(v+=y,n&&y!==v){for(f=0;g=t[f++];)g(b,x,o,a);if(s){if(v>0)for(;y--;)b[y]||x[y]||(x[y]=_.call(l));x=we(x)}k.apply(l,x),c&&!s&&x.length>0&&v+t.length>1&&ae.uniqueSort(l)}return c&&(w=E,u=S),b};return n?ue(s):s}(s,r))).selector=e}return a},l=ae.select=function(e,t,n,r){var s,l,u,c,d,h="function"==typeof e&&e,p=!r&&o(e=h.selector||e);if(n=n||[],1===p.length){if((l=p[0]=p[0].slice(0)).length>2&&"ID"===(u=l[0]).type&&9===t.nodeType&&m&&i.relative[l[1].type]){if(!(t=(i.find.ID(u.matches[0].replace(te,ne),t)||[])[0]))return n;h&&(t=t.parentNode),e=e.slice(l.shift().value.length)}for(s=G.needsContext.test(e)?0:l.length;s--&&(u=l[s],!i.relative[c=u.type]);)if((d=i.find[c])&&(r=d(u.matches[0].replace(te,ne),ee.test(l[0].type)&&ve(t.parentNode)||t))){if(l.splice(s,1),!(e=r.length&&be(l)))return k.apply(n,r),n;break}}return(h||a(e,p))(r,t,!m,n,!t||ee.test(e)&&ve(t.parentNode)||t),n},n.sortStable=x.split("").sort(P).join("")===x,n.detectDuplicates=!!d,h(),n.sortDetached=ce((function(e){return 1&e.compareDocumentPosition(p.createElement("fieldset"))})),ce((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||de("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&ce((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||de("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),ce((function(e){return null==e.getAttribute("disabled")}))||de(O,(function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null})),ae}(n);T.find=C,T.expr=C.selectors,T.expr[":"]=T.expr.pseudos,T.uniqueSort=T.unique=C.uniqueSort,T.text=C.getText,T.isXMLDoc=C.isXML,T.contains=C.contains,T.escapeSelector=C.escape;var A=function(e,t,n){for(var i=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&T(e).is(n))break;i.push(e)}return i},L=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},P=T.expr.match.needsContext;function I(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var H=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function _(e,t,n){return v(t)?T.grep(e,(function(e,i){return!!t.call(e,i,e)!==n})):t.nodeType?T.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?T.grep(e,(function(e){return c.call(t,e)>-1!==n})):T.filter(t,e,n)}T.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?T.find.matchesSelector(i,e)?[i]:[]:T.find.matches(e,T.grep(t,(function(e){return 1===e.nodeType})))},T.fn.extend({find:function(e){var t,n,i=this.length,r=this;if("string"!=typeof e)return this.pushStack(T(e).filter((function(){for(t=0;t<i;t++)if(T.contains(r[t],this))return!0})));for(n=this.pushStack([]),t=0;t<i;t++)T.find(e,r[t],n);return i>1?T.uniqueSort(n):n},filter:function(e){return this.pushStack(_(this,e||[],!1))},not:function(e){return this.pushStack(_(this,e||[],!0))},is:function(e){return!!_(this,"string"==typeof e&&P.test(e)?T(e):e||[],!1).length}});var D,k=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(T.fn.init=function(e,t,n){var i,r;if(!e)return this;if(n=n||D,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:k.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof T?t[0]:t,T.merge(this,T.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:b,!0)),H.test(i[1])&&T.isPlainObject(t))for(i in t)v(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(r=b.getElementById(i[2]))&&(this[0]=r,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):v(e)?void 0!==n.ready?n.ready(e):e(T):T.makeArray(e,this)}).prototype=T.fn,D=T(b);var j=/^(?:parents|prev(?:Until|All))/,M={children:!0,contents:!0,next:!0,prev:!0};function O(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}T.fn.extend({has:function(e){var t=T(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(T.contains(this,t[e]))return!0}))},closest:function(e,t){var n,i=0,r=this.length,s=[],o="string"!=typeof e&&T(e);if(!P.test(e))for(;i<r;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(o?o.index(n)>-1:1===n.nodeType&&T.find.matchesSelector(n,e))){s.push(n);break}return this.pushStack(s.length>1?T.uniqueSort(s):s)},index:function(e){return e?"string"==typeof e?c.call(T(e),this[0]):c.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(T.uniqueSort(T.merge(this.get(),T(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),T.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return A(e,"parentNode")},parentsUntil:function(e,t,n){return A(e,"parentNode",n)},next:function(e){return O(e,"nextSibling")},prev:function(e){return O(e,"previousSibling")},nextAll:function(e){return A(e,"nextSibling")},prevAll:function(e){return A(e,"previousSibling")},nextUntil:function(e,t,n){return A(e,"nextSibling",n)},prevUntil:function(e,t,n){return A(e,"previousSibling",n)},siblings:function(e){return L((e.parentNode||{}).firstChild,e)},children:function(e){return L(e.firstChild)},contents:function(e){return null!=e.contentDocument&&o(e.contentDocument)?e.contentDocument:(I(e,"template")&&(e=e.content||e),T.merge([],e.childNodes))}},(function(e,t){T.fn[e]=function(n,i){var r=T.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=T.filter(i,r)),this.length>1&&(M[e]||T.uniqueSort(r),j.test(e)&&r.reverse()),this.pushStack(r)}}));var N=/[^\x20\t\r\n\f]+/g;function R(e){return e}function F(e){throw e}function V(e,t,n,i){var r;try{e&&v(r=e.promise)?r.call(e).done(t).fail(n):e&&v(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}T.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return T.each(e.match(N)||[],(function(e,n){t[n]=!0})),t}(e):T.extend({},e);var t,n,i,r,s=[],o=[],a=-1,l=function(){for(r=r||e.once,i=t=!0;o.length;a=-1)for(n=o.shift();++a<s.length;)!1===s[a].apply(n[0],n[1])&&e.stopOnFalse&&(a=s.length,n=!1);e.memory||(n=!1),t=!1,r&&(s=n?[]:"")},u={add:function(){return s&&(n&&!t&&(a=s.length-1,o.push(n)),function t(n){T.each(n,(function(n,i){v(i)?e.unique&&u.has(i)||s.push(i):i&&i.length&&"string"!==w(i)&&t(i)}))}(arguments),n&&!t&&l()),this},remove:function(){return T.each(arguments,(function(e,t){for(var n;(n=T.inArray(t,s,n))>-1;)s.splice(n,1),n<=a&&a--})),this},has:function(e){return e?T.inArray(e,s)>-1:s.length>0},empty:function(){return s&&(s=[]),this},disable:function(){return r=o=[],s=n="",this},disabled:function(){return!s},lock:function(){return r=o=[],n||t||(s=n=""),this},locked:function(){return!!r},fireWith:function(e,n){return r||(n=[e,(n=n||[]).slice?n.slice():n],o.push(n),t||l()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!i}};return u},T.extend({Deferred:function(e){var t=[["notify","progress",T.Callbacks("memory"),T.Callbacks("memory"),2],["resolve","done",T.Callbacks("once memory"),T.Callbacks("once memory"),0,"resolved"],["reject","fail",T.Callbacks("once memory"),T.Callbacks("once memory"),1,"rejected"]],i="pending",r={state:function(){return i},always:function(){return s.done(arguments).fail(arguments),this},catch:function(e){return r.then(null,e)},pipe:function(){var e=arguments;return T.Deferred((function(n){T.each(t,(function(t,i){var r=v(e[i[4]])&&e[i[4]];s[i[1]]((function(){var e=r&&r.apply(this,arguments);e&&v(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[i[0]+"With"](this,r?[e]:arguments)}))})),e=null})).promise()},then:function(e,i,r){var s=0;function o(e,t,i,r){return function(){var a=this,l=arguments,u=function(){var n,u;if(!(e<s)){if((n=i.apply(a,l))===t.promise())throw new TypeError("Thenable self-resolution");u=n&&("object"==typeof n||"function"==typeof n)&&n.then,v(u)?r?u.call(n,o(s,t,R,r),o(s,t,F,r)):(s++,u.call(n,o(s,t,R,r),o(s,t,F,r),o(s,t,R,t.notifyWith))):(i!==R&&(a=void 0,l=[n]),(r||t.resolveWith)(a,l))}},c=r?u:function(){try{u()}catch(n){T.Deferred.exceptionHook&&T.Deferred.exceptionHook(n,c.stackTrace),e+1>=s&&(i!==F&&(a=void 0,l=[n]),t.rejectWith(a,l))}};e?c():(T.Deferred.getStackHook&&(c.stackTrace=T.Deferred.getStackHook()),n.setTimeout(c))}}return T.Deferred((function(n){t[0][3].add(o(0,n,v(r)?r:R,n.notifyWith)),t[1][3].add(o(0,n,v(e)?e:R)),t[2][3].add(o(0,n,v(i)?i:F))})).promise()},promise:function(e){return null!=e?T.extend(e,r):r}},s={};return T.each(t,(function(e,n){var o=n[2],a=n[5];r[n[1]]=o.add,a&&o.add((function(){i=a}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),o.add(n[3].fire),s[n[0]]=function(){return s[n[0]+"With"](this===s?void 0:this,arguments),this},s[n[0]+"With"]=o.fireWith})),r.promise(s),e&&e.call(s,s),s},when:function(e){var t=arguments.length,n=t,i=Array(n),r=a.call(arguments),s=T.Deferred(),o=function(e){return function(n){i[e]=this,r[e]=arguments.length>1?a.call(arguments):n,--t||s.resolveWith(i,r)}};if(t<=1&&(V(e,s.done(o(n)).resolve,s.reject,!t),"pending"===s.state()||v(r[n]&&r[n].then)))return s.then();for(;n--;)V(r[n],o(n),s.reject);return s.promise()}});var $=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;T.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&$.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},T.readyException=function(e){n.setTimeout((function(){throw e}))};var q=T.Deferred();function B(){b.removeEventListener("DOMContentLoaded",B),n.removeEventListener("load",B),T.ready()}T.fn.ready=function(e){return q.then(e).catch((function(e){T.readyException(e)})),this},T.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--T.readyWait:T.isReady)||(T.isReady=!0,!0!==e&&--T.readyWait>0||q.resolveWith(b,[T]))}}),T.ready.then=q.then,"complete"===b.readyState||"loading"!==b.readyState&&!b.documentElement.doScroll?n.setTimeout(T.ready):(b.addEventListener("DOMContentLoaded",B),n.addEventListener("load",B));var z=function(e,t,n,i,r,s,o){var a=0,l=e.length,u=null==n;if("object"===w(n))for(a in r=!0,n)z(e,t,a,n[a],!0,s,o);else if(void 0!==i&&(r=!0,v(i)||(o=!0),u&&(o?(t.call(e,i),t=null):(u=t,t=function(e,t,n){return u.call(T(e),n)})),t))for(;a<l;a++)t(e[a],n,o?i:i.call(e[a],a,t(e[a],n)));return r?e:u?t.call(e):l?t(e[0],n):s},U=/^-ms-/,W=/-([a-z])/g;function X(e,t){return t.toUpperCase()}function G(e){return e.replace(U,"ms-").replace(W,X)}var Y=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function K(){this.expando=T.expando+K.uid++}K.uid=1,K.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Y(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,r=this.cache(e);if("string"==typeof t)r[G(t)]=n;else for(i in t)r[G(i)]=t[i];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][G(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(G):(t=G(t))in i?[t]:t.match(N)||[]).length;for(;n--;)delete i[t[n]]}(void 0===t||T.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!T.isEmptyObject(t)}};var J=new K,Q=new K,Z=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,ee=/[A-Z]/g;function te(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(ee,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Z.test(e)?JSON.parse(e):e)}(n)}catch(e){}Q.set(e,t,n)}else n=void 0;return n}T.extend({hasData:function(e){return Q.hasData(e)||J.hasData(e)},data:function(e,t,n){return Q.access(e,t,n)},removeData:function(e,t){Q.remove(e,t)},_data:function(e,t,n){return J.access(e,t,n)},_removeData:function(e,t){J.remove(e,t)}}),T.fn.extend({data:function(e,t){var n,i,r,s=this[0],o=s&&s.attributes;if(void 0===e){if(this.length&&(r=Q.get(s),1===s.nodeType&&!J.get(s,"hasDataAttrs"))){for(n=o.length;n--;)o[n]&&0===(i=o[n].name).indexOf("data-")&&(i=G(i.slice(5)),te(s,i,r[i]));J.set(s,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each((function(){Q.set(this,e)})):z(this,(function(t){var n;if(s&&void 0===t)return void 0!==(n=Q.get(s,e))||void 0!==(n=te(s,e))?n:void 0;this.each((function(){Q.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){Q.remove(this,e)}))}}),T.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=J.get(e,t),n&&(!i||Array.isArray(n)?i=J.access(e,t,T.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=T.queue(e,t),i=n.length,r=n.shift(),s=T._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete s.stop,r.call(e,(function(){T.dequeue(e,t)}),s)),!i&&s&&s.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return J.get(e,n)||J.access(e,n,{empty:T.Callbacks("once memory").add((function(){J.remove(e,[t+"queue",n])}))})}}),T.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?T.queue(this[0],e):void 0===t?this:this.each((function(){var n=T.queue(this,e,t);T._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&T.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){T.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,r=T.Deferred(),s=this,o=this.length,a=function(){--i||r.resolveWith(s,[s])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";o--;)(n=J.get(s[o],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),r.promise(t)}});var ne=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ie=new RegExp("^(?:([+-])=|)("+ne+")([a-z%]*)$","i"),re=["Top","Right","Bottom","Left"],se=b.documentElement,oe=function(e){return T.contains(e.ownerDocument,e)},ae={composed:!0};se.getRootNode&&(oe=function(e){return T.contains(e.ownerDocument,e)||e.getRootNode(ae)===e.ownerDocument});var le=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&oe(e)&&"none"===T.css(e,"display")};function ue(e,t,n,i){var r,s,o=20,a=i?function(){return i.cur()}:function(){return T.css(e,t,"")},l=a(),u=n&&n[3]||(T.cssNumber[t]?"":"px"),c=e.nodeType&&(T.cssNumber[t]||"px"!==u&&+l)&&ie.exec(T.css(e,t));if(c&&c[3]!==u){for(l/=2,u=u||c[3],c=+l||1;o--;)T.style(e,t,c+u),(1-s)*(1-(s=a()/l||.5))<=0&&(o=0),c/=s;c*=2,T.style(e,t,c+u),n=n||[]}return n&&(c=+c||+l||0,r=n[1]?c+(n[1]+1)*n[2]:+n[2],i&&(i.unit=u,i.start=c,i.end=r)),r}var ce={};function de(e){var t,n=e.ownerDocument,i=e.nodeName,r=ce[i];return r||(t=n.body.appendChild(n.createElement(i)),r=T.css(t,"display"),t.parentNode.removeChild(t),"none"===r&&(r="block"),ce[i]=r,r)}function he(e,t){for(var n,i,r=[],s=0,o=e.length;s<o;s++)(i=e[s]).style&&(n=i.style.display,t?("none"===n&&(r[s]=J.get(i,"display")||null,r[s]||(i.style.display="")),""===i.style.display&&le(i)&&(r[s]=de(i))):"none"!==n&&(r[s]="none",J.set(i,"display",n)));for(s=0;s<o;s++)null!=r[s]&&(e[s].style.display=r[s]);return e}T.fn.extend({show:function(){return he(this,!0)},hide:function(){return he(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){le(this)?T(this).show():T(this).hide()}))}});var pe,fe,me=/^(?:checkbox|radio)$/i,ge=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ve=/^$|^module$|\/(?:java|ecma)script/i;pe=b.createDocumentFragment().appendChild(b.createElement("div")),(fe=b.createElement("input")).setAttribute("type","radio"),fe.setAttribute("checked","checked"),fe.setAttribute("name","t"),pe.appendChild(fe),g.checkClone=pe.cloneNode(!0).cloneNode(!0).lastChild.checked,pe.innerHTML="<textarea>x</textarea>",g.noCloneChecked=!!pe.cloneNode(!0).lastChild.defaultValue,pe.innerHTML="<option></option>",g.option=!!pe.lastChild;var ye={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function be(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&I(e,t)?T.merge([e],n):n}function xe(e,t){for(var n=0,i=e.length;n<i;n++)J.set(e[n],"globalEval",!t||J.get(t[n],"globalEval"))}ye.tbody=ye.tfoot=ye.colgroup=ye.caption=ye.thead,ye.th=ye.td,g.option||(ye.optgroup=ye.option=[1,"<select multiple='multiple'>","</select>"]);var Se=/<|&#?\w+;/;function we(e,t,n,i,r){for(var s,o,a,l,u,c,d=t.createDocumentFragment(),h=[],p=0,f=e.length;p<f;p++)if((s=e[p])||0===s)if("object"===w(s))T.merge(h,s.nodeType?[s]:s);else if(Se.test(s)){for(o=o||d.appendChild(t.createElement("div")),a=(ge.exec(s)||["",""])[1].toLowerCase(),l=ye[a]||ye._default,o.innerHTML=l[1]+T.htmlPrefilter(s)+l[2],c=l[0];c--;)o=o.lastChild;T.merge(h,o.childNodes),(o=d.firstChild).textContent=""}else h.push(t.createTextNode(s));for(d.textContent="",p=0;s=h[p++];)if(i&&T.inArray(s,i)>-1)r&&r.push(s);else if(u=oe(s),o=be(d.appendChild(s),"script"),u&&xe(o),n)for(c=0;s=o[c++];)ve.test(s.type||"")&&n.push(s);return d}var Te=/^key/,Ee=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ce=/^([^.]*)(?:\.(.+)|)/;function Ae(){return!0}function Le(){return!1}function Pe(e,t){return e===function(){try{return b.activeElement}catch(e){}}()==("focus"===t)}function Ie(e,t,n,i,r,s){var o,a;if("object"==typeof t){for(a in"string"!=typeof n&&(i=i||n,n=void 0),t)Ie(e,a,n,i,t[a],s);return e}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=Le;else if(!r)return e;return 1===s&&(o=r,(r=function(e){return T().off(e),o.apply(this,arguments)}).guid=o.guid||(o.guid=T.guid++)),e.each((function(){T.event.add(this,t,r,i,n)}))}function He(e,t,n){n?(J.set(e,t,!1),T.event.add(e,t,{namespace:!1,handler:function(e){var i,r,s=J.get(this,t);if(1&e.isTrigger&&this[t]){if(s.length)(T.event.special[t]||{}).delegateType&&e.stopPropagation();else if(s=a.call(arguments),J.set(this,t,s),i=n(this,t),this[t](),s!==(r=J.get(this,t))||i?J.set(this,t,!1):r={},s!==r)return e.stopImmediatePropagation(),e.preventDefault(),r.value}else s.length&&(J.set(this,t,{value:T.event.trigger(T.extend(s[0],T.Event.prototype),s.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===J.get(e,t)&&T.event.add(e,t,Ae)}T.event={global:{},add:function(e,t,n,i,r){var s,o,a,l,u,c,d,h,p,f,m,g=J.get(e);if(Y(e))for(n.handler&&(n=(s=n).handler,r=s.selector),r&&T.find.matchesSelector(se,r),n.guid||(n.guid=T.guid++),(l=g.events)||(l=g.events=Object.create(null)),(o=g.handle)||(o=g.handle=function(t){return void 0!==T&&T.event.triggered!==t.type?T.event.dispatch.apply(e,arguments):void 0}),u=(t=(t||"").match(N)||[""]).length;u--;)p=m=(a=Ce.exec(t[u])||[])[1],f=(a[2]||"").split(".").sort(),p&&(d=T.event.special[p]||{},p=(r?d.delegateType:d.bindType)||p,d=T.event.special[p]||{},c=T.extend({type:p,origType:m,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&T.expr.match.needsContext.test(r),namespace:f.join(".")},s),(h=l[p])||((h=l[p]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(e,i,f,o)||e.addEventListener&&e.addEventListener(p,o)),d.add&&(d.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),r?h.splice(h.delegateCount++,0,c):h.push(c),T.event.global[p]=!0)},remove:function(e,t,n,i,r){var s,o,a,l,u,c,d,h,p,f,m,g=J.hasData(e)&&J.get(e);if(g&&(l=g.events)){for(u=(t=(t||"").match(N)||[""]).length;u--;)if(p=m=(a=Ce.exec(t[u])||[])[1],f=(a[2]||"").split(".").sort(),p){for(d=T.event.special[p]||{},h=l[p=(i?d.delegateType:d.bindType)||p]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),o=s=h.length;s--;)c=h[s],!r&&m!==c.origType||n&&n.guid!==c.guid||a&&!a.test(c.namespace)||i&&i!==c.selector&&("**"!==i||!c.selector)||(h.splice(s,1),c.selector&&h.delegateCount--,d.remove&&d.remove.call(e,c));o&&!h.length&&(d.teardown&&!1!==d.teardown.call(e,f,g.handle)||T.removeEvent(e,p,g.handle),delete l[p])}else for(p in l)T.event.remove(e,p+t[u],n,i,!0);T.isEmptyObject(l)&&J.remove(e,"handle events")}},dispatch:function(e){var t,n,i,r,s,o,a=new Array(arguments.length),l=T.event.fix(e),u=(J.get(this,"events")||Object.create(null))[l.type]||[],c=T.event.special[l.type]||{};for(a[0]=l,t=1;t<arguments.length;t++)a[t]=arguments[t];if(l.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,l)){for(o=T.event.handlers.call(this,l,u),t=0;(r=o[t++])&&!l.isPropagationStopped();)for(l.currentTarget=r.elem,n=0;(s=r.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==s.namespace&&!l.rnamespace.test(s.namespace)||(l.handleObj=s,l.data=s.data,void 0!==(i=((T.event.special[s.origType]||{}).handle||s.handler).apply(r.elem,a))&&!1===(l.result=i)&&(l.preventDefault(),l.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,i,r,s,o,a=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&e.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(s=[],o={},n=0;n<l;n++)void 0===o[r=(i=t[n]).selector+" "]&&(o[r]=i.needsContext?T(r,this).index(u)>-1:T.find(r,this,null,[u]).length),o[r]&&s.push(i);s.length&&a.push({elem:u,handlers:s})}return u=this,l<t.length&&a.push({elem:u,handlers:t.slice(l)}),a},addProp:function(e,t){Object.defineProperty(T.Event.prototype,e,{enumerable:!0,configurable:!0,get:v(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[T.expando]?e:new T.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return me.test(t.type)&&t.click&&I(t,"input")&&He(t,"click",Ae),!1},trigger:function(e){var t=this||e;return me.test(t.type)&&t.click&&I(t,"input")&&He(t,"click"),!0},_default:function(e){var t=e.target;return me.test(t.type)&&t.click&&I(t,"input")&&J.get(t,"click")||I(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},T.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},T.Event=function(e,t){if(!(this instanceof T.Event))return new T.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ae:Le,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&T.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[T.expando]=!0},T.Event.prototype={constructor:T.Event,isDefaultPrevented:Le,isPropagationStopped:Le,isImmediatePropagationStopped:Le,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ae,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ae,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ae,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},T.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Te.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Ee.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},T.event.addProp),T.each({focus:"focusin",blur:"focusout"},(function(e,t){T.event.special[e]={setup:function(){return He(this,e,Pe),!1},trigger:function(){return He(this,e),!0},delegateType:t}})),T.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){T.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=this,r=e.relatedTarget,s=e.handleObj;return r&&(r===i||T.contains(i,r))||(e.type=s.origType,n=s.handler.apply(this,arguments),e.type=t),n}}})),T.fn.extend({on:function(e,t,n,i){return Ie(this,e,t,n,i)},one:function(e,t,n,i){return Ie(this,e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,T(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Le),this.each((function(){T.event.remove(this,e,n,t)}))}});var _e=/<script|<style|<link/i,De=/checked\s*(?:[^=]|=\s*.checked.)/i,ke=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function je(e,t){return I(e,"table")&&I(11!==t.nodeType?t:t.firstChild,"tr")&&T(e).children("tbody")[0]||e}function Me(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Oe(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Ne(e,t){var n,i,r,s,o,a;if(1===t.nodeType){if(J.hasData(e)&&(a=J.get(e).events))for(r in J.remove(t,"handle events"),a)for(n=0,i=a[r].length;n<i;n++)T.event.add(t,r,a[r][n]);Q.hasData(e)&&(s=Q.access(e),o=T.extend({},s),Q.set(t,o))}}function Re(e,t){var n=t.nodeName.toLowerCase();"input"===n&&me.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Fe(e,t,n,i){t=l(t);var r,s,o,a,u,c,d=0,h=e.length,p=h-1,f=t[0],m=v(f);if(m||h>1&&"string"==typeof f&&!g.checkClone&&De.test(f))return e.each((function(r){var s=e.eq(r);m&&(t[0]=f.call(this,r,s.html())),Fe(s,t,n,i)}));if(h&&(s=(r=we(t,e[0].ownerDocument,!1,e,i)).firstChild,1===r.childNodes.length&&(r=s),s||i)){for(a=(o=T.map(be(r,"script"),Me)).length;d<h;d++)u=r,d!==p&&(u=T.clone(u,!0,!0),a&&T.merge(o,be(u,"script"))),n.call(e[d],u,d);if(a)for(c=o[o.length-1].ownerDocument,T.map(o,Oe),d=0;d<a;d++)u=o[d],ve.test(u.type||"")&&!J.access(u,"globalEval")&&T.contains(c,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?T._evalUrl&&!u.noModule&&T._evalUrl(u.src,{nonce:u.nonce||u.getAttribute("nonce")},c):S(u.textContent.replace(ke,""),u,c))}return e}function Ve(e,t,n){for(var i,r=t?T.filter(t,e):e,s=0;null!=(i=r[s]);s++)n||1!==i.nodeType||T.cleanData(be(i)),i.parentNode&&(n&&oe(i)&&xe(be(i,"script")),i.parentNode.removeChild(i));return e}T.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var i,r,s,o,a=e.cloneNode(!0),l=oe(e);if(!(g.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||T.isXMLDoc(e)))for(o=be(a),i=0,r=(s=be(e)).length;i<r;i++)Re(s[i],o[i]);if(t)if(n)for(s=s||be(e),o=o||be(a),i=0,r=s.length;i<r;i++)Ne(s[i],o[i]);else Ne(e,a);return(o=be(a,"script")).length>0&&xe(o,!l&&be(e,"script")),a},cleanData:function(e){for(var t,n,i,r=T.event.special,s=0;void 0!==(n=e[s]);s++)if(Y(n)){if(t=n[J.expando]){if(t.events)for(i in t.events)r[i]?T.event.remove(n,i):T.removeEvent(n,i,t.handle);n[J.expando]=void 0}n[Q.expando]&&(n[Q.expando]=void 0)}}}),T.fn.extend({detach:function(e){return Ve(this,e,!0)},remove:function(e){return Ve(this,e)},text:function(e){return z(this,(function(e){return void 0===e?T.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Fe(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||je(this,e).appendChild(e)}))},prepend:function(){return Fe(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=je(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Fe(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Fe(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(T.cleanData(be(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return T.clone(this,e,t)}))},html:function(e){return z(this,(function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!_e.test(e)&&!ye[(ge.exec(e)||["",""])[1].toLowerCase()]){e=T.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(T.cleanData(be(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Fe(this,arguments,(function(t){var n=this.parentNode;T.inArray(this,e)<0&&(T.cleanData(be(this)),n&&n.replaceChild(t,this))}),e)}}),T.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){T.fn[e]=function(e){for(var n,i=[],r=T(e),s=r.length-1,o=0;o<=s;o++)n=o===s?this:this.clone(!0),T(r[o])[t](n),u.apply(i,n.get());return this.pushStack(i)}}));var $e=new RegExp("^("+ne+")(?!px)[a-z%]+$","i"),qe=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},Be=function(e,t,n){var i,r,s={};for(r in t)s[r]=e.style[r],e.style[r]=t[r];for(r in i=n.call(e),t)e.style[r]=s[r];return i},ze=new RegExp(re.join("|"),"i");function Ue(e,t,n){var i,r,s,o,a=e.style;return(n=n||qe(e))&&(""!==(o=n.getPropertyValue(t)||n[t])||oe(e)||(o=T.style(e,t)),!g.pixelBoxStyles()&&$e.test(o)&&ze.test(t)&&(i=a.width,r=a.minWidth,s=a.maxWidth,a.minWidth=a.maxWidth=a.width=o,o=n.width,a.width=i,a.minWidth=r,a.maxWidth=s)),void 0!==o?o+"":o}function We(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(c){u.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",se.appendChild(u).appendChild(c);var e=n.getComputedStyle(c);i="1%"!==e.top,l=12===t(e.marginLeft),c.style.right="60%",o=36===t(e.right),r=36===t(e.width),c.style.position="absolute",s=12===t(c.offsetWidth/3),se.removeChild(u),c=null}}function t(e){return Math.round(parseFloat(e))}var i,r,s,o,a,l,u=b.createElement("div"),c=b.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",g.clearCloneStyle="content-box"===c.style.backgroundClip,T.extend(g,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),o},pixelPosition:function(){return e(),i},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),s},reliableTrDimensions:function(){var e,t,i,r;return null==a&&(e=b.createElement("table"),t=b.createElement("tr"),i=b.createElement("div"),e.style.cssText="position:absolute;left:-11111px",t.style.height="1px",i.style.height="9px",se.appendChild(e).appendChild(t).appendChild(i),r=n.getComputedStyle(t),a=parseInt(r.height)>3,se.removeChild(e)),a}}))}();var Xe=["Webkit","Moz","ms"],Ge=b.createElement("div").style,Ye={};function Ke(e){var t=T.cssProps[e]||Ye[e];return t||(e in Ge?e:Ye[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Xe.length;n--;)if((e=Xe[n]+t)in Ge)return e}(e)||e)}var Je=/^(none|table(?!-c[ea]).+)/,Qe=/^--/,Ze={position:"absolute",visibility:"hidden",display:"block"},et={letterSpacing:"0",fontWeight:"400"};function tt(e,t,n){var i=ie.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function nt(e,t,n,i,r,s){var o="width"===t?1:0,a=0,l=0;if(n===(i?"border":"content"))return 0;for(;o<4;o+=2)"margin"===n&&(l+=T.css(e,n+re[o],!0,r)),i?("content"===n&&(l-=T.css(e,"padding"+re[o],!0,r)),"margin"!==n&&(l-=T.css(e,"border"+re[o]+"Width",!0,r))):(l+=T.css(e,"padding"+re[o],!0,r),"padding"!==n?l+=T.css(e,"border"+re[o]+"Width",!0,r):a+=T.css(e,"border"+re[o]+"Width",!0,r));return!i&&s>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-s-l-a-.5))||0),l}function it(e,t,n){var i=qe(e),r=(!g.boxSizingReliable()||n)&&"border-box"===T.css(e,"boxSizing",!1,i),s=r,o=Ue(e,t,i),a="offset"+t[0].toUpperCase()+t.slice(1);if($e.test(o)){if(!n)return o;o="auto"}return(!g.boxSizingReliable()&&r||!g.reliableTrDimensions()&&I(e,"tr")||"auto"===o||!parseFloat(o)&&"inline"===T.css(e,"display",!1,i))&&e.getClientRects().length&&(r="border-box"===T.css(e,"boxSizing",!1,i),(s=a in e)&&(o=e[a])),(o=parseFloat(o)||0)+nt(e,t,n||(r?"border":"content"),s,i,o)+"px"}function rt(e,t,n,i,r){return new rt.prototype.init(e,t,n,i,r)}T.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ue(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,s,o,a=G(t),l=Qe.test(t),u=e.style;if(l||(t=Ke(a)),o=T.cssHooks[t]||T.cssHooks[a],void 0===n)return o&&"get"in o&&void 0!==(r=o.get(e,!1,i))?r:u[t];"string"===(s=typeof n)&&(r=ie.exec(n))&&r[1]&&(n=ue(e,t,r),s="number"),null!=n&&n==n&&("number"!==s||l||(n+=r&&r[3]||(T.cssNumber[a]?"":"px")),g.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),o&&"set"in o&&void 0===(n=o.set(e,n,i))||(l?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,i){var r,s,o,a=G(t);return Qe.test(t)||(t=Ke(a)),(o=T.cssHooks[t]||T.cssHooks[a])&&"get"in o&&(r=o.get(e,!0,n)),void 0===r&&(r=Ue(e,t,i)),"normal"===r&&t in et&&(r=et[t]),""===n||n?(s=parseFloat(r),!0===n||isFinite(s)?s||0:r):r}}),T.each(["height","width"],(function(e,t){T.cssHooks[t]={get:function(e,n,i){if(n)return!Je.test(T.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?it(e,t,i):Be(e,Ze,(function(){return it(e,t,i)}))},set:function(e,n,i){var r,s=qe(e),o=!g.scrollboxSize()&&"absolute"===s.position,a=(o||i)&&"border-box"===T.css(e,"boxSizing",!1,s),l=i?nt(e,t,i,a,s):0;return a&&o&&(l-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(s[t])-nt(e,t,"border",!1,s)-.5)),l&&(r=ie.exec(n))&&"px"!==(r[3]||"px")&&(e.style[t]=n,n=T.css(e,t)),tt(0,n,l)}}})),T.cssHooks.marginLeft=We(g.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(Ue(e,"marginLeft"))||e.getBoundingClientRect().left-Be(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),T.each({margin:"",padding:"",border:"Width"},(function(e,t){T.cssHooks[e+t]={expand:function(n){for(var i=0,r={},s="string"==typeof n?n.split(" "):[n];i<4;i++)r[e+re[i]+t]=s[i]||s[i-2]||s[0];return r}},"margin"!==e&&(T.cssHooks[e+t].set=tt)})),T.fn.extend({css:function(e,t){return z(this,(function(e,t,n){var i,r,s={},o=0;if(Array.isArray(t)){for(i=qe(e),r=t.length;o<r;o++)s[t[o]]=T.css(e,t[o],!1,i);return s}return void 0!==n?T.style(e,t,n):T.css(e,t)}),e,t,arguments.length>1)}}),T.Tween=rt,rt.prototype={constructor:rt,init:function(e,t,n,i,r,s){this.elem=e,this.prop=n,this.easing=r||T.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=s||(T.cssNumber[n]?"":"px")},cur:function(){var e=rt.propHooks[this.prop];return e&&e.get?e.get(this):rt.propHooks._default.get(this)},run:function(e){var t,n=rt.propHooks[this.prop];return this.options.duration?this.pos=t=T.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):rt.propHooks._default.set(this),this}},rt.prototype.init.prototype=rt.prototype,rt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=T.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){T.fx.step[e.prop]?T.fx.step[e.prop](e):1!==e.elem.nodeType||!T.cssHooks[e.prop]&&null==e.elem.style[Ke(e.prop)]?e.elem[e.prop]=e.now:T.style(e.elem,e.prop,e.now+e.unit)}}},rt.propHooks.scrollTop=rt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},T.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},T.fx=rt.prototype.init,T.fx.step={};var st,ot,at=/^(?:toggle|show|hide)$/,lt=/queueHooks$/;function ut(){ot&&(!1===b.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(ut):n.setTimeout(ut,T.fx.interval),T.fx.tick())}function ct(){return n.setTimeout((function(){st=void 0})),st=Date.now()}function dt(e,t){var n,i=0,r={height:e};for(t=t?1:0;i<4;i+=2-t)r["margin"+(n=re[i])]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function ht(e,t,n){for(var i,r=(pt.tweeners[t]||[]).concat(pt.tweeners["*"]),s=0,o=r.length;s<o;s++)if(i=r[s].call(n,t,e))return i}function pt(e,t,n){var i,r,s=0,o=pt.prefilters.length,a=T.Deferred().always((function(){delete l.elem})),l=function(){if(r)return!1;for(var t=st||ct(),n=Math.max(0,u.startTime+u.duration-t),i=1-(n/u.duration||0),s=0,o=u.tweens.length;s<o;s++)u.tweens[s].run(i);return a.notifyWith(e,[u,i,n]),i<1&&o?n:(o||a.notifyWith(e,[u,1,0]),a.resolveWith(e,[u]),!1)},u=a.promise({elem:e,props:T.extend({},t),opts:T.extend(!0,{specialEasing:{},easing:T.easing._default},n),originalProperties:t,originalOptions:n,startTime:st||ct(),duration:n.duration,tweens:[],createTween:function(t,n){var i=T.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(i),i},stop:function(t){var n=0,i=t?u.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)u.tweens[n].run(1);return t?(a.notifyWith(e,[u,1,0]),a.resolveWith(e,[u,t])):a.rejectWith(e,[u,t]),this}}),c=u.props;for(!function(e,t){var n,i,r,s,o;for(n in e)if(r=t[i=G(n)],s=e[n],Array.isArray(s)&&(r=s[1],s=e[n]=s[0]),n!==i&&(e[i]=s,delete e[n]),(o=T.cssHooks[i])&&"expand"in o)for(n in s=o.expand(s),delete e[i],s)n in e||(e[n]=s[n],t[n]=r);else t[i]=r}(c,u.opts.specialEasing);s<o;s++)if(i=pt.prefilters[s].call(u,e,c,u.opts))return v(i.stop)&&(T._queueHooks(u.elem,u.opts.queue).stop=i.stop.bind(i)),i;return T.map(c,ht,u),v(u.opts.start)&&u.opts.start.call(e,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),T.fx.timer(T.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u}T.Animation=T.extend(pt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ue(n.elem,e,ie.exec(t),n),n}]},tweener:function(e,t){v(e)?(t=e,e=["*"]):e=e.match(N);for(var n,i=0,r=e.length;i<r;i++)n=e[i],pt.tweeners[n]=pt.tweeners[n]||[],pt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,r,s,o,a,l,u,c,d="width"in t||"height"in t,h=this,p={},f=e.style,m=e.nodeType&&le(e),g=J.get(e,"fxshow");for(i in n.queue||(null==(o=T._queueHooks(e,"fx")).unqueued&&(o.unqueued=0,a=o.empty.fire,o.empty.fire=function(){o.unqueued||a()}),o.unqueued++,h.always((function(){h.always((function(){o.unqueued--,T.queue(e,"fx").length||o.empty.fire()}))}))),t)if(r=t[i],at.test(r)){if(delete t[i],s=s||"toggle"===r,r===(m?"hide":"show")){if("show"!==r||!g||void 0===g[i])continue;m=!0}p[i]=g&&g[i]||T.style(e,i)}if((l=!T.isEmptyObject(t))||!T.isEmptyObject(p))for(i in d&&1===e.nodeType&&(n.overflow=[f.overflow,f.overflowX,f.overflowY],null==(u=g&&g.display)&&(u=J.get(e,"display")),"none"===(c=T.css(e,"display"))&&(u?c=u:(he([e],!0),u=e.style.display||u,c=T.css(e,"display"),he([e]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===T.css(e,"float")&&(l||(h.done((function(){f.display=u})),null==u&&(c=f.display,u="none"===c?"":c)),f.display="inline-block")),n.overflow&&(f.overflow="hidden",h.always((function(){f.overflow=n.overflow[0],f.overflowX=n.overflow[1],f.overflowY=n.overflow[2]}))),l=!1,p)l||(g?"hidden"in g&&(m=g.hidden):g=J.access(e,"fxshow",{display:u}),s&&(g.hidden=!m),m&&he([e],!0),h.done((function(){for(i in m||he([e]),J.remove(e,"fxshow"),p)T.style(e,i,p[i])}))),l=ht(m?g[i]:0,i,h),i in g||(g[i]=l.start,m&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?pt.prefilters.unshift(e):pt.prefilters.push(e)}}),T.speed=function(e,t,n){var i=e&&"object"==typeof e?T.extend({},e):{complete:n||!n&&t||v(e)&&e,duration:e,easing:n&&t||t&&!v(t)&&t};return T.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in T.fx.speeds?i.duration=T.fx.speeds[i.duration]:i.duration=T.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){v(i.old)&&i.old.call(this),i.queue&&T.dequeue(this,i.queue)},i},T.fn.extend({fadeTo:function(e,t,n,i){return this.filter(le).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var r=T.isEmptyObject(e),s=T.speed(t,n,i),o=function(){var t=pt(this,T.extend({},e),s);(r||J.get(this,"finish"))&&t.stop(!0)};return o.finish=o,r||!1===s.queue?this.each(o):this.queue(s.queue,o)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,r=null!=e&&e+"queueHooks",s=T.timers,o=J.get(this);if(r)o[r]&&o[r].stop&&i(o[r]);else for(r in o)o[r]&&o[r].stop&&lt.test(r)&&i(o[r]);for(r=s.length;r--;)s[r].elem!==this||null!=e&&s[r].queue!==e||(s[r].anim.stop(n),t=!1,s.splice(r,1));!t&&n||T.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=J.get(this),i=n[e+"queue"],r=n[e+"queueHooks"],s=T.timers,o=i?i.length:0;for(n.finish=!0,T.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=s.length;t--;)s[t].elem===this&&s[t].queue===e&&(s[t].anim.stop(!0),s.splice(t,1));for(t=0;t<o;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish}))}}),T.each(["toggle","show","hide"],(function(e,t){var n=T.fn[t];T.fn[t]=function(e,i,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(dt(t,!0),e,i,r)}})),T.each({slideDown:dt("show"),slideUp:dt("hide"),slideToggle:dt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){T.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}})),T.timers=[],T.fx.tick=function(){var e,t=0,n=T.timers;for(st=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||T.fx.stop(),st=void 0},T.fx.timer=function(e){T.timers.push(e),T.fx.start()},T.fx.interval=13,T.fx.start=function(){ot||(ot=!0,ut())},T.fx.stop=function(){ot=null},T.fx.speeds={slow:600,fast:200,_default:400},T.fn.delay=function(e,t){return e=T.fx&&T.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,i){var r=n.setTimeout(t,e);i.stop=function(){n.clearTimeout(r)}}))},function(){var e=b.createElement("input"),t=b.createElement("select").appendChild(b.createElement("option"));e.type="checkbox",g.checkOn=""!==e.value,g.optSelected=t.selected,(e=b.createElement("input")).value="t",e.type="radio",g.radioValue="t"===e.value}();var ft,mt=T.expr.attrHandle;T.fn.extend({attr:function(e,t){return z(this,T.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){T.removeAttr(this,e)}))}}),T.extend({attr:function(e,t,n){var i,r,s=e.nodeType;if(3!==s&&8!==s&&2!==s)return void 0===e.getAttribute?T.prop(e,t,n):(1===s&&T.isXMLDoc(e)||(r=T.attrHooks[t.toLowerCase()]||(T.expr.match.bool.test(t)?ft:void 0)),void 0!==n?null===n?void T.removeAttr(e,t):r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(i=r.get(e,t))?i:null==(i=T.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!g.radioValue&&"radio"===t&&I(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,r=t&&t.match(N);if(r&&1===e.nodeType)for(;n=r[i++];)e.removeAttribute(n)}}),ft={set:function(e,t,n){return!1===t?T.removeAttr(e,n):e.setAttribute(n,n),n}},T.each(T.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=mt[t]||T.find.attr;mt[t]=function(e,t,i){var r,s,o=t.toLowerCase();return i||(s=mt[o],mt[o]=r,r=null!=n(e,t,i)?o:null,mt[o]=s),r}}));var gt=/^(?:input|select|textarea|button)$/i,vt=/^(?:a|area)$/i;function yt(e){return(e.match(N)||[]).join(" ")}function bt(e){return e.getAttribute&&e.getAttribute("class")||""}function xt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(N)||[]}T.fn.extend({prop:function(e,t){return z(this,T.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[T.propFix[e]||e]}))}}),T.extend({prop:function(e,t,n){var i,r,s=e.nodeType;if(3!==s&&8!==s&&2!==s)return 1===s&&T.isXMLDoc(e)||(t=T.propFix[t]||t,r=T.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=T.find.attr(e,"tabindex");return t?parseInt(t,10):gt.test(e.nodeName)||vt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),g.optSelected||(T.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),T.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){T.propFix[this.toLowerCase()]=this})),T.fn.extend({addClass:function(e){var t,n,i,r,s,o,a,l=0;if(v(e))return this.each((function(t){T(this).addClass(e.call(this,t,bt(this)))}));if((t=xt(e)).length)for(;n=this[l++];)if(r=bt(n),i=1===n.nodeType&&" "+yt(r)+" "){for(o=0;s=t[o++];)i.indexOf(" "+s+" ")<0&&(i+=s+" ");r!==(a=yt(i))&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,i,r,s,o,a,l=0;if(v(e))return this.each((function(t){T(this).removeClass(e.call(this,t,bt(this)))}));if(!arguments.length)return this.attr("class","");if((t=xt(e)).length)for(;n=this[l++];)if(r=bt(n),i=1===n.nodeType&&" "+yt(r)+" "){for(o=0;s=t[o++];)for(;i.indexOf(" "+s+" ")>-1;)i=i.replace(" "+s+" "," ");r!==(a=yt(i))&&n.setAttribute("class",a)}return this},toggleClass:function(e,t){var n=typeof e,i="string"===n||Array.isArray(e);return"boolean"==typeof t&&i?t?this.addClass(e):this.removeClass(e):v(e)?this.each((function(n){T(this).toggleClass(e.call(this,n,bt(this),t),t)})):this.each((function(){var t,r,s,o;if(i)for(r=0,s=T(this),o=xt(e);t=o[r++];)s.hasClass(t)?s.removeClass(t):s.addClass(t);else void 0!==e&&"boolean"!==n||((t=bt(this))&&J.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":J.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+yt(bt(n))+" ").indexOf(t)>-1)return!0;return!1}});var St=/\r/g;T.fn.extend({val:function(e){var t,n,i,r=this[0];return arguments.length?(i=v(e),this.each((function(n){var r;1===this.nodeType&&(null==(r=i?e.call(this,n,T(this).val()):e)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=T.map(r,(function(e){return null==e?"":e+""}))),(t=T.valHooks[this.type]||T.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))}))):r?(t=T.valHooks[r.type]||T.valHooks[r.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(St,""):null==n?"":n:void 0}}),T.extend({valHooks:{option:{get:function(e){var t=T.find.attr(e,"value");return null!=t?t:yt(T.text(e))}},select:{get:function(e){var t,n,i,r=e.options,s=e.selectedIndex,o="select-one"===e.type,a=o?null:[],l=o?s+1:r.length;for(i=s<0?l:o?s:0;i<l;i++)if(((n=r[i]).selected||i===s)&&!n.disabled&&(!n.parentNode.disabled||!I(n.parentNode,"optgroup"))){if(t=T(n).val(),o)return t;a.push(t)}return a},set:function(e,t){for(var n,i,r=e.options,s=T.makeArray(t),o=r.length;o--;)((i=r[o]).selected=T.inArray(T.valHooks.option.get(i),s)>-1)&&(n=!0);return n||(e.selectedIndex=-1),s}}}}),T.each(["radio","checkbox"],(function(){T.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=T.inArray(T(e).val(),t)>-1}},g.checkOn||(T.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),g.focusin="onfocusin"in n;var wt=/^(?:focusinfocus|focusoutblur)$/,Tt=function(e){e.stopPropagation()};T.extend(T.event,{trigger:function(e,t,i,r){var s,o,a,l,u,c,d,h,f=[i||b],m=p.call(e,"type")?e.type:e,g=p.call(e,"namespace")?e.namespace.split("."):[];if(o=h=a=i=i||b,3!==i.nodeType&&8!==i.nodeType&&!wt.test(m+T.event.triggered)&&(m.indexOf(".")>-1&&(g=m.split("."),m=g.shift(),g.sort()),u=m.indexOf(":")<0&&"on"+m,(e=e[T.expando]?e:new T.Event(m,"object"==typeof e&&e)).isTrigger=r?2:3,e.namespace=g.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),t=null==t?[e]:T.makeArray(t,[e]),d=T.event.special[m]||{},r||!d.trigger||!1!==d.trigger.apply(i,t))){if(!r&&!d.noBubble&&!y(i)){for(l=d.delegateType||m,wt.test(l+m)||(o=o.parentNode);o;o=o.parentNode)f.push(o),a=o;a===(i.ownerDocument||b)&&f.push(a.defaultView||a.parentWindow||n)}for(s=0;(o=f[s++])&&!e.isPropagationStopped();)h=o,e.type=s>1?l:d.bindType||m,(c=(J.get(o,"events")||Object.create(null))[e.type]&&J.get(o,"handle"))&&c.apply(o,t),(c=u&&o[u])&&c.apply&&Y(o)&&(e.result=c.apply(o,t),!1===e.result&&e.preventDefault());return e.type=m,r||e.isDefaultPrevented()||d._default&&!1!==d._default.apply(f.pop(),t)||!Y(i)||u&&v(i[m])&&!y(i)&&((a=i[u])&&(i[u]=null),T.event.triggered=m,e.isPropagationStopped()&&h.addEventListener(m,Tt),i[m](),e.isPropagationStopped()&&h.removeEventListener(m,Tt),T.event.triggered=void 0,a&&(i[u]=a)),e.result}},simulate:function(e,t,n){var i=T.extend(new T.Event,n,{type:e,isSimulated:!0});T.event.trigger(i,null,t)}}),T.fn.extend({trigger:function(e,t){return this.each((function(){T.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return T.event.trigger(e,t,n,!0)}}),g.focusin||T.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){T.event.simulate(t,e.target,T.event.fix(e))};T.event.special[t]={setup:function(){var i=this.ownerDocument||this.document||this,r=J.access(i,t);r||i.addEventListener(e,n,!0),J.access(i,t,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this.document||this,r=J.access(i,t)-1;r?J.access(i,t,r):(i.removeEventListener(e,n,!0),J.remove(i,t))}}}));var Et=n.location,Ct={guid:Date.now()},At=/\?/;T.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||T.error("Invalid XML: "+e),t};var Lt=/\[\]$/,Pt=/\r?\n/g,It=/^(?:submit|button|image|reset|file)$/i,Ht=/^(?:input|select|textarea|keygen)/i;function _t(e,t,n,i){var r;if(Array.isArray(t))T.each(t,(function(t,r){n||Lt.test(e)?i(e,r):_t(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,n,i)}));else if(n||"object"!==w(t))i(e,t);else for(r in t)_t(e+"["+r+"]",t[r],n,i)}T.param=function(e,t){var n,i=[],r=function(e,t){var n=v(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!T.isPlainObject(e))T.each(e,(function(){r(this.name,this.value)}));else for(n in e)_t(n,e[n],t,r);return i.join("&")},T.fn.extend({serialize:function(){return T.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=T.prop(this,"elements");return e?T.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!T(this).is(":disabled")&&Ht.test(this.nodeName)&&!It.test(e)&&(this.checked||!me.test(e))})).map((function(e,t){var n=T(this).val();return null==n?null:Array.isArray(n)?T.map(n,(function(e){return{name:t.name,value:e.replace(Pt,"\r\n")}})):{name:t.name,value:n.replace(Pt,"\r\n")}})).get()}});var Dt=/%20/g,kt=/#.*$/,jt=/([?&])_=[^&]*/,Mt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ot=/^(?:GET|HEAD)$/,Nt=/^\/\//,Rt={},Ft={},Vt="*/".concat("*"),$t=b.createElement("a");function qt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,r=0,s=t.toLowerCase().match(N)||[];if(v(n))for(;i=s[r++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function Bt(e,t,n,i){var r={},s=e===Ft;function o(a){var l;return r[a]=!0,T.each(e[a]||[],(function(e,a){var u=a(t,n,i);return"string"!=typeof u||s||r[u]?s?!(l=u):void 0:(t.dataTypes.unshift(u),o(u),!1)})),l}return o(t.dataTypes[0])||!r["*"]&&o("*")}function zt(e,t){var n,i,r=T.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:i||(i={}))[n]=t[n]);return i&&T.extend(!0,e,i),e}$t.href=Et.href,T.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Et.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Et.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Vt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":T.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?zt(zt(e,T.ajaxSettings),t):zt(T.ajaxSettings,e)},ajaxPrefilter:qt(Rt),ajaxTransport:qt(Ft),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var i,r,s,o,a,l,u,c,d,h,p=T.ajaxSetup({},t),f=p.context||p,m=p.context&&(f.nodeType||f.jquery)?T(f):T.event,g=T.Deferred(),v=T.Callbacks("once memory"),y=p.statusCode||{},x={},S={},w="canceled",E={readyState:0,getResponseHeader:function(e){var t;if(u){if(!o)for(o={};t=Mt.exec(s);)o[t[1].toLowerCase()+" "]=(o[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=o[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return u?s:null},setRequestHeader:function(e,t){return null==u&&(e=S[e.toLowerCase()]=S[e.toLowerCase()]||e,x[e]=t),this},overrideMimeType:function(e){return null==u&&(p.mimeType=e),this},statusCode:function(e){var t;if(e)if(u)E.always(e[E.status]);else for(t in e)y[t]=[y[t],e[t]];return this},abort:function(e){var t=e||w;return i&&i.abort(t),C(0,t),this}};if(g.promise(E),p.url=((e||p.url||Et.href)+"").replace(Nt,Et.protocol+"//"),p.type=t.method||t.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(N)||[""],null==p.crossDomain){l=b.createElement("a");try{l.href=p.url,l.href=l.href,p.crossDomain=$t.protocol+"//"+$t.host!=l.protocol+"//"+l.host}catch(e){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=T.param(p.data,p.traditional)),Bt(Rt,p,t,E),u)return E;for(d in(c=T.event&&p.global)&&0==T.active++&&T.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Ot.test(p.type),r=p.url.replace(kt,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(Dt,"+")):(h=p.url.slice(r.length),p.data&&(p.processData||"string"==typeof p.data)&&(r+=(At.test(r)?"&":"?")+p.data,delete p.data),!1===p.cache&&(r=r.replace(jt,"$1"),h=(At.test(r)?"&":"?")+"_="+Ct.guid+++h),p.url=r+h),p.ifModified&&(T.lastModified[r]&&E.setRequestHeader("If-Modified-Since",T.lastModified[r]),T.etag[r]&&E.setRequestHeader("If-None-Match",T.etag[r])),(p.data&&p.hasContent&&!1!==p.contentType||t.contentType)&&E.setRequestHeader("Content-Type",p.contentType),E.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Vt+"; q=0.01":""):p.accepts["*"]),p.headers)E.setRequestHeader(d,p.headers[d]);if(p.beforeSend&&(!1===p.beforeSend.call(f,E,p)||u))return E.abort();if(w="abort",v.add(p.complete),E.done(p.success),E.fail(p.error),i=Bt(Ft,p,t,E)){if(E.readyState=1,c&&m.trigger("ajaxSend",[E,p]),u)return E;p.async&&p.timeout>0&&(a=n.setTimeout((function(){E.abort("timeout")}),p.timeout));try{u=!1,i.send(x,C)}catch(e){if(u)throw e;C(-1,e)}}else C(-1,"No Transport");function C(e,t,o,l){var d,h,b,x,S,w=t;u||(u=!0,a&&n.clearTimeout(a),i=void 0,s=l||"",E.readyState=e>0?4:0,d=e>=200&&e<300||304===e,o&&(x=function(e,t,n){for(var i,r,s,o,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(r in a)if(a[r]&&a[r].test(i)){l.unshift(r);break}if(l[0]in n)s=l[0];else{for(r in n){if(!l[0]||e.converters[r+" "+l[0]]){s=r;break}o||(o=r)}s=s||o}if(s)return s!==l[0]&&l.unshift(s),n[s]}(p,E,o)),!d&&T.inArray("script",p.dataTypes)>-1&&(p.converters["text script"]=function(){}),x=function(e,t,n,i){var r,s,o,a,l,u={},c=e.dataTypes.slice();if(c[1])for(o in e.converters)u[o.toLowerCase()]=e.converters[o];for(s=c.shift();s;)if(e.responseFields[s]&&(n[e.responseFields[s]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=s,s=c.shift())if("*"===s)s=l;else if("*"!==l&&l!==s){if(!(o=u[l+" "+s]||u["* "+s]))for(r in u)if((a=r.split(" "))[1]===s&&(o=u[l+" "+a[0]]||u["* "+a[0]])){!0===o?o=u[r]:!0!==u[r]&&(s=a[0],c.unshift(a[1]));break}if(!0!==o)if(o&&e.throws)t=o(t);else try{t=o(t)}catch(e){return{state:"parsererror",error:o?e:"No conversion from "+l+" to "+s}}}return{state:"success",data:t}}(p,x,E,d),d?(p.ifModified&&((S=E.getResponseHeader("Last-Modified"))&&(T.lastModified[r]=S),(S=E.getResponseHeader("etag"))&&(T.etag[r]=S)),204===e||"HEAD"===p.type?w="nocontent":304===e?w="notmodified":(w=x.state,h=x.data,d=!(b=x.error))):(b=w,!e&&w||(w="error",e<0&&(e=0))),E.status=e,E.statusText=(t||w)+"",d?g.resolveWith(f,[h,w,E]):g.rejectWith(f,[E,w,b]),E.statusCode(y),y=void 0,c&&m.trigger(d?"ajaxSuccess":"ajaxError",[E,p,d?h:b]),v.fireWith(f,[E,w]),c&&(m.trigger("ajaxComplete",[E,p]),--T.active||T.event.trigger("ajaxStop")))}return E},getJSON:function(e,t,n){return T.get(e,t,n,"json")},getScript:function(e,t){return T.get(e,void 0,t,"script")}}),T.each(["get","post"],(function(e,t){T[t]=function(e,n,i,r){return v(n)&&(r=r||i,i=n,n=void 0),T.ajax(T.extend({url:e,type:t,dataType:r,data:n,success:i},T.isPlainObject(e)&&e))}})),T.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),T._evalUrl=function(e,t,n){return T.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){T.globalEval(e,t,n)}})},T.fn.extend({wrapAll:function(e){var t;return this[0]&&(v(e)&&(e=e.call(this[0])),t=T(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return v(e)?this.each((function(t){T(this).wrapInner(e.call(this,t))})):this.each((function(){var t=T(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=v(e);return this.each((function(n){T(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){T(this).replaceWith(this.childNodes)})),this}}),T.expr.pseudos.hidden=function(e){return!T.expr.pseudos.visible(e)},T.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},T.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var Ut={0:200,1223:204},Wt=T.ajaxSettings.xhr();g.cors=!!Wt&&"withCredentials"in Wt,g.ajax=Wt=!!Wt,T.ajaxTransport((function(e){var t,i;if(g.cors||Wt&&!e.crossDomain)return{send:function(r,s){var o,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(o in e.xhrFields)a[o]=e.xhrFields[o];for(o in e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest"),r)a.setRequestHeader(o,r[o]);t=function(e){return function(){t&&(t=i=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?s(0,"error"):s(a.status,a.statusText):s(Ut[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=t(),i=a.onerror=a.ontimeout=t("error"),void 0!==a.onabort?a.onabort=i:a.onreadystatechange=function(){4===a.readyState&&n.setTimeout((function(){t&&i()}))},t=t("abort");try{a.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),T.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),T.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return T.globalEval(e),e}}}),T.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),T.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(i,r){t=T("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&r("error"===e.type?404:200,e.type)}),b.head.appendChild(t[0])},abort:function(){n&&n()}}}));var Xt,Gt=[],Yt=/(=)\?(?=&|$)|\?\?/;T.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Gt.pop()||T.expando+"_"+Ct.guid++;return this[e]=!0,e}}),T.ajaxPrefilter("json jsonp",(function(e,t,i){var r,s,o,a=!1!==e.jsonp&&(Yt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Yt.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=v(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Yt,"$1"+r):!1!==e.jsonp&&(e.url+=(At.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return o||T.error(r+" was not called"),o[0]},e.dataTypes[0]="json",s=n[r],n[r]=function(){o=arguments},i.always((function(){void 0===s?T(n).removeProp(r):n[r]=s,e[r]&&(e.jsonpCallback=t.jsonpCallback,Gt.push(r)),o&&v(s)&&s(o[0]),o=s=void 0})),"script"})),g.createHTMLDocument=((Xt=b.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Xt.childNodes.length),T.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(g.createHTMLDocument?((i=(t=b.implementation.createHTMLDocument("")).createElement("base")).href=b.location.href,t.head.appendChild(i)):t=b),s=!n&&[],(r=H.exec(e))?[t.createElement(r[1])]:(r=we([e],t,s),s&&s.length&&T(s).remove(),T.merge([],r.childNodes)));var i,r,s},T.fn.load=function(e,t,n){var i,r,s,o=this,a=e.indexOf(" ");return a>-1&&(i=yt(e.slice(a)),e=e.slice(0,a)),v(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),o.length>0&&T.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done((function(e){s=arguments,o.html(i?T("<div>").append(T.parseHTML(e)).find(i):e)})).always(n&&function(e,t){o.each((function(){n.apply(this,s||[e.responseText,t,e])}))}),this},T.expr.pseudos.animated=function(e){return T.grep(T.timers,(function(t){return e===t.elem})).length},T.offset={setOffset:function(e,t,n){var i,r,s,o,a,l,u=T.css(e,"position"),c=T(e),d={};"static"===u&&(e.style.position="relative"),a=c.offset(),s=T.css(e,"top"),l=T.css(e,"left"),("absolute"===u||"fixed"===u)&&(s+l).indexOf("auto")>-1?(o=(i=c.position()).top,r=i.left):(o=parseFloat(s)||0,r=parseFloat(l)||0),v(t)&&(t=t.call(e,n,T.extend({},a))),null!=t.top&&(d.top=t.top-a.top+o),null!=t.left&&(d.left=t.left-a.left+r),"using"in t?t.using.call(e,d):("number"==typeof d.top&&(d.top+="px"),"number"==typeof d.left&&(d.left+="px"),c.css(d))}},T.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){T.offset.setOffset(this,e,t)}));var t,n,i=this[0];return i?i.getClientRects().length?(t=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,i=this[0],r={top:0,left:0};if("fixed"===T.css(i,"position"))t=i.getBoundingClientRect();else{for(t=this.offset(),n=i.ownerDocument,e=i.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===T.css(e,"position");)e=e.parentNode;e&&e!==i&&1===e.nodeType&&((r=T(e).offset()).top+=T.css(e,"borderTopWidth",!0),r.left+=T.css(e,"borderLeftWidth",!0))}return{top:t.top-r.top-T.css(i,"marginTop",!0),left:t.left-r.left-T.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===T.css(e,"position");)e=e.offsetParent;return e||se}))}}),T.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;T.fn[e]=function(i){return z(this,(function(e,i,r){var s;if(y(e)?s=e:9===e.nodeType&&(s=e.defaultView),void 0===r)return s?s[t]:e[i];s?s.scrollTo(n?s.pageXOffset:r,n?r:s.pageYOffset):e[i]=r}),e,i,arguments.length)}})),T.each(["top","left"],(function(e,t){T.cssHooks[t]=We(g.pixelPosition,(function(e,n){if(n)return n=Ue(e,t),$e.test(n)?T(e).position()[t]+"px":n}))})),T.each({Height:"height",Width:"width"},(function(e,t){T.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,i){T.fn[i]=function(r,s){var o=arguments.length&&(n||"boolean"!=typeof r),a=n||(!0===r||!0===s?"margin":"border");return z(this,(function(t,n,r){var s;return y(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(s=t.documentElement,Math.max(t.body["scroll"+e],s["scroll"+e],t.body["offset"+e],s["offset"+e],s["client"+e])):void 0===r?T.css(t,n,a):T.style(t,n,r,a)}),t,o?r:void 0,o)}}))})),T.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){T.fn[t]=function(e){return this.on(t,e)}})),T.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),T.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){T.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var Kt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;T.proxy=function(e,t){var n,i,r;if("string"==typeof t&&(n=e[t],t=e,e=n),v(e))return i=a.call(arguments,2),(r=function(){return e.apply(t||this,i.concat(a.call(arguments)))}).guid=e.guid=e.guid||T.guid++,r},T.holdReady=function(e){e?T.readyWait++:T.ready(!0)},T.isArray=Array.isArray,T.parseJSON=JSON.parse,T.nodeName=I,T.isFunction=v,T.isWindow=y,T.camelCase=G,T.type=w,T.now=Date.now,T.isNumeric=function(e){var t=T.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},T.trim=function(e){return null==e?"":(e+"").replace(Kt,"")},void 0===(i=function(){return T}.apply(t,[]))||(e.exports=i);var Jt=n.jQuery,Qt=n.$;return T.noConflict=function(e){return n.$===T&&(n.$=Qt),e&&n.jQuery===T&&(n.jQuery=Jt),T},void 0===r&&(n.jQuery=n.$=T),T}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RANGE_PAIR_START_KEY=t.RANGE_PAIR_END_KEY=t.RANGE_PAIR_OPTIONS=t.DEFAULT_SLIDER_PARAMS=t.DEFAULT_SLIDER_CLASS=void 0;t.DEFAULT_SLIDER_PARAMS={isVertical:!1,isTooltipsVisible:!0,isMarkupVisible:!1,min:0,max:10,step:1};t.DEFAULT_SLIDER_CLASS="liquid-slider";const i=(new Map).set(null,null).set("start",!1).set("end",!0);t.RANGE_PAIR_OPTIONS=i;t.RANGE_PAIR_START_KEY="start";t.RANGE_PAIR_END_KEY="end"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.ContentRect=function(e){if("getBBox"in e){var t=e.getBBox();return Object.freeze({height:t.height,left:0,top:0,width:t.width})}var n=window.getComputedStyle(e);return Object.freeze({height:parseFloat(n.height||"0"),left:parseFloat(n.paddingLeft||"0"),top:parseFloat(n.paddingTop||"0"),width:parseFloat(n.width||"0")})}},function(e,t,n){},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});class n{constructor(e){this.initElements(e),this.initProperties()}addOnChange(t){e(this.input).on("change.panelProperty",t)}setValue(e){switch(typeof e){case"string":this.input.value=e;break;case"boolean":this.input.checked=e;break;case"number":this.input.value=e.toFixed(2)}}getValue(){return this.isCheckbox?this.input.checked:this.input.value}initElements(e){this.body=e,this.caption=this.body.querySelector(`.js-${n.DEFAULT_CLASS}__caption`),this.input=this.body.querySelector(`.js-${n.DEFAULT_CLASS}__input`)}initProperties(){this.isCheckbox="checkbox"===this.input.type}}n.DEFAULT_CLASS="panel-property",t.default=n}).call(this,n(1))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(7),n(20),n(21);const i=n(22);var r;(r=n(34)).keys().forEach(r);i.default().forEach(e=>{e.initSlider()})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(1),r=n(2),s=n(8);i.fn.liquidSlider=function e(t={},...n){const o=this.get().map(o=>{if("object"==typeof t){const e=i(o).data(),n=Object.assign(Object.assign(Object.assign({},r.DEFAULT_SLIDER_PARAMS),e),t),a=new s.default(o,n);return this.data("controller",a),this}const a=this.data("controller");if(!a)throw new Error("Need to init slider before call functions.");switch(t){case"remove":this.liquidSlider=e,this.html(a.originalHTML),this.data("controller",null);break;default:if(!a[t])throw new Error(t+" not found in slider");if("function"!=typeof a[t])throw new Error(t+" is not a function of slider");return a[t](...n)}return null});return 1===o.length?o[0]:o}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(9),r=n(18),s=n(0);t.default=class{constructor(e,t){this.element=e,this.parameters=t,this.removeHandlerInView=e=>{this.view.removeHandler(e)},this.passHandlerPositionChange=e=>{this.model.handleHandlerPositionChanged(e)},this.passHandlerValueChange=e=>{this.view.handlerValueChangedListener(e)},this.model=new r.default(t),this.view=new i.default(e,this.model.getSliderData()),this.originalHTML=e.innerHTML,this.addDefaultListeners(),this.passPositioningData(),this.passHandlersData(this.view,null==t?void 0:t.handlers)}addAfterHandlerValueChangedListener(e){s.addListenerAfter("handleHandlerValueChanged",e,this.model)}addAfterRemoveHandlerListener(e){s.addListenerAfter("removeHandler",e,this.model)}removeHandler(e){this.model.removeHandler(e)}moveHandler(e,t){this.passHandlerPositionChange({handlerIndex:e,positionPart:t})}setHandlerItem(e,t){this.model.setHandlerItem(e,t)}update(e){this.model.setSliderParams(e),this.view.updateVisuals(this.model.getSliderData()),this.view.updatePositioning(this.model.getPositioningData())}getSliderData(){return this.model.getSliderData()}getHandlersData(e){const t=this.model.getHandlersData();return(null==e?void 0:e.length)>0&&t.handlersArray.forEach((n,i)=>{t.handlersArray[i]=Object.assign(Object.assign({},e[i]),n)}),t}addHandler(e,t){const n=this.model.addHandler(e);return n?(this.addHandlerView(Object.assign(Object.assign({},n),{rangePair:t})),n):null}addDefaultListeners(){s.addListenerAfter("handleHandlerValueChanged",this.passHandlerValueChange,this.model),s.addListenerAfter("removeHandler",this.removeHandlerInView,this.model),s.addListenerAfter("handleHandlerPositionChanged",this.passHandlerPositionChange,this.view)}passPositioningData(){this.view.updatePositioning(this.model.getPositioningData())}passHandlersData(e,t){const n=this.getHandlersData(t);e.initHandlers(n)}addHandlerView(e){this.view.addHandler(e)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(10);t.default=class{constructor(e,t){this.element=e,this.slider=new i.default(this,t)}getBody(){return this.element}handleHandlerPositionChanged(e,t){return{view:this,handlerIndex:e,positionPart:t}}handlerValueChangedListener(e){this.slider.setHandlersData([e])}initHandlers(e){this.slider.initHandlers(e),this.slider.createRanges()}updateVisuals(e){this.slider.update(e)}updatePositioning(e){this.slider.update(e)}addHandler(e){this.slider.addHandler(e)}removeHandler(e){this.slider.removeHandler(e)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(11),r=n(2),s=n(0),o=n(14),a=n(16),l=n(17);t.default=class{constructor(e,t){this.parentView=e,this.isRangesInverted=!1,this.handlerSize=0,this.handlers=[],this.ranges=[],this.handleWindowMouseOut=e=>{const{target:t}=e;s.hasOwnProperty(t,"nodeName")&&"HTML"===t.nodeName&&document.body.removeEventListener("mousemove",this.handleMouseMove)},this.handleMouseMove=e=>{const t=this.getClosestToMouseHandler(e.clientX,e.clientY);if(t!==this.activeHandler)return;this.activateHandler(t);const n=this.calculateMouseRelativePos(e);let i;const r=1%this.stepPart,o=1-r;i=n>o&&0!==r?s.standardize(n,{min:o,max:1,step:r}):s.standardize(n,{min:0,max:o,step:this.stepPart}),i!==s.roundToDecimal(t.getPositionPart(),4)&&this.parentView.handleHandlerPositionChanged(t.getIndex(),i)},this.initProperties(t),this.createElements(),this.setMouseEvents(),this.setResizeObserver()}setRangesInversion(e){this.isRangesInverted=e}getBodyElement(){return this.elements.body}getHandlersContainer(){return this.elements.handlers}getScaleStart(){return this.isVertical?this.elements.scale.getBoundingClientRect().top:this.elements.scale.getBoundingClientRect().left}getScaleEnd(){return this.isVertical?this.elements.scale.getBoundingClientRect().bottom:this.elements.scale.getBoundingClientRect().right}getScaleBorderWidth(){return Number.parseFloat(getComputedStyle(this.elements.scale).getPropertyValue(`border-${this.getOffsetDirection()}-width`))}calculateShrinkRatio(){return this.getWorkZoneLength()/this.getScaleLength()}getIsVertical(){return this.isVertical}getOffsetDirection(){return this.isVertical?"top":"left"}getExpandDimension(){return this.isVertical?"height":"width"}getScaleLength(){return this.elements.scale.getBoundingClientRect()[this.getExpandDimension()]}setOrientation(e){if(null==e)return;const t=this.getOrientationClass();this.isVertical=e;const n=this.getOrientationClass();this.elements.wrap.classList.remove(t),this.elements.wrap.classList.add(n)}getIsTooltipsAlwaysVisible(){return this.isTooltipsAlwaysVisible}setTooltipsVisibility(e){null!=e&&(this.isTooltipsAlwaysVisible=e,this.handlers.forEach(t=>{t.setTooltipVisibility(e)}))}getOrientationClass(){return this.isVertical?r.DEFAULT_SLIDER_CLASS+"_vertical":r.DEFAULT_SLIDER_CLASS+"_horizontal"}calculateMouseRelativePos(e){const t=this.isVertical?e.clientY:e.clientX,n=this.handlerSize/2,i=(t-this.getScaleStart()-n)/this.calculateShrinkRatio();return s.clamp(i/this.getScaleLength(),0,1)}clearRanges(){this.ranges.forEach(e=>{e.remove()}),this.ranges=[]}createRanges(){this.clearRanges(),this.handlers.forEach(e=>{const t=this.createRange(e);t&&this.ranges.push(t)})}initHandlers(e){this.clearHandlers(),this.handlers=e.handlersArray.map((t,n,i)=>{const s=new o.default(this,Object.assign(Object.assign({},t),{isTooltipVisible:this.isTooltipsAlwaysVisible}));return e.isCustomHandlers||(2===i.length?(0===n&&s.setRangePair(this.isRangesInverted?r.RANGE_PAIR_START_KEY:1),1===n&&s.setRangePair(this.isRangesInverted?r.RANGE_PAIR_END_KEY:0)):s.setRangePair(this.isRangesInverted?r.RANGE_PAIR_END_KEY:r.RANGE_PAIR_START_KEY)),s}),this.setHandlerSize(),this.initMarkup(),this.createRanges()}addHandler(e){const t=new o.default(this,Object.assign(Object.assign({},e),{isTooltipVisible:this.isTooltipsAlwaysVisible}));this.handlers.push(t);const n=this.createRange(t);n&&this.ranges.push(n)}removeHandler(e){const t=this.handlers.findIndex(t=>t.getIndex()===e),n=this.handlers[t];this.ranges.filter(e=>e.hasHandler(n)).forEach(e=>{const t=this.ranges.indexOf(e);e.remove(),this.ranges.splice(t,1)}),n.remove(),this.handlers.splice(t,1)}getWorkZoneLength(){const{handlerSize:e}=this;return this.getScaleLength()-e}calculateHandlerOffset(e){return this.getWorkZoneLength()*e}calculateRelativeHandlerSize(){return this.handlerSize/this.getWorkZoneLength()}setHandlersData(e){e.some(e=>null===e)||e.forEach(({handlerIndex:e,item:t,positionPart:n})=>{const i=this.handlers.findIndex(t=>t.getIndex()===e);-1!==i&&(this.handlers[i].setItem(t),this.handlers[i].setPosition(n))})}update({min:e,max:t,stepPart:n,isVertical:i,isTooltipsVisible:r,isMarkupVisible:s}={}){Number.isFinite(n)&&(this.stepPart=n),Number.isFinite(e)&&(this.min=e),Number.isFinite(t)&&(this.max=t),this.isMarkupVisible=null!=s?s:this.isMarkupVisible,this.setTooltipsVisibility(r),this.setOrientation(i),this.refreshElements()}initProperties({isVertical:e,isInverted:t,isTooltipsVisible:n,isMarkupVisible:i}={}){this.isVertical=e,this.isRangesInverted=null!=t?t:this.isRangesInverted,void 0!==n&&this.setTooltipsVisibility(n),void 0!==i&&(this.isMarkupVisible=i)}setHandlerSize(){const e=this.handlers[0];this.handlerSize=e.getSize()}createElements(){const e=this.parentView.getBody();this.elements={wrap:document.createElement("div"),body:document.createElement("div"),scale:document.createElement("div"),handlers:document.createElement("div"),min:document.createElement("span"),max:document.createElement("span")};const{wrap:t}=this.elements;t.classList.add(r.DEFAULT_SLIDER_CLASS),e.append(t),Object.keys(this.elements).forEach(e=>{if("wrap"===e)return;this.elements[e].classList.add(`${r.DEFAULT_SLIDER_CLASS}__${e}`)}),this.elements.body.addEventListener("mousedown",s.preventDefault),t.append(this.elements.body),t.append(this.elements.min),t.append(this.elements.max),this.elements.body.append(this.elements.scale),this.elements.body.append(this.elements.handlers),this.setOrientation(this.isVertical)}setMouseEvents(){document.body.addEventListener("mousedown",this.handleDocumentMouseDown.bind(this)),this.elements.body.addEventListener("mousedown",this.handleMouseDown.bind(this)),document.body.addEventListener("mouseup",this.handleMouseUp.bind(this))}setResizeObserver(){this.resizeObserver=new i.ResizeObserver(this.refreshElements.bind(this)),this.resizeObserver.observe(this.elements.body)}handleDocumentMouseDown(e){if(!(e.target instanceof HTMLElement))return;const{target:t}=e;this.elements.wrap.contains(t)||this.deactivateActiveHandler()}handleMouseUp(){document.body.removeEventListener("mousemove",this.handleMouseMove),document.body.removeEventListener("mouseout",this.handleWindowMouseOut)}handleMouseDown(e){const t=this.getClosestToMouseHandler(e.clientX,e.clientY);t&&(this.activateHandler(t),this.activeHandler.getBody().focus(),this.handleMouseMove(e),document.body.addEventListener("mousemove",this.handleMouseMove),window.addEventListener("mouseout",this.handleWindowMouseOut))}deactivateActiveHandler(){this.activateHandler(null)}activateHandler(e){this.activeHandler&&this.activeHandler.setTooltipVisibility(this.isTooltipsAlwaysVisible),this.activeHandler=e,e&&e.setTooltipVisibility(!0)}getClosestToMouseHandler(e,t){return this.isVertical?this.findClosestHandler(t):this.findClosestHandler(e)}findClosestHandler(e){let t=Number.MAX_VALUE,n=null;return this.handlers.forEach(i=>{const r=Math.abs(i.getPositionCoordinate()-e);t>r&&(n=i,t=r)}),n}findSuitableHandler(e){return this.handlers.find(t=>t.getIndex()===e.getRangePair())}createRange(e){if(null===e.getRangePair())return null;const t=this.findSuitableHandler(e),n=e.getRangePair()===r.RANGE_PAIR_START_KEY,i=e.getRangePair()===r.RANGE_PAIR_END_KEY;return!n&&!i&&!t?null:new a.default(this,this.elements.scale,e,t)}initMarkup(){this.markup=new l.default(this),this.updateMarkup()}clearMarkup(){this.markup&&this.markup.clearAllMarks()}updateMarkup(){this.clearMarkup(),this.isMarkupVisible&&requestAnimationFrame(()=>{for(let e=0;e<=1;e=s.roundToDecimal(e+this.stepPart,5)){const t=s.standardize(e,{min:0,max:1,step:this.stepPart})*this.calculateShrinkRatio();this.markup.addMark(t,this.calculateRelativeHandlerSize())}})}clearHandlers(){this.clearRanges(),this.elements.handlers.innerHTML="",this.handlers=[]}refreshElements(){var e,t;this.updateMarkup(),this.handlers.forEach(e=>{e.refreshPosition()}),this.ranges.forEach(e=>{e.refreshPosition()}),this.elements.min.innerText=null===(e=this.min)||void 0===e?void 0:e.toFixed(2),this.elements.max.innerText=null===(t=this.max)||void 0===t?void 0:t.toFixed(2)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(12),r=n(13),s=[],o=function(){function e(e){this.$$observationTargets=[],this.$$activeTargets=[],this.$$skippedTargets=[];var t=function(e){if(void 0===e)return"Failed to construct 'ResizeObserver': 1 argument required, but only 0 present.";if("function"!=typeof e)return"Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function."}(e);if(t)throw TypeError(t);this.$$callback=e,s.push(this)}return e.prototype.observe=function(e){var t=a("observe",e);if(t)throw TypeError(t);l(this.$$observationTargets,e)>0||(this.$$observationTargets.push(new i.ResizeObservation(e)),f())},e.prototype.unobserve=function(e){var t=a("unobserve",e);if(t)throw TypeError(t);var n=l(this.$$observationTargets,e);n<0||(this.$$observationTargets.splice(n,1),g())},e.prototype.disconnect=function(){this.$$observationTargets=[],this.$$activeTargets=[]},e}();function a(e,t){return void 0===t?"Failed to execute '"+e+"' on 'ResizeObserver': 1 argument required, but only 0 present.":t instanceof window.Element?void 0:"Failed to execute '"+e+"' on 'ResizeObserver': parameter 1 is not of type 'Element'."}function l(e,t){for(var n=0;n<e.length;n+=1)if(e[n].target===t)return n;return-1}t.ResizeObserver=o;var u,c=function(e){s.forEach((function(t){t.$$activeTargets=[],t.$$skippedTargets=[],t.$$observationTargets.forEach((function(n){n.isActive()&&(h(n.target)>e?t.$$activeTargets.push(n):t.$$skippedTargets.push(n))}))}))},d=function(){var e=1/0;return s.forEach((function(t){if(t.$$activeTargets.length){var n=[];t.$$activeTargets.forEach((function(t){var i=new r.ResizeObserverEntry(t.target);n.push(i),t.$$broadcastWidth=i.contentRect.width,t.$$broadcastHeight=i.contentRect.height;var s=h(t.target);s<e&&(e=s)})),t.$$callback(n,t),t.$$activeTargets=[]}})),e},h=function(e){for(var t=0;e.parentNode;)e=e.parentNode,t+=1;return t},p=function(){var e,t=0;for(c(t);s.some((function(e){return!!e.$$activeTargets.length}));)t=d(),c(t);s.some((function(e){return!!e.$$skippedTargets.length}))&&(e=new window.ErrorEvent("ResizeLoopError",{message:"ResizeObserver loop completed with undelivered notifications."}),window.dispatchEvent(e))},f=function(){u||m()},m=function(){u=window.requestAnimationFrame((function(){p(),m()}))},g=function(){u&&!s.some((function(e){return!!e.$$observationTargets.length}))&&(window.cancelAnimationFrame(u),u=void 0)};t.install=function(){return window.ResizeObserver=o}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(3),r=function(){function e(e){this.target=e,this.$$broadcastWidth=this.$$broadcastHeight=0}return Object.defineProperty(e.prototype,"broadcastWidth",{get:function(){return this.$$broadcastWidth},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"broadcastHeight",{get:function(){return this.$$broadcastHeight},enumerable:!0,configurable:!0}),e.prototype.isActive=function(){var e=i.ContentRect(this.target);return!!e&&(e.width!==this.broadcastWidth||e.height!==this.broadcastHeight)},e}();t.ResizeObservation=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(3),r=function(e){this.target=e,this.contentRect=i.ContentRect(e)};t.ResizeObserverEntry=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(2),r=n(0),s=n(15);class o{constructor(e,t){var n;this.ownerSlider=e,this.additionalClasses=[],this.initProperties(t),this.createElement(e.getHandlersContainer()),this.index=t.handlerIndex,this.tooltip=new s.default(this.element.wrap,this,{isVisible:null===(n=t.isTooltipVisible)||void 0===n||n,item:t.item}),this.setItem(t.item),requestAnimationFrame(this.refreshPosition.bind(this))}getOwnerSlider(){return this.ownerSlider}getPositionCoordinate(){const e=r.calculateElementCenter(this.element.body);return this.ownerSlider.getIsVertical()?e.y:e.x}getElement(){return this.element}getRangePair(){return this.rangePair}setRangePair(e){this.rangePair=e}getIndex(){return this.index}getPositionPart(){return this.positionPart}getBody(){return this.element.body}getSize(e){const t=null!=e?e:this.ownerSlider.getExpandDimension();return this.element.body.getBoundingClientRect()[t]}getItem(){return this.tooltip.getItem()}setItem(e){this.tooltip.setItem(e)}getTooltipElement(){return this.tooltip.getElement()}refreshPosition(){const e=this.calculateOffset(),t=this.ownerSlider.getOffsetDirection();this.element.wrap.style.removeProperty("left"),this.element.wrap.style.removeProperty("top"),this.element.wrap.style[t]=e+"px",this.tooltip.updateHTML()}setPosition(e){this.positionPart=e,this.refreshPosition()}setTooltipVisibility(e){this.tooltip.setVisibility(e)}remove(){this.element.wrap.remove()}initProperties({rangePair:e,positionPart:t}){this.rangePair=null!=e?e:null,this.positionPart=t}createElement(e){const t=document.createElement("div"),n=document.createElement("div");this.element={wrap:t,body:n},this.element.body.setAttribute("tabindex","-1"),t.classList.add(o.DEFAULT_CLASS+"-container"),t.classList.add(...this.additionalClasses),e.appendChild(t),n.classList.add(o.DEFAULT_CLASS+"-body"),t.appendChild(n)}calculateOffset(){const e=this.ownerSlider.calculateHandlerOffset(this.positionPart),t=this.getSize(),n=this.tooltip.getSize();return e-.5*Math.max(0,n-t)}}o.DEFAULT_CLASS=i.DEFAULT_SLIDER_CLASS+"__handler",t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(2);class r{constructor(e,t,n){this.ownerHandler=t,this.innerHTML="",this.createElement(e),this.initProperties(n)}getSize(e){const t=null!=e?e:this.ownerHandler.getOwnerSlider().getExpandDimension();return this.element.getBoundingClientRect()[t]}getItem(){return this.item}getElement(){return this.element}setItem(e){this.item=e,this.updateHTML()}updateHTML(){this.innerHTML=""+this.item,this.element.innerHTML=this.innerHTML}setVisibility(e){e?this.show():this.hide()}initProperties(e){var t;const n=Object.assign(Object.assign({},r.DEFAULT_PARAMETERS),e);this.setItem(n.item),this.setVisibility(null===(t=n.isVisible)||void 0===t||t)}show(){this.element.classList.add(r.DEFAULT_VISIBLE_CLASS),this.element.classList.remove(r.DEFAULT_HIDDEN_CLASS)}hide(){this.element.classList.add(r.DEFAULT_HIDDEN_CLASS),this.element.classList.remove(r.DEFAULT_VISIBLE_CLASS)}createElement(e){this.element=document.createElement("div"),this.element.classList.add(""+r.DEFAULT_CLASS),this.element.innerHTML=this.innerHTML,e.appendChild(this.element)}}r.DEFAULT_CLASS=i.DEFAULT_SLIDER_CLASS+"__handler-tooltip",r.DEFAULT_VISIBLE_CLASS=r.DEFAULT_CLASS+"_visible",r.DEFAULT_HIDDEN_CLASS=r.DEFAULT_CLASS+"_hidden",r.DEFAULT_PARAMETERS={bodyHTML:"",withTooltip:!0,isEnd:!0},t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(2),r=n(0);class s{constructor(e,t,n,i){this.parentSlider=e,this.parentElement=t,this.refreshPosition=()=>{const{parentSlider:e}=this,t=this.startHandler?this.startHandler.getPositionCoordinate()-e.getScaleStart():e.getScaleBorderWidth(),n=Math.abs(e.getScaleStart()-e.getScaleEnd()),i=this.endHandler?this.endHandler.getPositionCoordinate()-e.getScaleStart():n-e.getScaleBorderWidth(),r=Math.min(t,i),s=r,o=Math.max(t,i)-r;this.clearPositionStyles(),this.element.style[e.getOffsetDirection()]=s+"px",this.element.style[e.getExpandDimension()]=o+"px"},this.initHandlers(n,i),this.createElement(),this.addHandlersRefreshListener(),requestAnimationFrame(this.refreshPosition)}getStartHandler(){return this.startHandler}getEndHandler(){return this.endHandler}hasHandler(e){return e===this.startHandler||e===this.endHandler}remove(){r.removeListener("refreshPosition",this.refreshPosition,this.startHandler),r.removeListener("refreshPosition",this.refreshPosition,this.endHandler),this.element.remove()}addHandlersRefreshListener(){this.startHandler&&r.addListenerAfter("refreshPosition",this.refreshPosition,this.startHandler),this.endHandler&&r.addListenerAfter("refreshPosition",this.refreshPosition,this.endHandler)}initHandlers(e,t){t?this.arrangeHandlers(e,t):(this.startHandler=i.RANGE_PAIR_OPTIONS.get(e.getRangePair())?e:null,this.endHandler=i.RANGE_PAIR_OPTIONS.get(e.getRangePair())?null:e)}clearPositionStyles(){this.element.style.removeProperty("left"),this.element.style.removeProperty("top"),this.element.style.removeProperty("width"),this.element.style.removeProperty("height")}createElement(){const e=document.createElement("div");this.element=e,e.classList.add(""+s.DEFAULT_CLASS),this.parentElement.appendChild(e)}arrangeHandlers(e,t){e.getPositionPart()<=t.getPositionPart()?(this.startHandler=e,this.endHandler=t):(this.startHandler=t,this.endHandler=e)}}s.DEFAULT_CLASS=i.DEFAULT_SLIDER_CLASS+"__range",t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(2);class r{constructor(e){this.ownerSlider=e,this.marks=[],this.createWrap()}getWrap(){return this.wrap}clearAllMarks(){this.marks=[],this.wrap.innerHTML=""}addMark(e,t){const n=this.createMarkHTML();this.marks.push(n);const i=this.calculateMarkOffset(e,t),r=this.ownerSlider.getOffsetDirection();n.style[r]=i+"%"}getMarkThickness(){const e=this.ownerSlider.getExpandDimension();return this.marks[0].getBoundingClientRect()[e]}getRelativeMarkThickness(){const e=this.ownerSlider.calculateShrinkRatio()*(this.getMarkThickness()/this.ownerSlider.getScaleLength());return this.ownerSlider.getScaleLength()?e:0}createWrap(){this.wrap=document.createElement("div"),this.wrap.classList.add(r.DEFAULT_CLASS+"-wrap"),this.ownerSlider.getBodyElement().insertBefore(this.wrap,this.ownerSlider.getHandlersContainer())}createMarkHTML(){const e=document.createElement("div");return e.classList.add(r.DEFAULT_CLASS),this.wrap.appendChild(e),e}calculateMarkOffset(e,t){const n=this.getRelativeMarkThickness()/2;return Number((100*(e+t/2-n)).toFixed(4))}}r.DEFAULT_CLASS=i.DEFAULT_SLIDER_CLASS+"__markup",t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),r=n(19);t.default=class{constructor({isRange:e,min:t,max:n,step:i,items:r,values:s,handlers:o,isTooltipsVisible:a,isMarkupVisible:l,isVertical:u,isInverted:c}={}){this.occupiedItems={},this.handlers=[],this.setSliderParams({min:t,max:n,step:i,isMarkupVisible:l,isTooltipsVisible:a,isVertical:u,isInverted:c}),this.setItems(r),this.initHandlers(e,s,o)}setSliderParams({min:e,max:t,step:n,isVertical:i=this.isVertical,isTooltipsVisible:r=this.isTooltipsVisible,isMarkupVisible:s=this.isMarkupVisible,isInverted:o=this.isInverted}){this.setMinMax(e,t),this.setStep(n),this.isVertical=i,this.isTooltipsVisible=r,this.isMarkupVisible=s,this.isInverted=o}getSliderData(){return{min:this.min,max:this.max,step:this.step,range:this.getRange(),isTooltipsVisible:this.isTooltipsVisible,isVertical:this.isVertical,isMarkupVisible:this.isMarkupVisible}}getHandlersData(){return{isCustomHandlers:this.isHandlersCustom,handlersArray:this.handlers.map(e=>({handlerIndex:e.handlerIndex,item:e.getItem(),positionPart:e.getPosition(),itemIndex:e.getItemIndex()}))}}getPositioningData(){return{stepPart:this.step/this.getRange(),min:this.min,max:this.max}}addHandler(e){const t=this.handlers.map(e=>e.handlerIndex),n=Math.max(-1,...t)+1,i=this.createHandler(e,n);return i?(this.handlers.push(i),i.handlerIndex=n,this.isHandlersCustom=!0,{positionPart:i.getPosition(),item:i.getItem(),handlerIndex:i.handlerIndex,itemIndex:i.getItemIndex()}):null}removeHandler(e){const t=this.handlers.findIndex(t=>t.handlerIndex===e);return t<0?null:(this.releaseItem(this.handlers[t].getItemIndex()),this.handlers.splice(t,1),e)}getItem(e){var t;return(null===(t=this.items)||void 0===t?void 0:t.length)?this.items[e]:e}getRange(){return this.max-this.min}setItems(e){(null==e?void 0:e.length)?(this.items=e,this.isItemsCustom=!0,this.initItemsMinMax(e.length)):(this.items=null,this.isItemsCustom=!1)}handleHandlerValueChanged(e){return-1===this.handlers.findIndex(t=>t.handlerIndex===e.handlerIndex)?null:{handlerIndex:e.handlerIndex,positionPart:e.getPosition(),item:e.getItem(),itemIndex:e.getItemIndex()}}handleHandlerPositionChanged(e){const t=this.getItemIndexFromPosition(e.positionPart),n=this.handlers.findIndex(t=>t.handlerIndex===e.handlerIndex);this.handlers[n].setItemIndex(t)}setHandlerItem(e,t){const n=this.getItemIndex(t);let r;this.isItemOccupied(n)||(r=i.standardize(n,this.getStandardizeParams())),Number.isNaN(r)||this.handlers[e].setItemIndex(r)}isItemOccupied(e){return!(void 0===this.occupiedItems[e])}occupyItem(e,t){this.occupiedItems[e]=t}releaseItem(e){delete this.occupiedItems[e]}initHandlers(e,t,n){if(null==n?void 0:n.length)this.isHandlersCustom=!0,this.createHandlers(n);else{const n=e?2:1;this.isHandlersCustom=!1,this.initDefaultHandlers(n,t)}}updateHandlersPosition(){this.handlers.forEach(e=>{const t=i.standardize(e.getItemIndex(),this.getStandardizeParams());if(t===e.getItemIndex())return void e.setItemIndex(i.standardize(t,this.getStandardizeParams()));const n=this.getFirstFreeItemIndex(e.getItemIndex());null===n&&this.removeHandler(e.handlerIndex),e.setItemIndex(i.standardize(n,this.getStandardizeParams()))})}initDefaultHandlers(e,t){this.handlers=[];const n=this.getRange()/(e+1),r=[];for(let s=0;s<e;s+=1)Number.isFinite(null==t?void 0:t[s])?r.push({itemIndex:i.standardize(t[s],this.getStandardizeParams())}):r.push({itemIndex:i.standardize(this.min+(s+1)*n,this.getStandardizeParams())});this.createHandlers(r)}setStep(e){e&&(this.step=this.isItemsCustom?Math.round(e):e,this.updateHandlersPosition())}setMin(e){null!=e&&(e>this.max||(this.min=e,this.updateHandlersPosition()))}setMax(e){null!=e&&(e<this.min||(this.max=e,this.updateHandlersPosition()))}setMinMax(e,t){if(Number.isFinite(e)&&Number.isFinite(t)){if(e>t)return;this.min=e,this.max=t}else this.setMin(e),this.setMax(t)}getStandardizeParams(){return{min:this.min,max:this.max,step:this.step}}initItemsMinMax(e){this.min=0,this.max=e-1}createHandlers(e){if(!(null==e?void 0:e.length))return;this.occupiedItems=[],this.handlers=[];this.handlers=e.reduce((e,t)=>{const n=i.standardize(t.itemIndex,this.getStandardizeParams()),r=this.createHandler(n,e.length);return null!==r&&e.push(r),e},[])}createHandler(e,t){const n=this.getFirstFreeItemIndex(e);if(null===n)return null;const i=this.getItem(n);return new r.default(i,n,this,t)}getItemIndexFromPosition(e){return 1===e?this.max:i.standardize(this.min+e*this.getRange(),this.getStandardizeParams())}getFirstFreeItemIndex(e){var t;let n;const r=null!==(t=i.standardize(e,this.getStandardizeParams()))&&void 0!==t?t:this.min;return n=this.findFirstFreeItemIndex(r,this.max),null===n&&(n=this.findFirstFreeItemIndex(this.min,r)),n}findFirstFreeItemIndex(e,t){let n=null;for(let r=i.standardize(e,this.getStandardizeParams());r<=i.standardize(t,this.getStandardizeParams());r+=this.step)if(!this.isItemOccupied(r)){n=r;break}return n}getItemIndex(e){if(this.isItemsCustom)return this.items.findIndex(t=>t.toString()===e.toString());const t=Number.parseFloat(e.toString());return Number.isNaN(t)?null:t}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0);t.default=class{constructor(e,t,n,i){this.item=e,this.itemIndex=t,this.parentModel=n,this.handlerIndex=i,this.setItemIndex(t)}getItem(){return this.item}getItemIndex(){return this.itemIndex}getPosition(){return this.position}setItemIndex(e){const t=this.itemIndex;this.parentModel.isItemOccupied(e)?this.updatePosition():(this.itemIndex=e,this.item=this.parentModel.getItem(this.itemIndex),this.updatePosition(),this.parentModel.releaseItem(t),this.parentModel.occupyItem(e,this.handlerIndex))}calculatePosition(){const e=this.parentModel.getSliderData(),t=(this.itemIndex-e.min)/e.range;return i.clamp(t,0,1)}updatePosition(){this.position=this.calculatePosition(),this.parentModel.handleHandlerValueChanged(this)}}},function(e,t,n){},function(e,t,n){},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(23),r=n(0);t.default=function(e){return r.initBlocks(e,".js-"+i.default.DEFAULT_CLASS,i.default)}},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0}),n(4);const i=n(24),r=n(26),s=n(31),o=n(32);class a{constructor(e){this.parentElement=e,this.handlers=[],this.handleCreateHandlerButtonClick=()=>{const e=this.handlerCreationSection.getItemIndex();if(Number.isNaN(e))return;const t=this.handlerCreationSection.getSelectedPairOption(),n=this.slider.callPluginFunction("addHandler",e,t);this.addHandler(n)},this.handleHandlerValueChange=e=>{var t;const n=this.handlers.find(t=>t.getIndex()===(null==e?void 0:e.handlerIndex));n&&(n.setItem(null===(t=e.item)||void 0===t?void 0:t.toString()),n.setRelativePosition(e.positionPart),n.updateElements())},this.handleHandlerInputPositionChange=(e,t)=>{let n;t.target instanceof HTMLInputElement&&(n=t.target);const i=Number.parseFloat(n.value);Number.isNaN(i)||this.slider.callPluginFunction("moveHandler",e,i)},this.handleHandlerInputItemChange=(e,t)=>{let n;t.target instanceof HTMLInputElement&&(n=t.target);const i=n.value;this.slider.callPluginFunction("setHandlerItem",e,i)},this.handleRemoveHandler=e=>{this.removeHandlerFromPanel(e)},this.initElements(e),this.initProperties(),[this.handlerCreationSection]=i.default(this.elements.createHandlerSection),this.initEventHandlers()}initSlider(t){const n=e(this.elements.wrap).find(`.js-${a.DEFAULT_CLASS}__slider`),[i]=o.default(n,t);this.slider=i,this.slider.callPluginFunction("addAfterHandlerValueChangedListener",this.handleHandlerValueChange),this.slider.callPluginFunction("addAfterRemoveHandlerListener",this.handleRemoveHandler);const r=this.slider.callPluginFunction("getHandlersData");this.initHandlers(r);const s=this.slider.callPluginFunction("getSliderData");this.updateVisuals(s),this.updateSliderData(this.slider.callPluginFunction("getSliderData"))}addHandler({handlerIndex:e,positionPart:t,item:n}){const i=r.default(this.elements.handlersSection,e,t,n.toString());i.addOnRemoveButtonClick(()=>{this.slider.callPluginFunction("removeHandler",e)}),i.addOnPositionInputChange(t=>{this.handleHandlerInputPositionChange(e,t)}),i.addOnItemInputChange(t=>{this.handleHandlerInputItemChange(e,t)}),this.handlers.push(i),this.handlerCreationSection.addPairOption(e)}removeHandlerFromPanel(e){const t=this.handlers.findIndex(t=>t.getIndex()===e);this.handlers[t].remove(),this.handlers.splice(t,1),this.handlerCreationSection.removePairOption(e)}initHandlers(e){e.handlersArray.forEach(e=>{this.addHandler(e)})}updateSliderData({step:e,min:t,max:n}){this.panelProperties.max.setValue(n),this.panelProperties.min.setValue(t),this.panelProperties.step.setValue(e)}updateVisuals({isVertical:e=this.isVertical,isMarkupVisible:t=this.isMarkupVisible,isTooltipsVisible:n=this.isTooltipsVisible}){this.isVertical=e,this.updateOrientation(),this.isMarkupVisible=t,this.updateMarkupVisibility(),this.isTooltipsVisible=n,this.updateTooltipVisibility()}initEventHandlers(){this.handlerCreationSection.addOnCreateHandlerButtonClick(this.handleCreateHandlerButtonClick)}initElements(t){const n=e(t);this.elements={wrap:n[0],body:n.find(`.js-${a.DEFAULT_CLASS}__body`)[0],createHandlerSection:n.find(`.js-${a.DEFAULT_CLASS}__create-handler`)[0],handlersSection:n.find(`.js-${a.DEFAULT_CLASS}__handlers`)[0]}}initProperties(){this.panelProperties={min:this.initProperty(`.js-${a.DEFAULT_CLASS}__min`,this.makePropInputChangeHandler("min")),max:this.initProperty(`.js-${a.DEFAULT_CLASS}__max`,this.makePropInputChangeHandler("max")),step:this.initProperty(`.js-${a.DEFAULT_CLASS}__step`,this.makePropInputChangeHandler("step")),orientation:this.initProperty(`.js-${a.DEFAULT_CLASS}__orientation`,this.makePropInputChangeHandler("orientation","isVertical")),tooltipsVisibility:this.initProperty(`.js-${a.DEFAULT_CLASS}__tooltips-visibility`,this.makePropInputChangeHandler("tooltipsVisibility","isTooltipsVisible")),markupVisibility:this.initProperty(`.js-${a.DEFAULT_CLASS}__markup-visibility`,this.makePropInputChangeHandler("markupVisibility","isMarkupVisible"))}}makePropInputChangeHandler(e,t){return()=>{const n=this.panelProperties[e],i=n.getValue(),r=null!=t?t:e;"string"==typeof i&&Number.parseFloat(i)&&(this.slider.callPluginFunction("update",{[r]:Number.parseFloat(i)}),n.setValue(this.slider.callPluginFunction("getSliderData")[r])),"boolean"==typeof i&&(this.slider.callPluginFunction("update",{[r]:i}),this.updateVisuals({[r]:i}))}}initProperty(e,t){const n=s.default(this.elements.body.querySelector(e));return n.addOnChange(t),n}updateMarkupVisibility(){this.panelProperties.markupVisibility.setValue(this.isMarkupVisible)}updateTooltipVisibility(){this.panelProperties.tooltipsVisibility.setValue(this.isTooltipsVisible)}updateOrientation(){const e=`${a.DEFAULT_CLASS}_${this.isVertical?"vertical":"horizontal"}`,t=`${a.DEFAULT_CLASS}_${this.isVertical?"horizontal":"vertical"}`;this.elements.wrap.classList.add(e),this.elements.wrap.classList.remove(t),this.panelProperties.orientation.setValue(this.isVertical)}}a.DEFAULT_CLASS="slider-panel",t.default=a}).call(this,n(1))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(25),r=n(0);t.default=function(e){return r.initBlocks(e,".js-"+i.default.DEFAULT_CLASS,i.default)}},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});class n{constructor(e){this.pairOptions=(new Map).set("ÐÐ¸ÐºÐµÐ¼",null).set("ÐÐ°ÑÐ°Ð»Ð¾Ð¼","start").set("ÐÐ¾Ð½ÑÐ¾Ð¼","end"),this.initElements(e),this.fillPairOptions()}getBody(){return this.body}getItemIndex(){return Number.parseFloat(this.itemInput.value)}getItemInput(){return this.itemInput}getPairSelect(){return this.pairSelect}getSelectedPairOption(){const e=this.pairSelect.selectedOptions[0].value,t=Number.isInteger(Number.parseInt(e,10))?Number.parseInt(e,10)+1:e;return this.pairOptions.get(t.toString())}addOnCreateHandlerButtonClick(t){e(this.createButton).on("click.createHandler",t)}removePairOption(e){Object.entries(this.pairSelect).some((t,n)=>t[1].innerText===(e+1).toString()&&(this.pairSelect.remove(n),!0))}addPairOption(e,t){let n;n="number"==typeof e?(e+1).toString():e,this.pairOptions.set(n,void 0===t?e:t);const i=document.createElement("option");i.value=e.toString(),i.innerText=n,this.pairSelect.add(i)}initElements(t){const i=n.DEFAULT_CLASS,r=e(t),s=r.hasClass(i)?r:r.find(".js-"+i);[this.body]=s.get();const o=s.find(`.js-${i}__value .js-panel-property__input`).get()[0];o instanceof HTMLInputElement&&(this.itemInput=o);const a=s.find(`.js-${i}__pair .js-panel-property__input`).get()[0];a instanceof HTMLSelectElement&&(this.pairSelect=a);const l=s.find(`.js-${i}__create-button`).get()[0];l instanceof HTMLButtonElement&&(this.createButton=l)}fillPairOptions(){this.pairOptions.forEach((e,t)=>{this.addPairOption(t,e)})}}n.DEFAULT_CLASS="handler-creation-section",t.default=n}).call(this,n(1))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(27);t.default=function(e,t,n,r){return new i.default(e,t,n,r)}},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});const i=n(28),r=n(5);class s{constructor(e,t,n=null,i=""){this.itemIndex=n,this.item=i,this.handlerIndex=t,this.initElements(e,t)}getIndex(){return this.handlerIndex}getItem(){return this.item}addOnRemoveButtonClick(t){e(this.removeButton).on("click.handlerSection",t)}addOnPositionInputChange(e){this.positionSection.addOnChange(e)}addOnItemInputChange(e){this.$itemElement.on("change.handler-section",e)}remove(){this.body.remove()}setRelativePosition(e){this.itemIndex=null!=e?e:this.itemIndex}setItem(e){this.item=null!=e?e:this.item}updateElements(){this.$itemElement.val(this.item),this.positionSection.setValue(this.itemIndex.toFixed(2))}initElements(t,n){this.wrap=t,this.body=document.createElement("div"),this.body.innerHTML=i({index:n+1}),this.wrap.append(this.body),this.$itemElement=e(this.body).find(`.js-${s.DEFAULT_CLASS}__item`),this.positionSection=new r.default(this.body),this.removeButton=this.body.querySelector(`.js-${s.DEFAULT_CLASS}__remove-button`),this.updateElements()}}s.DEFAULT_CLASS="handler-section",t.default=s}).call(this,n(1))},function(e,t,n){var i=n(29);e.exports=function(e){var t,n="",r={},s=e||{};return function(e){r["panel-property"]=t=function({type:e="",caption:r="test",shape:s=""}={}){this&&this.block,this&&this.attributes;let o,a="input",l="",u="";switch(e.toLowerCase()){case"checkbox":l="panel-property_type_checkbox",o="checkbox",n+="<break></break>";break;case"select":a="select",l="panel-property_type_select",n+="<break></break>"}switch(s.toLowerCase()){case"square":u="panel-property_shape_square",n+="<break></break>"}n=n+"<div"+i.attr("class",i.classes([`js-panel-property panel-property ${l} ${u}`],[!0]),!1,!0)+'><p class="js-panel-property__caption panel-property__caption">'+i.escape(null==(t=r)?"":t)+"</p><"+a+' class="js-panel-property__input panel-property__input"'+i.attr("type",o,!0,!0)+"></"+a+"></div>"},n+='<div class="handler-section"><div class="handler-section__position">',r["panel-property"]({caption:"ÐÐ¾Ð»Ð¾Ð¶ÐµÐ½Ð¸Ðµ "+e}),n=n+'</div><div class="handler-section__item"><p class="handler-section__item-caption">ÐÐ½Ð°ÑÐµÐ½Ð¸Ðµ '+i.escape(null==(t=e)?"":t)+'</p><input class="js-handler-section__item handler-section__item-text"></div><button class="js-handler-section__remove-button handler-section__remove-button">Ñ</button></div>'}.call(this,"index"in s?s.index:"undefined"!=typeof index?index:void 0),n}},function(e,t,n){"use strict";var i=Object.prototype.hasOwnProperty;function r(e,t){return Array.isArray(e)?function(e,t){for(var n,i="",s="",o=Array.isArray(t),a=0;a<e.length;a++)(n=r(e[a]))&&(o&&t[a]&&(n=l(n)),i=i+s+n,s=" ");return i}(e,t):e&&"object"==typeof e?function(e){var t="",n="";for(var r in e)r&&e[r]&&i.call(e,r)&&(t=t+n+r,n=" ");return t}(e):e||""}function s(e){if(!e)return"";if("object"==typeof e){var t="";for(var n in e)i.call(e,n)&&(t=t+n+":"+e[n]+";");return t}return e+""}function o(e,t,n,i){if(!1===t||null==t||!t&&("class"===e||"style"===e))return"";if(!0===t)return" "+(i?e:e+'="'+e+'"');var r=typeof t;return"object"!==r&&"function"!==r||"function"!=typeof t.toJSON||(t=t.toJSON()),"string"==typeof t||(t=JSON.stringify(t),n||-1===t.indexOf('"'))?(n&&(t=l(t))," "+e+'="'+t+'"'):" "+e+"='"+t.replace(/'/g,"&#39;")+"'"}t.merge=function e(t,n){if(1===arguments.length){for(var i=t[0],r=1;r<t.length;r++)i=e(i,t[r]);return i}for(var o in n)if("class"===o){var a=t[o]||[];t[o]=(Array.isArray(a)?a:[a]).concat(n[o]||[])}else if("style"===o){a=(a=s(t[o]))&&";"!==a[a.length-1]?a+";":a;var l=s(n[o]);l=l&&";"!==l[l.length-1]?l+";":l,t[o]=a+l}else t[o]=n[o];return t},t.classes=r,t.style=s,t.attr=o,t.attrs=function(e,t){var n="";for(var a in e)if(i.call(e,a)){var l=e[a];if("class"===a){l=r(l),n=o(a,l,!1,t)+n;continue}"style"===a&&(l=s(l)),n+=o(a,l,!1,t)}return n};var a=/["&<>]/;function l(e){var t=""+e,n=a.exec(t);if(!n)return e;var i,r,s,o="";for(i=n.index,r=0;i<t.length;i++){switch(t.charCodeAt(i)){case 34:s="&quot;";break;case 38:s="&amp;";break;case 60:s="&lt;";break;case 62:s="&gt;";break;default:continue}r!==i&&(o+=t.substring(r,i)),r=i+1,o+=s}return r!==i?o+t.substring(r,i):o}t.escape=l,t.rethrow=function e(t,i,r,s){if(!(t instanceof Error))throw t;if(!("undefined"==typeof window&&i||s))throw t.message+=" on line "+r,t;try{s=s||n(30).readFileSync(i,"utf8")}catch(n){e(t,null,r)}var o=3,a=s.split("\n"),l=Math.max(r-o,0),u=Math.min(a.length,r+o);o=a.slice(l,u).map((function(e,t){var n=t+l+1;return(n==r?"  > ":"    ")+n+"| "+e})).join("\n");t.path=i;try{t.message=(i||"Pug")+":"+r+"\n"+o+"\n\n"+t.message}catch(e){}throw t}},function(e,t){},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(5),r=n(0);t.default=function(e){return r.initBlocks(e,".js-"+i.default.DEFAULT_CLASS,i.default)[0]}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),r=n(33);t.default=function(e,t){return i.initBlocks(e,".js-"+r.default.DEFAULT_CLASS,r.default,t)}},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});class n{constructor(e,t){this.initElements(e),this.initSlider(t)}callPluginFunction(e,...t){return this.$slider.liquidSlider(e,...t)}initElements(e){this.body=e}initSlider(t){this.$slider=e(this.body).liquidSlider(t)}}n.DEFAULT_CLASS="slider",t.default=n}).call(this,n(1))},function(e,t,n){var i={"./handler-creation-section/handler-creation-section.scss":35,"./handler-section/handler-section.scss":36,"./panel-property/panel-property.scss":37,"./slider-panel/slider-panel.scss":4};function r(e){var t=s(e);return n(t)}function s(e){if(!n.o(i,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return i[e]}r.keys=function(){return Object.keys(i)},r.resolve=s,e.exports=r,r.id=34},function(e,t,n){},function(e,t,n){},function(e,t,n){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,