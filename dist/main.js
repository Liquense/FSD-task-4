!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=3)}([function(e,t,n){"use strict";function i(e,t,n){return Math.min(Math.max(e,t),n)}function r(e,t){let n=1;for(let e=0;e<t;e+=1)n*=10;return Math.round((e+Number.EPSILON)*n)/n}Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_SLIDER_PARAMS={isVertical:!1,showTooltips:!0,withMarkup:!1},t.DEFAULT_SLIDER_CLASS="liquidSlider",t.parseClassesString=function(e){var t;if(null===(t=e)||void 0===t?void 0:t.trim())return e.split(" ").filter(e=>e.length>0)},t.addListenerAfter=function(e,t,n){if(!n)return;const i=n;i.listenDictionary||(i.listenDictionary={}),n.listenDictionary[e]||(i.listenDictionary[e]={func:n[e],listeners:[]});const{listeners:r}=n.listenDictionary[e];r.push(t),function(e,t,n){const i=n,r=n.listenDictionary[e].func;i[e]=(...e)=>{const i=r.call(n,...e);t.forEach(e=>{e(i)})}}(e,r,n)},t.removeListener=function(e,t,n){var i,r;if(!(null===(r=null===(i=n)||void 0===i?void 0:i.listenDictionary)||void 0===r?void 0:r[e]))return;const{listeners:s}=n.listenDictionary[e],o=s.findIndex(e=>t===e);-1!==o&&s.splice(o,1)},t.clamp=i,t.roundToDecimal=r,t.standardize=function(e,t){const n=Math.min(t.max,t.min),s=Math.max(t.max,t.min);if(e>s)return s;if(e<n)return n;let o;const a=(e-n)%t.step;return 0===a?e:(o=t.step/2>a?e-a:e+(t.step-a),o=i(o,n,s),r(o,4))},t.calculateElementCenter=function(e,t){const n=e.getBoundingClientRect();let i;return i=t?n.top+n.height/2:n.left+n.width/2,i},t.HANDLER_PAIR_OPTIONS=(new Map).set(null,null).set("start",!1).set("end",!0)},function(e,t,n){var i;
/*!
 * jQuery JavaScript Library v3.4.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-05-01T21:04Z
 */!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(n,r){"use strict";var s=[],o=n.document,a=Object.getPrototypeOf,l=s.slice,u=s.concat,d=s.push,c=s.indexOf,h={},p=h.toString,f=h.hasOwnProperty,m=f.toString,g=m.call(Object),v={},y=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},b=function(e){return null!=e&&e===e.window},_={type:!0,src:!0,nonce:!0,noModule:!0};function x(e,t,n){var i,r,s=(n=n||o).createElement("script");if(s.text=e,t)for(i in _)(r=t[i]||t.getAttribute&&t.getAttribute(i))&&s.setAttribute(i,r);n.head.appendChild(s).parentNode.removeChild(s)}function w(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?h[p.call(e)]||"object":typeof e}var E=function(e,t){return new E.fn.init(e,t)},T=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function C(e){var t=!!e&&"length"in e&&e.length,n=w(e);return!y(e)&&!b(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}E.fn=E.prototype={jquery:"3.4.1",constructor:E,length:0,toArray:function(){return l.call(this)},get:function(e){return null==e?l.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=E.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return E.each(this,e)},map:function(e){return this.pushStack(E.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(l.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:d,sort:s.sort,splice:s.splice},E.extend=E.fn.extend=function(){var e,t,n,i,r,s,o=arguments[0]||{},a=1,l=arguments.length,u=!1;for("boolean"==typeof o&&(u=o,o=arguments[a]||{},a++),"object"==typeof o||y(o)||(o={}),a===l&&(o=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)i=e[t],"__proto__"!==t&&o!==i&&(u&&i&&(E.isPlainObject(i)||(r=Array.isArray(i)))?(n=o[t],s=r&&!Array.isArray(n)?[]:r||E.isPlainObject(n)?n:{},r=!1,o[t]=E.extend(u,s,i)):void 0!==i&&(o[t]=i));return o},E.extend({expando:"jQuery"+("3.4.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==p.call(e))&&(!(t=a(e))||"function"==typeof(n=f.call(t,"constructor")&&t.constructor)&&m.call(n)===g)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t){x(e,{nonce:t&&t.nonce})},each:function(e,t){var n,i=0;if(C(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},trim:function(e){return null==e?"":(e+"").replace(T,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(C(Object(e))?E.merge(n,"string"==typeof e?[e]:e):d.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:c.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;i<n;i++)e[r++]=t[i];return e.length=r,e},grep:function(e,t,n){for(var i=[],r=0,s=e.length,o=!n;r<s;r++)!t(e[r],r)!==o&&i.push(e[r]);return i},map:function(e,t,n){var i,r,s=0,o=[];if(C(e))for(i=e.length;s<i;s++)null!=(r=t(e[s],s,n))&&o.push(r);else for(s in e)null!=(r=t(e[s],s,n))&&o.push(r);return u.apply([],o)},guid:1,support:v}),"function"==typeof Symbol&&(E.fn[Symbol.iterator]=s[Symbol.iterator]),E.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){h["[object "+t+"]"]=t.toLowerCase()}));var S=
/*!
 * Sizzle CSS Selector Engine v2.3.4
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2019-04-08
 */
function(e){var t,n,i,r,s,o,a,l,u,d,c,h,p,f,m,g,v,y,b,_="sizzle"+1*new Date,x=e.document,w=0,E=0,T=le(),C=le(),S=le(),H=le(),L=function(e,t){return e===t&&(c=!0),0},k={}.hasOwnProperty,P=[],I=P.pop,A=P.push,D=P.push,M=P.slice,O=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},N="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",j="[\\x20\\t\\r\\n\\f]",R="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",$="\\["+j+"*("+R+")(?:"+j+"*([*^$|!~]?=)"+j+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+R+"))|)"+j+"*\\]",V=":("+R+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+$+")*)|.*)\\)|)",q=new RegExp(j+"+","g"),F=new RegExp("^"+j+"+|((?:^|[^\\\\])(?:\\\\.)*)"+j+"+$","g"),z=new RegExp("^"+j+"*,"+j+"*"),B=new RegExp("^"+j+"*([>+~]|"+j+")"+j+"*"),W=new RegExp(j+"|>"),U=new RegExp(V),X=new RegExp("^"+R+"$"),Y={ID:new RegExp("^#("+R+")"),CLASS:new RegExp("^\\.("+R+")"),TAG:new RegExp("^("+R+"|[*])"),ATTR:new RegExp("^"+$),PSEUDO:new RegExp("^"+V),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+j+"*(even|odd|(([+-]|)(\\d*)n|)"+j+"*(?:([+-]|)"+j+"*(\\d+)|))"+j+"*\\)|)","i"),bool:new RegExp("^(?:"+N+")$","i"),needsContext:new RegExp("^"+j+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+j+"*((?:-\\d)?\\d*)"+j+"*\\)|)(?=[^-]|$)","i")},K=/HTML$/i,G=/^(?:input|select|textarea|button)$/i,Q=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\([\\da-f]{1,6}"+j+"?|("+j+")|.)","ig"),ne=function(e,t,n){var i="0x"+t-65536;return i!=i||n?t:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},ie=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,re=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},se=function(){h()},oe=_e((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{D.apply(P=M.call(x.childNodes),x.childNodes),P[x.childNodes.length].nodeType}catch(e){D={apply:P.length?function(e,t){A.apply(e,M.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function ae(e,t,i,r){var s,a,u,d,c,f,v,y=t&&t.ownerDocument,w=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==w&&9!==w&&11!==w)return i;if(!r&&((t?t.ownerDocument||t:x)!==p&&h(t),t=t||p,m)){if(11!==w&&(c=Z.exec(e)))if(s=c[1]){if(9===w){if(!(u=t.getElementById(s)))return i;if(u.id===s)return i.push(u),i}else if(y&&(u=y.getElementById(s))&&b(t,u)&&u.id===s)return i.push(u),i}else{if(c[2])return D.apply(i,t.getElementsByTagName(e)),i;if((s=c[3])&&n.getElementsByClassName&&t.getElementsByClassName)return D.apply(i,t.getElementsByClassName(s)),i}if(n.qsa&&!H[e+" "]&&(!g||!g.test(e))&&(1!==w||"object"!==t.nodeName.toLowerCase())){if(v=e,y=t,1===w&&W.test(e)){for((d=t.getAttribute("id"))?d=d.replace(ie,re):t.setAttribute("id",d=_),a=(f=o(e)).length;a--;)f[a]="#"+d+" "+be(f[a]);v=f.join(","),y=ee.test(e)&&ve(t.parentNode)||t}try{return D.apply(i,y.querySelectorAll(v)),i}catch(t){H(e,!0)}finally{d===_&&t.removeAttribute("id")}}}return l(e.replace(F,"$1"),t,i,r)}function le(){var e=[];return function t(n,r){return e.push(n+" ")>i.cacheLength&&delete t[e.shift()],t[n+" "]=r}}function ue(e){return e[_]=!0,e}function de(e){var t=p.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ce(e,t){for(var n=e.split("|"),r=n.length;r--;)i.attrHandle[n[r]]=t}function he(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function pe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function fe(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function me(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&oe(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function ge(e){return ue((function(t){return t=+t,ue((function(n,i){for(var r,s=e([],n.length,t),o=s.length;o--;)n[r=s[o]]&&(n[r]=!(i[r]=n[r]))}))}))}function ve(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=ae.support={},s=ae.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!K.test(t||n&&n.nodeName||"HTML")},h=ae.setDocument=function(e){var t,r,o=e?e.ownerDocument||e:x;return o!==p&&9===o.nodeType&&o.documentElement?(f=(p=o).documentElement,m=!s(p),x!==p&&(r=p.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",se,!1):r.attachEvent&&r.attachEvent("onunload",se)),n.attributes=de((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=de((function(e){return e.appendChild(p.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=J.test(p.getElementsByClassName),n.getById=de((function(e){return f.appendChild(e).id=_,!p.getElementsByName||!p.getElementsByName(_).length})),n.getById?(i.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n=t.getElementById(e);return n?[n]:[]}}):(i.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n,i,r,s=t.getElementById(e);if(s){if((n=s.getAttributeNode("id"))&&n.value===e)return[s];for(r=t.getElementsByName(e),i=0;s=r[i++];)if((n=s.getAttributeNode("id"))&&n.value===e)return[s]}return[]}}),i.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,s=t.getElementsByTagName(e);if("*"===e){for(;n=s[r++];)1===n.nodeType&&i.push(n);return i}return s},i.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&m)return t.getElementsByClassName(e)},v=[],g=[],(n.qsa=J.test(p.querySelectorAll))&&(de((function(e){f.appendChild(e).innerHTML="<a id='"+_+"'></a><select id='"+_+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+j+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\["+j+"*(?:value|"+N+")"),e.querySelectorAll("[id~="+_+"-]").length||g.push("~="),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+_+"+*").length||g.push(".#.+[+~]")})),de((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=p.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name"+j+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),f.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")}))),(n.matchesSelector=J.test(y=f.matches||f.webkitMatchesSelector||f.mozMatchesSelector||f.oMatchesSelector||f.msMatchesSelector))&&de((function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),v.push("!=",V)})),g=g.length&&new RegExp(g.join("|")),v=v.length&&new RegExp(v.join("|")),t=J.test(f.compareDocumentPosition),b=t||J.test(f.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},L=t?function(e,t){if(e===t)return c=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i||(1&(i=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===i?e===p||e.ownerDocument===x&&b(x,e)?-1:t===p||t.ownerDocument===x&&b(x,t)?1:d?O(d,e)-O(d,t):0:4&i?-1:1)}:function(e,t){if(e===t)return c=!0,0;var n,i=0,r=e.parentNode,s=t.parentNode,o=[e],a=[t];if(!r||!s)return e===p?-1:t===p?1:r?-1:s?1:d?O(d,e)-O(d,t):0;if(r===s)return he(e,t);for(n=e;n=n.parentNode;)o.unshift(n);for(n=t;n=n.parentNode;)a.unshift(n);for(;o[i]===a[i];)i++;return i?he(o[i],a[i]):o[i]===x?-1:a[i]===x?1:0},p):p},ae.matches=function(e,t){return ae(e,null,null,t)},ae.matchesSelector=function(e,t){if((e.ownerDocument||e)!==p&&h(e),n.matchesSelector&&m&&!H[t+" "]&&(!v||!v.test(t))&&(!g||!g.test(t)))try{var i=y.call(e,t);if(i||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){H(t,!0)}return ae(t,p,null,[e]).length>0},ae.contains=function(e,t){return(e.ownerDocument||e)!==p&&h(e),b(e,t)},ae.attr=function(e,t){(e.ownerDocument||e)!==p&&h(e);var r=i.attrHandle[t.toLowerCase()],s=r&&k.call(i.attrHandle,t.toLowerCase())?r(e,t,!m):void 0;return void 0!==s?s:n.attributes||!m?e.getAttribute(t):(s=e.getAttributeNode(t))&&s.specified?s.value:null},ae.escape=function(e){return(e+"").replace(ie,re)},ae.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},ae.uniqueSort=function(e){var t,i=[],r=0,s=0;if(c=!n.detectDuplicates,d=!n.sortStable&&e.slice(0),e.sort(L),c){for(;t=e[s++];)t===e[s]&&(r=i.push(s));for(;r--;)e.splice(i[r],1)}return d=null,e},r=ae.getText=function(e){var t,n="",i=0,s=e.nodeType;if(s){if(1===s||9===s||11===s){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=r(e)}else if(3===s||4===s)return e.nodeValue}else for(;t=e[i++];)n+=r(t);return n},(i=ae.selectors={cacheLength:50,createPseudo:ue,match:Y,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ae.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ae.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return Y.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&U.test(n)&&(t=o(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=T[e+" "];return t||(t=new RegExp("(^|"+j+")"+e+"("+j+"|$)"))&&T(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(i){var r=ae.attr(i,e);return null==r?"!="===t:!t||(r+="","="===t?r===n:"!="===t?r!==n:"^="===t?n&&0===r.indexOf(n):"*="===t?n&&r.indexOf(n)>-1:"$="===t?n&&r.slice(-n.length)===n:"~="===t?(" "+r.replace(q," ")+" ").indexOf(n)>-1:"|="===t&&(r===n||r.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,i,r){var s="nth"!==e.slice(0,3),o="last"!==e.slice(-4),a="of-type"===t;return 1===i&&0===r?function(e){return!!e.parentNode}:function(t,n,l){var u,d,c,h,p,f,m=s!==o?"nextSibling":"previousSibling",g=t.parentNode,v=a&&t.nodeName.toLowerCase(),y=!l&&!a,b=!1;if(g){if(s){for(;m;){for(h=t;h=h[m];)if(a?h.nodeName.toLowerCase()===v:1===h.nodeType)return!1;f=m="only"===e&&!f&&"nextSibling"}return!0}if(f=[o?g.firstChild:g.lastChild],o&&y){for(b=(p=(u=(d=(c=(h=g)[_]||(h[_]={}))[h.uniqueID]||(c[h.uniqueID]={}))[e]||[])[0]===w&&u[1])&&u[2],h=p&&g.childNodes[p];h=++p&&h&&h[m]||(b=p=0)||f.pop();)if(1===h.nodeType&&++b&&h===t){d[e]=[w,p,b];break}}else if(y&&(b=p=(u=(d=(c=(h=t)[_]||(h[_]={}))[h.uniqueID]||(c[h.uniqueID]={}))[e]||[])[0]===w&&u[1]),!1===b)for(;(h=++p&&h&&h[m]||(b=p=0)||f.pop())&&((a?h.nodeName.toLowerCase()!==v:1!==h.nodeType)||!++b||(y&&((d=(c=h[_]||(h[_]={}))[h.uniqueID]||(c[h.uniqueID]={}))[e]=[w,b]),h!==t)););return(b-=r)===i||b%i==0&&b/i>=0}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||ae.error("unsupported pseudo: "+e);return r[_]?r(t):r.length>1?(n=[e,e,"",t],i.setFilters.hasOwnProperty(e.toLowerCase())?ue((function(e,n){for(var i,s=r(e,t),o=s.length;o--;)e[i=O(e,s[o])]=!(n[i]=s[o])})):function(e){return r(e,0,n)}):r}},pseudos:{not:ue((function(e){var t=[],n=[],i=a(e.replace(F,"$1"));return i[_]?ue((function(e,t,n,r){for(var s,o=i(e,null,r,[]),a=e.length;a--;)(s=o[a])&&(e[a]=!(t[a]=s))})):function(e,r,s){return t[0]=e,i(t,null,s,n),t[0]=null,!n.pop()}})),has:ue((function(e){return function(t){return ae(e,t).length>0}})),contains:ue((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||r(t)).indexOf(e)>-1}})),lang:ue((function(e){return X.test(e||"")||ae.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=m?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===f},focus:function(e){return e===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:me(!1),disabled:me(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!i.pseudos.empty(e)},header:function(e){return Q.test(e.nodeName)},input:function(e){return G.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ge((function(){return[0]})),last:ge((function(e,t){return[t-1]})),eq:ge((function(e,t,n){return[n<0?n+t:n]})),even:ge((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:ge((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:ge((function(e,t,n){for(var i=n<0?n+t:n>t?t:n;--i>=0;)e.push(i);return e})),gt:ge((function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e}))}}).pseudos.nth=i.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[t]=pe(t);for(t in{submit:!0,reset:!0})i.pseudos[t]=fe(t);function ye(){}function be(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function _e(e,t,n){var i=t.dir,r=t.next,s=r||i,o=n&&"parentNode"===s,a=E++;return t.first?function(t,n,r){for(;t=t[i];)if(1===t.nodeType||o)return e(t,n,r);return!1}:function(t,n,l){var u,d,c,h=[w,a];if(l){for(;t=t[i];)if((1===t.nodeType||o)&&e(t,n,l))return!0}else for(;t=t[i];)if(1===t.nodeType||o)if(d=(c=t[_]||(t[_]={}))[t.uniqueID]||(c[t.uniqueID]={}),r&&r===t.nodeName.toLowerCase())t=t[i]||t;else{if((u=d[s])&&u[0]===w&&u[1]===a)return h[2]=u[2];if(d[s]=h,h[2]=e(t,n,l))return!0}return!1}}function xe(e){return e.length>1?function(t,n,i){for(var r=e.length;r--;)if(!e[r](t,n,i))return!1;return!0}:e[0]}function we(e,t,n,i,r){for(var s,o=[],a=0,l=e.length,u=null!=t;a<l;a++)(s=e[a])&&(n&&!n(s,i,r)||(o.push(s),u&&t.push(a)));return o}function Ee(e,t,n,i,r,s){return i&&!i[_]&&(i=Ee(i)),r&&!r[_]&&(r=Ee(r,s)),ue((function(s,o,a,l){var u,d,c,h=[],p=[],f=o.length,m=s||function(e,t,n){for(var i=0,r=t.length;i<r;i++)ae(e,t[i],n);return n}(t||"*",a.nodeType?[a]:a,[]),g=!e||!s&&t?m:we(m,h,e,a,l),v=n?r||(s?e:f||i)?[]:o:g;if(n&&n(g,v,a,l),i)for(u=we(v,p),i(u,[],a,l),d=u.length;d--;)(c=u[d])&&(v[p[d]]=!(g[p[d]]=c));if(s){if(r||e){if(r){for(u=[],d=v.length;d--;)(c=v[d])&&u.push(g[d]=c);r(null,v=[],u,l)}for(d=v.length;d--;)(c=v[d])&&(u=r?O(s,c):h[d])>-1&&(s[u]=!(o[u]=c))}}else v=we(v===o?v.splice(f,v.length):v),r?r(null,o,v,l):D.apply(o,v)}))}function Te(e){for(var t,n,r,s=e.length,o=i.relative[e[0].type],a=o||i.relative[" "],l=o?1:0,d=_e((function(e){return e===t}),a,!0),c=_e((function(e){return O(t,e)>-1}),a,!0),h=[function(e,n,i){var r=!o&&(i||n!==u)||((t=n).nodeType?d(e,n,i):c(e,n,i));return t=null,r}];l<s;l++)if(n=i.relative[e[l].type])h=[_e(xe(h),n)];else{if((n=i.filter[e[l].type].apply(null,e[l].matches))[_]){for(r=++l;r<s&&!i.relative[e[r].type];r++);return Ee(l>1&&xe(h),l>1&&be(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(F,"$1"),n,l<r&&Te(e.slice(l,r)),r<s&&Te(e=e.slice(r)),r<s&&be(e))}h.push(n)}return xe(h)}return ye.prototype=i.filters=i.pseudos,i.setFilters=new ye,o=ae.tokenize=function(e,t){var n,r,s,o,a,l,u,d=C[e+" "];if(d)return t?0:d.slice(0);for(a=e,l=[],u=i.preFilter;a;){for(o in n&&!(r=z.exec(a))||(r&&(a=a.slice(r[0].length)||a),l.push(s=[])),n=!1,(r=B.exec(a))&&(n=r.shift(),s.push({value:n,type:r[0].replace(F," ")}),a=a.slice(n.length)),i.filter)!(r=Y[o].exec(a))||u[o]&&!(r=u[o](r))||(n=r.shift(),s.push({value:n,type:o,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?ae.error(e):C(e,l).slice(0)},a=ae.compile=function(e,t){var n,r=[],s=[],a=S[e+" "];if(!a){for(t||(t=o(e)),n=t.length;n--;)(a=Te(t[n]))[_]?r.push(a):s.push(a);(a=S(e,function(e,t){var n=t.length>0,r=e.length>0,s=function(s,o,a,l,d){var c,f,g,v=0,y="0",b=s&&[],_=[],x=u,E=s||r&&i.find.TAG("*",d),T=w+=null==x?1:Math.random()||.1,C=E.length;for(d&&(u=o===p||o||d);y!==C&&null!=(c=E[y]);y++){if(r&&c){for(f=0,o||c.ownerDocument===p||(h(c),a=!m);g=e[f++];)if(g(c,o||p,a)){l.push(c);break}d&&(w=T)}n&&((c=!g&&c)&&v--,s&&b.push(c))}if(v+=y,n&&y!==v){for(f=0;g=t[f++];)g(b,_,o,a);if(s){if(v>0)for(;y--;)b[y]||_[y]||(_[y]=I.call(l));_=we(_)}D.apply(l,_),d&&!s&&_.length>0&&v+t.length>1&&ae.uniqueSort(l)}return d&&(w=T,u=x),b};return n?ue(s):s}(s,r))).selector=e}return a},l=ae.select=function(e,t,n,r){var s,l,u,d,c,h="function"==typeof e&&e,p=!r&&o(e=h.selector||e);if(n=n||[],1===p.length){if((l=p[0]=p[0].slice(0)).length>2&&"ID"===(u=l[0]).type&&9===t.nodeType&&m&&i.relative[l[1].type]){if(!(t=(i.find.ID(u.matches[0].replace(te,ne),t)||[])[0]))return n;h&&(t=t.parentNode),e=e.slice(l.shift().value.length)}for(s=Y.needsContext.test(e)?0:l.length;s--&&(u=l[s],!i.relative[d=u.type]);)if((c=i.find[d])&&(r=c(u.matches[0].replace(te,ne),ee.test(l[0].type)&&ve(t.parentNode)||t))){if(l.splice(s,1),!(e=r.length&&be(l)))return D.apply(n,r),n;break}}return(h||a(e,p))(r,t,!m,n,!t||ee.test(e)&&ve(t.parentNode)||t),n},n.sortStable=_.split("").sort(L).join("")===_,n.detectDuplicates=!!c,h(),n.sortDetached=de((function(e){return 1&e.compareDocumentPosition(p.createElement("fieldset"))})),de((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||ce("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&de((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||ce("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),de((function(e){return null==e.getAttribute("disabled")}))||ce(N,(function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null})),ae}(n);E.find=S,E.expr=S.selectors,E.expr[":"]=E.expr.pseudos,E.uniqueSort=E.unique=S.uniqueSort,E.text=S.getText,E.isXMLDoc=S.isXML,E.contains=S.contains,E.escapeSelector=S.escape;var H=function(e,t,n){for(var i=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&E(e).is(n))break;i.push(e)}return i},L=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},k=E.expr.match.needsContext;function P(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var I=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function A(e,t,n){return y(t)?E.grep(e,(function(e,i){return!!t.call(e,i,e)!==n})):t.nodeType?E.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?E.grep(e,(function(e){return c.call(t,e)>-1!==n})):E.filter(t,e,n)}E.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?E.find.matchesSelector(i,e)?[i]:[]:E.find.matches(e,E.grep(t,(function(e){return 1===e.nodeType})))},E.fn.extend({find:function(e){var t,n,i=this.length,r=this;if("string"!=typeof e)return this.pushStack(E(e).filter((function(){for(t=0;t<i;t++)if(E.contains(r[t],this))return!0})));for(n=this.pushStack([]),t=0;t<i;t++)E.find(e,r[t],n);return i>1?E.uniqueSort(n):n},filter:function(e){return this.pushStack(A(this,e||[],!1))},not:function(e){return this.pushStack(A(this,e||[],!0))},is:function(e){return!!A(this,"string"==typeof e&&k.test(e)?E(e):e||[],!1).length}});var D,M=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(E.fn.init=function(e,t,n){var i,r;if(!e)return this;if(n=n||D,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:M.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof E?t[0]:t,E.merge(this,E.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:o,!0)),I.test(i[1])&&E.isPlainObject(t))for(i in t)y(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(r=o.getElementById(i[2]))&&(this[0]=r,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):y(e)?void 0!==n.ready?n.ready(e):e(E):E.makeArray(e,this)}).prototype=E.fn,D=E(o);var O=/^(?:parents|prev(?:Until|All))/,N={children:!0,contents:!0,next:!0,prev:!0};function j(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}E.fn.extend({has:function(e){var t=E(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(E.contains(this,t[e]))return!0}))},closest:function(e,t){var n,i=0,r=this.length,s=[],o="string"!=typeof e&&E(e);if(!k.test(e))for(;i<r;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(o?o.index(n)>-1:1===n.nodeType&&E.find.matchesSelector(n,e))){s.push(n);break}return this.pushStack(s.length>1?E.uniqueSort(s):s)},index:function(e){return e?"string"==typeof e?c.call(E(e),this[0]):c.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(E.uniqueSort(E.merge(this.get(),E(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),E.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return H(e,"parentNode")},parentsUntil:function(e,t,n){return H(e,"parentNode",n)},next:function(e){return j(e,"nextSibling")},prev:function(e){return j(e,"previousSibling")},nextAll:function(e){return H(e,"nextSibling")},prevAll:function(e){return H(e,"previousSibling")},nextUntil:function(e,t,n){return H(e,"nextSibling",n)},prevUntil:function(e,t,n){return H(e,"previousSibling",n)},siblings:function(e){return L((e.parentNode||{}).firstChild,e)},children:function(e){return L(e.firstChild)},contents:function(e){return void 0!==e.contentDocument?e.contentDocument:(P(e,"template")&&(e=e.content||e),E.merge([],e.childNodes))}},(function(e,t){E.fn[e]=function(n,i){var r=E.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=E.filter(i,r)),this.length>1&&(N[e]||E.uniqueSort(r),O.test(e)&&r.reverse()),this.pushStack(r)}}));var R=/[^\x20\t\r\n\f]+/g;function $(e){return e}function V(e){throw e}function q(e,t,n,i){var r;try{e&&y(r=e.promise)?r.call(e).done(t).fail(n):e&&y(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}E.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return E.each(e.match(R)||[],(function(e,n){t[n]=!0})),t}(e):E.extend({},e);var t,n,i,r,s=[],o=[],a=-1,l=function(){for(r=r||e.once,i=t=!0;o.length;a=-1)for(n=o.shift();++a<s.length;)!1===s[a].apply(n[0],n[1])&&e.stopOnFalse&&(a=s.length,n=!1);e.memory||(n=!1),t=!1,r&&(s=n?[]:"")},u={add:function(){return s&&(n&&!t&&(a=s.length-1,o.push(n)),function t(n){E.each(n,(function(n,i){y(i)?e.unique&&u.has(i)||s.push(i):i&&i.length&&"string"!==w(i)&&t(i)}))}(arguments),n&&!t&&l()),this},remove:function(){return E.each(arguments,(function(e,t){for(var n;(n=E.inArray(t,s,n))>-1;)s.splice(n,1),n<=a&&a--})),this},has:function(e){return e?E.inArray(e,s)>-1:s.length>0},empty:function(){return s&&(s=[]),this},disable:function(){return r=o=[],s=n="",this},disabled:function(){return!s},lock:function(){return r=o=[],n||t||(s=n=""),this},locked:function(){return!!r},fireWith:function(e,n){return r||(n=[e,(n=n||[]).slice?n.slice():n],o.push(n),t||l()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!i}};return u},E.extend({Deferred:function(e){var t=[["notify","progress",E.Callbacks("memory"),E.Callbacks("memory"),2],["resolve","done",E.Callbacks("once memory"),E.Callbacks("once memory"),0,"resolved"],["reject","fail",E.Callbacks("once memory"),E.Callbacks("once memory"),1,"rejected"]],i="pending",r={state:function(){return i},always:function(){return s.done(arguments).fail(arguments),this},catch:function(e){return r.then(null,e)},pipe:function(){var e=arguments;return E.Deferred((function(n){E.each(t,(function(t,i){var r=y(e[i[4]])&&e[i[4]];s[i[1]]((function(){var e=r&&r.apply(this,arguments);e&&y(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[i[0]+"With"](this,r?[e]:arguments)}))})),e=null})).promise()},then:function(e,i,r){var s=0;function o(e,t,i,r){return function(){var a=this,l=arguments,u=function(){var n,u;if(!(e<s)){if((n=i.apply(a,l))===t.promise())throw new TypeError("Thenable self-resolution");u=n&&("object"==typeof n||"function"==typeof n)&&n.then,y(u)?r?u.call(n,o(s,t,$,r),o(s,t,V,r)):(s++,u.call(n,o(s,t,$,r),o(s,t,V,r),o(s,t,$,t.notifyWith))):(i!==$&&(a=void 0,l=[n]),(r||t.resolveWith)(a,l))}},d=r?u:function(){try{u()}catch(n){E.Deferred.exceptionHook&&E.Deferred.exceptionHook(n,d.stackTrace),e+1>=s&&(i!==V&&(a=void 0,l=[n]),t.rejectWith(a,l))}};e?d():(E.Deferred.getStackHook&&(d.stackTrace=E.Deferred.getStackHook()),n.setTimeout(d))}}return E.Deferred((function(n){t[0][3].add(o(0,n,y(r)?r:$,n.notifyWith)),t[1][3].add(o(0,n,y(e)?e:$)),t[2][3].add(o(0,n,y(i)?i:V))})).promise()},promise:function(e){return null!=e?E.extend(e,r):r}},s={};return E.each(t,(function(e,n){var o=n[2],a=n[5];r[n[1]]=o.add,a&&o.add((function(){i=a}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),o.add(n[3].fire),s[n[0]]=function(){return s[n[0]+"With"](this===s?void 0:this,arguments),this},s[n[0]+"With"]=o.fireWith})),r.promise(s),e&&e.call(s,s),s},when:function(e){var t=arguments.length,n=t,i=Array(n),r=l.call(arguments),s=E.Deferred(),o=function(e){return function(n){i[e]=this,r[e]=arguments.length>1?l.call(arguments):n,--t||s.resolveWith(i,r)}};if(t<=1&&(q(e,s.done(o(n)).resolve,s.reject,!t),"pending"===s.state()||y(r[n]&&r[n].then)))return s.then();for(;n--;)q(r[n],o(n),s.reject);return s.promise()}});var F=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;E.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&F.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},E.readyException=function(e){n.setTimeout((function(){throw e}))};var z=E.Deferred();function B(){o.removeEventListener("DOMContentLoaded",B),n.removeEventListener("load",B),E.ready()}E.fn.ready=function(e){return z.then(e).catch((function(e){E.readyException(e)})),this},E.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--E.readyWait:E.isReady)||(E.isReady=!0,!0!==e&&--E.readyWait>0||z.resolveWith(o,[E]))}}),E.ready.then=z.then,"complete"===o.readyState||"loading"!==o.readyState&&!o.documentElement.doScroll?n.setTimeout(E.ready):(o.addEventListener("DOMContentLoaded",B),n.addEventListener("load",B));var W=function(e,t,n,i,r,s,o){var a=0,l=e.length,u=null==n;if("object"===w(n))for(a in r=!0,n)W(e,t,a,n[a],!0,s,o);else if(void 0!==i&&(r=!0,y(i)||(o=!0),u&&(o?(t.call(e,i),t=null):(u=t,t=function(e,t,n){return u.call(E(e),n)})),t))for(;a<l;a++)t(e[a],n,o?i:i.call(e[a],a,t(e[a],n)));return r?e:u?t.call(e):l?t(e[0],n):s},U=/^-ms-/,X=/-([a-z])/g;function Y(e,t){return t.toUpperCase()}function K(e){return e.replace(U,"ms-").replace(X,Y)}var G=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Q(){this.expando=E.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(e){var t=e[this.expando];return t||(t={},G(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,r=this.cache(e);if("string"==typeof t)r[K(t)]=n;else for(i in t)r[K(i)]=t[i];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][K(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(K):(t=K(t))in i?[t]:t.match(R)||[]).length;for(;n--;)delete i[t[n]]}(void 0===t||E.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!E.isEmptyObject(t)}};var J=new Q,Z=new Q,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}Z.set(e,t,n)}else n=void 0;return n}E.extend({hasData:function(e){return Z.hasData(e)||J.hasData(e)},data:function(e,t,n){return Z.access(e,t,n)},removeData:function(e,t){Z.remove(e,t)},_data:function(e,t,n){return J.access(e,t,n)},_removeData:function(e,t){J.remove(e,t)}}),E.fn.extend({data:function(e,t){var n,i,r,s=this[0],o=s&&s.attributes;if(void 0===e){if(this.length&&(r=Z.get(s),1===s.nodeType&&!J.get(s,"hasDataAttrs"))){for(n=o.length;n--;)o[n]&&0===(i=o[n].name).indexOf("data-")&&(i=K(i.slice(5)),ne(s,i,r[i]));J.set(s,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each((function(){Z.set(this,e)})):W(this,(function(t){var n;if(s&&void 0===t)return void 0!==(n=Z.get(s,e))?n:void 0!==(n=ne(s,e))?n:void 0;this.each((function(){Z.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){Z.remove(this,e)}))}}),E.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=J.get(e,t),n&&(!i||Array.isArray(n)?i=J.access(e,t,E.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=E.queue(e,t),i=n.length,r=n.shift(),s=E._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete s.stop,r.call(e,(function(){E.dequeue(e,t)}),s)),!i&&s&&s.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return J.get(e,n)||J.access(e,n,{empty:E.Callbacks("once memory").add((function(){J.remove(e,[t+"queue",n])}))})}}),E.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?E.queue(this[0],e):void 0===t?this:this.each((function(){var n=E.queue(this,e,t);E._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&E.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){E.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,r=E.Deferred(),s=this,o=this.length,a=function(){--i||r.resolveWith(s,[s])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";o--;)(n=J.get(s[o],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),r.promise(t)}});var ie=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,re=new RegExp("^(?:([+-])=|)("+ie+")([a-z%]*)$","i"),se=["Top","Right","Bottom","Left"],oe=o.documentElement,ae=function(e){return E.contains(e.ownerDocument,e)},le={composed:!0};oe.getRootNode&&(ae=function(e){return E.contains(e.ownerDocument,e)||e.getRootNode(le)===e.ownerDocument});var ue=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&ae(e)&&"none"===E.css(e,"display")},de=function(e,t,n,i){var r,s,o={};for(s in t)o[s]=e.style[s],e.style[s]=t[s];for(s in r=n.apply(e,i||[]),t)e.style[s]=o[s];return r};function ce(e,t,n,i){var r,s,o=20,a=i?function(){return i.cur()}:function(){return E.css(e,t,"")},l=a(),u=n&&n[3]||(E.cssNumber[t]?"":"px"),d=e.nodeType&&(E.cssNumber[t]||"px"!==u&&+l)&&re.exec(E.css(e,t));if(d&&d[3]!==u){for(l/=2,u=u||d[3],d=+l||1;o--;)E.style(e,t,d+u),(1-s)*(1-(s=a()/l||.5))<=0&&(o=0),d/=s;d*=2,E.style(e,t,d+u),n=n||[]}return n&&(d=+d||+l||0,r=n[1]?d+(n[1]+1)*n[2]:+n[2],i&&(i.unit=u,i.start=d,i.end=r)),r}var he={};function pe(e){var t,n=e.ownerDocument,i=e.nodeName,r=he[i];return r||(t=n.body.appendChild(n.createElement(i)),r=E.css(t,"display"),t.parentNode.removeChild(t),"none"===r&&(r="block"),he[i]=r,r)}function fe(e,t){for(var n,i,r=[],s=0,o=e.length;s<o;s++)(i=e[s]).style&&(n=i.style.display,t?("none"===n&&(r[s]=J.get(i,"display")||null,r[s]||(i.style.display="")),""===i.style.display&&ue(i)&&(r[s]=pe(i))):"none"!==n&&(r[s]="none",J.set(i,"display",n)));for(s=0;s<o;s++)null!=r[s]&&(e[s].style.display=r[s]);return e}E.fn.extend({show:function(){return fe(this,!0)},hide:function(){return fe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){ue(this)?E(this).show():E(this).hide()}))}});var me=/^(?:checkbox|radio)$/i,ge=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ve=/^$|^module$|\/(?:java|ecma)script/i,ye={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function be(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&P(e,t)?E.merge([e],n):n}function _e(e,t){for(var n=0,i=e.length;n<i;n++)J.set(e[n],"globalEval",!t||J.get(t[n],"globalEval"))}ye.optgroup=ye.option,ye.tbody=ye.tfoot=ye.colgroup=ye.caption=ye.thead,ye.th=ye.td;var xe,we,Ee=/<|&#?\w+;/;function Te(e,t,n,i,r){for(var s,o,a,l,u,d,c=t.createDocumentFragment(),h=[],p=0,f=e.length;p<f;p++)if((s=e[p])||0===s)if("object"===w(s))E.merge(h,s.nodeType?[s]:s);else if(Ee.test(s)){for(o=o||c.appendChild(t.createElement("div")),a=(ge.exec(s)||["",""])[1].toLowerCase(),l=ye[a]||ye._default,o.innerHTML=l[1]+E.htmlPrefilter(s)+l[2],d=l[0];d--;)o=o.lastChild;E.merge(h,o.childNodes),(o=c.firstChild).textContent=""}else h.push(t.createTextNode(s));for(c.textContent="",p=0;s=h[p++];)if(i&&E.inArray(s,i)>-1)r&&r.push(s);else if(u=ae(s),o=be(c.appendChild(s),"script"),u&&_e(o),n)for(d=0;s=o[d++];)ve.test(s.type||"")&&n.push(s);return c}xe=o.createDocumentFragment().appendChild(o.createElement("div")),(we=o.createElement("input")).setAttribute("type","radio"),we.setAttribute("checked","checked"),we.setAttribute("name","t"),xe.appendChild(we),v.checkClone=xe.cloneNode(!0).cloneNode(!0).lastChild.checked,xe.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!xe.cloneNode(!0).lastChild.defaultValue;var Ce=/^key/,Se=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,He=/^([^.]*)(?:\.(.+)|)/;function Le(){return!0}function ke(){return!1}function Pe(e,t){return e===function(){try{return o.activeElement}catch(e){}}()==("focus"===t)}function Ie(e,t,n,i,r,s){var o,a;if("object"==typeof t){for(a in"string"!=typeof n&&(i=i||n,n=void 0),t)Ie(e,a,n,i,t[a],s);return e}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=ke;else if(!r)return e;return 1===s&&(o=r,(r=function(e){return E().off(e),o.apply(this,arguments)}).guid=o.guid||(o.guid=E.guid++)),e.each((function(){E.event.add(this,t,r,i,n)}))}function Ae(e,t,n){n?(J.set(e,t,!1),E.event.add(e,t,{namespace:!1,handler:function(e){var i,r,s=J.get(this,t);if(1&e.isTrigger&&this[t]){if(s.length)(E.event.special[t]||{}).delegateType&&e.stopPropagation();else if(s=l.call(arguments),J.set(this,t,s),i=n(this,t),this[t](),s!==(r=J.get(this,t))||i?J.set(this,t,!1):r={},s!==r)return e.stopImmediatePropagation(),e.preventDefault(),r.value}else s.length&&(J.set(this,t,{value:E.event.trigger(E.extend(s[0],E.Event.prototype),s.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===J.get(e,t)&&E.event.add(e,t,Le)}E.event={global:{},add:function(e,t,n,i,r){var s,o,a,l,u,d,c,h,p,f,m,g=J.get(e);if(g)for(n.handler&&(n=(s=n).handler,r=s.selector),r&&E.find.matchesSelector(oe,r),n.guid||(n.guid=E.guid++),(l=g.events)||(l=g.events={}),(o=g.handle)||(o=g.handle=function(t){return void 0!==E&&E.event.triggered!==t.type?E.event.dispatch.apply(e,arguments):void 0}),u=(t=(t||"").match(R)||[""]).length;u--;)p=m=(a=He.exec(t[u])||[])[1],f=(a[2]||"").split(".").sort(),p&&(c=E.event.special[p]||{},p=(r?c.delegateType:c.bindType)||p,c=E.event.special[p]||{},d=E.extend({type:p,origType:m,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&E.expr.match.needsContext.test(r),namespace:f.join(".")},s),(h=l[p])||((h=l[p]=[]).delegateCount=0,c.setup&&!1!==c.setup.call(e,i,f,o)||e.addEventListener&&e.addEventListener(p,o)),c.add&&(c.add.call(e,d),d.handler.guid||(d.handler.guid=n.guid)),r?h.splice(h.delegateCount++,0,d):h.push(d),E.event.global[p]=!0)},remove:function(e,t,n,i,r){var s,o,a,l,u,d,c,h,p,f,m,g=J.hasData(e)&&J.get(e);if(g&&(l=g.events)){for(u=(t=(t||"").match(R)||[""]).length;u--;)if(p=m=(a=He.exec(t[u])||[])[1],f=(a[2]||"").split(".").sort(),p){for(c=E.event.special[p]||{},h=l[p=(i?c.delegateType:c.bindType)||p]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),o=s=h.length;s--;)d=h[s],!r&&m!==d.origType||n&&n.guid!==d.guid||a&&!a.test(d.namespace)||i&&i!==d.selector&&("**"!==i||!d.selector)||(h.splice(s,1),d.selector&&h.delegateCount--,c.remove&&c.remove.call(e,d));o&&!h.length&&(c.teardown&&!1!==c.teardown.call(e,f,g.handle)||E.removeEvent(e,p,g.handle),delete l[p])}else for(p in l)E.event.remove(e,p+t[u],n,i,!0);E.isEmptyObject(l)&&J.remove(e,"handle events")}},dispatch:function(e){var t,n,i,r,s,o,a=E.event.fix(e),l=new Array(arguments.length),u=(J.get(this,"events")||{})[a.type]||[],d=E.event.special[a.type]||{};for(l[0]=a,t=1;t<arguments.length;t++)l[t]=arguments[t];if(a.delegateTarget=this,!d.preDispatch||!1!==d.preDispatch.call(this,a)){for(o=E.event.handlers.call(this,a,u),t=0;(r=o[t++])&&!a.isPropagationStopped();)for(a.currentTarget=r.elem,n=0;(s=r.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!1!==s.namespace&&!a.rnamespace.test(s.namespace)||(a.handleObj=s,a.data=s.data,void 0!==(i=((E.event.special[s.origType]||{}).handle||s.handler).apply(r.elem,l))&&!1===(a.result=i)&&(a.preventDefault(),a.stopPropagation()));return d.postDispatch&&d.postDispatch.call(this,a),a.result}},handlers:function(e,t){var n,i,r,s,o,a=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&e.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(s=[],o={},n=0;n<l;n++)void 0===o[r=(i=t[n]).selector+" "]&&(o[r]=i.needsContext?E(r,this).index(u)>-1:E.find(r,this,null,[u]).length),o[r]&&s.push(i);s.length&&a.push({elem:u,handlers:s})}return u=this,l<t.length&&a.push({elem:u,handlers:t.slice(l)}),a},addProp:function(e,t){Object.defineProperty(E.Event.prototype,e,{enumerable:!0,configurable:!0,get:y(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[E.expando]?e:new E.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return me.test(t.type)&&t.click&&P(t,"input")&&Ae(t,"click",Le),!1},trigger:function(e){var t=this||e;return me.test(t.type)&&t.click&&P(t,"input")&&Ae(t,"click"),!0},_default:function(e){var t=e.target;return me.test(t.type)&&t.click&&P(t,"input")&&J.get(t,"click")||P(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},E.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},E.Event=function(e,t){if(!(this instanceof E.Event))return new E.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Le:ke,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&E.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[E.expando]=!0},E.Event.prototype={constructor:E.Event,isDefaultPrevented:ke,isPropagationStopped:ke,isImmediatePropagationStopped:ke,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Le,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Le,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Le,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},E.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Ce.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Se.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},E.event.addProp),E.each({focus:"focusin",blur:"focusout"},(function(e,t){E.event.special[e]={setup:function(){return Ae(this,e,Pe),!1},trigger:function(){return Ae(this,e),!0},delegateType:t}})),E.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){E.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=this,r=e.relatedTarget,s=e.handleObj;return r&&(r===i||E.contains(i,r))||(e.type=s.origType,n=s.handler.apply(this,arguments),e.type=t),n}}})),E.fn.extend({on:function(e,t,n,i){return Ie(this,e,t,n,i)},one:function(e,t,n,i){return Ie(this,e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,E(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=ke),this.each((function(){E.event.remove(this,e,n,t)}))}});var De=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Me=/<script|<style|<link/i,Oe=/checked\s*(?:[^=]|=\s*.checked.)/i,Ne=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function je(e,t){return P(e,"table")&&P(11!==t.nodeType?t:t.firstChild,"tr")&&E(e).children("tbody")[0]||e}function Re(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function $e(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Ve(e,t){var n,i,r,s,o,a,l,u;if(1===t.nodeType){if(J.hasData(e)&&(s=J.access(e),o=J.set(t,s),u=s.events))for(r in delete o.handle,o.events={},u)for(n=0,i=u[r].length;n<i;n++)E.event.add(t,r,u[r][n]);Z.hasData(e)&&(a=Z.access(e),l=E.extend({},a),Z.set(t,l))}}function qe(e,t){var n=t.nodeName.toLowerCase();"input"===n&&me.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Fe(e,t,n,i){t=u.apply([],t);var r,s,o,a,l,d,c=0,h=e.length,p=h-1,f=t[0],m=y(f);if(m||h>1&&"string"==typeof f&&!v.checkClone&&Oe.test(f))return e.each((function(r){var s=e.eq(r);m&&(t[0]=f.call(this,r,s.html())),Fe(s,t,n,i)}));if(h&&(s=(r=Te(t,e[0].ownerDocument,!1,e,i)).firstChild,1===r.childNodes.length&&(r=s),s||i)){for(a=(o=E.map(be(r,"script"),Re)).length;c<h;c++)l=r,c!==p&&(l=E.clone(l,!0,!0),a&&E.merge(o,be(l,"script"))),n.call(e[c],l,c);if(a)for(d=o[o.length-1].ownerDocument,E.map(o,$e),c=0;c<a;c++)l=o[c],ve.test(l.type||"")&&!J.access(l,"globalEval")&&E.contains(d,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?E._evalUrl&&!l.noModule&&E._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")}):x(l.textContent.replace(Ne,""),l,d))}return e}function ze(e,t,n){for(var i,r=t?E.filter(t,e):e,s=0;null!=(i=r[s]);s++)n||1!==i.nodeType||E.cleanData(be(i)),i.parentNode&&(n&&ae(i)&&_e(be(i,"script")),i.parentNode.removeChild(i));return e}E.extend({htmlPrefilter:function(e){return e.replace(De,"<$1></$2>")},clone:function(e,t,n){var i,r,s,o,a=e.cloneNode(!0),l=ae(e);if(!(v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||E.isXMLDoc(e)))for(o=be(a),i=0,r=(s=be(e)).length;i<r;i++)qe(s[i],o[i]);if(t)if(n)for(s=s||be(e),o=o||be(a),i=0,r=s.length;i<r;i++)Ve(s[i],o[i]);else Ve(e,a);return(o=be(a,"script")).length>0&&_e(o,!l&&be(e,"script")),a},cleanData:function(e){for(var t,n,i,r=E.event.special,s=0;void 0!==(n=e[s]);s++)if(G(n)){if(t=n[J.expando]){if(t.events)for(i in t.events)r[i]?E.event.remove(n,i):E.removeEvent(n,i,t.handle);n[J.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),E.fn.extend({detach:function(e){return ze(this,e,!0)},remove:function(e){return ze(this,e)},text:function(e){return W(this,(function(e){return void 0===e?E.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Fe(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||je(this,e).appendChild(e)}))},prepend:function(){return Fe(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=je(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Fe(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Fe(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(E.cleanData(be(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return E.clone(this,e,t)}))},html:function(e){return W(this,(function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Me.test(e)&&!ye[(ge.exec(e)||["",""])[1].toLowerCase()]){e=E.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(E.cleanData(be(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Fe(this,arguments,(function(t){var n=this.parentNode;E.inArray(this,e)<0&&(E.cleanData(be(this)),n&&n.replaceChild(t,this))}),e)}}),E.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){E.fn[e]=function(e){for(var n,i=[],r=E(e),s=r.length-1,o=0;o<=s;o++)n=o===s?this:this.clone(!0),E(r[o])[t](n),d.apply(i,n.get());return this.pushStack(i)}}));var Be=new RegExp("^("+ie+")(?!px)[a-z%]+$","i"),We=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},Ue=new RegExp(se.join("|"),"i");function Xe(e,t,n){var i,r,s,o,a=e.style;return(n=n||We(e))&&(""!==(o=n.getPropertyValue(t)||n[t])||ae(e)||(o=E.style(e,t)),!v.pixelBoxStyles()&&Be.test(o)&&Ue.test(t)&&(i=a.width,r=a.minWidth,s=a.maxWidth,a.minWidth=a.maxWidth=a.width=o,o=n.width,a.width=i,a.minWidth=r,a.maxWidth=s)),void 0!==o?o+"":o}function Ye(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(d){u.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",d.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",oe.appendChild(u).appendChild(d);var e=n.getComputedStyle(d);i="1%"!==e.top,l=12===t(e.marginLeft),d.style.right="60%",a=36===t(e.right),r=36===t(e.width),d.style.position="absolute",s=12===t(d.offsetWidth/3),oe.removeChild(u),d=null}}function t(e){return Math.round(parseFloat(e))}var i,r,s,a,l,u=o.createElement("div"),d=o.createElement("div");d.style&&(d.style.backgroundClip="content-box",d.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===d.style.backgroundClip,E.extend(v,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),a},pixelPosition:function(){return e(),i},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),s}}))}();var Ke=["Webkit","Moz","ms"],Ge=o.createElement("div").style,Qe={};function Je(e){var t=E.cssProps[e]||Qe[e];return t||(e in Ge?e:Qe[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Ke.length;n--;)if((e=Ke[n]+t)in Ge)return e}(e)||e)}var Ze=/^(none|table(?!-c[ea]).+)/,et=/^--/,tt={position:"absolute",visibility:"hidden",display:"block"},nt={letterSpacing:"0",fontWeight:"400"};function it(e,t,n){var i=re.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function rt(e,t,n,i,r,s){var o="width"===t?1:0,a=0,l=0;if(n===(i?"border":"content"))return 0;for(;o<4;o+=2)"margin"===n&&(l+=E.css(e,n+se[o],!0,r)),i?("content"===n&&(l-=E.css(e,"padding"+se[o],!0,r)),"margin"!==n&&(l-=E.css(e,"border"+se[o]+"Width",!0,r))):(l+=E.css(e,"padding"+se[o],!0,r),"padding"!==n?l+=E.css(e,"border"+se[o]+"Width",!0,r):a+=E.css(e,"border"+se[o]+"Width",!0,r));return!i&&s>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-s-l-a-.5))||0),l}function st(e,t,n){var i=We(e),r=(!v.boxSizingReliable()||n)&&"border-box"===E.css(e,"boxSizing",!1,i),s=r,o=Xe(e,t,i),a="offset"+t[0].toUpperCase()+t.slice(1);if(Be.test(o)){if(!n)return o;o="auto"}return(!v.boxSizingReliable()&&r||"auto"===o||!parseFloat(o)&&"inline"===E.css(e,"display",!1,i))&&e.getClientRects().length&&(r="border-box"===E.css(e,"boxSizing",!1,i),(s=a in e)&&(o=e[a])),(o=parseFloat(o)||0)+rt(e,t,n||(r?"border":"content"),s,i,o)+"px"}function ot(e,t,n,i,r){return new ot.prototype.init(e,t,n,i,r)}E.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Xe(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,s,o,a=K(t),l=et.test(t),u=e.style;if(l||(t=Je(a)),o=E.cssHooks[t]||E.cssHooks[a],void 0===n)return o&&"get"in o&&void 0!==(r=o.get(e,!1,i))?r:u[t];"string"===(s=typeof n)&&(r=re.exec(n))&&r[1]&&(n=ce(e,t,r),s="number"),null!=n&&n==n&&("number"!==s||l||(n+=r&&r[3]||(E.cssNumber[a]?"":"px")),v.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),o&&"set"in o&&void 0===(n=o.set(e,n,i))||(l?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,i){var r,s,o,a=K(t);return et.test(t)||(t=Je(a)),(o=E.cssHooks[t]||E.cssHooks[a])&&"get"in o&&(r=o.get(e,!0,n)),void 0===r&&(r=Xe(e,t,i)),"normal"===r&&t in nt&&(r=nt[t]),""===n||n?(s=parseFloat(r),!0===n||isFinite(s)?s||0:r):r}}),E.each(["height","width"],(function(e,t){E.cssHooks[t]={get:function(e,n,i){if(n)return!Ze.test(E.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?st(e,t,i):de(e,tt,(function(){return st(e,t,i)}))},set:function(e,n,i){var r,s=We(e),o=!v.scrollboxSize()&&"absolute"===s.position,a=(o||i)&&"border-box"===E.css(e,"boxSizing",!1,s),l=i?rt(e,t,i,a,s):0;return a&&o&&(l-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(s[t])-rt(e,t,"border",!1,s)-.5)),l&&(r=re.exec(n))&&"px"!==(r[3]||"px")&&(e.style[t]=n,n=E.css(e,t)),it(0,n,l)}}})),E.cssHooks.marginLeft=Ye(v.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(Xe(e,"marginLeft"))||e.getBoundingClientRect().left-de(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),E.each({margin:"",padding:"",border:"Width"},(function(e,t){E.cssHooks[e+t]={expand:function(n){for(var i=0,r={},s="string"==typeof n?n.split(" "):[n];i<4;i++)r[e+se[i]+t]=s[i]||s[i-2]||s[0];return r}},"margin"!==e&&(E.cssHooks[e+t].set=it)})),E.fn.extend({css:function(e,t){return W(this,(function(e,t,n){var i,r,s={},o=0;if(Array.isArray(t)){for(i=We(e),r=t.length;o<r;o++)s[t[o]]=E.css(e,t[o],!1,i);return s}return void 0!==n?E.style(e,t,n):E.css(e,t)}),e,t,arguments.length>1)}}),E.Tween=ot,ot.prototype={constructor:ot,init:function(e,t,n,i,r,s){this.elem=e,this.prop=n,this.easing=r||E.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=s||(E.cssNumber[n]?"":"px")},cur:function(){var e=ot.propHooks[this.prop];return e&&e.get?e.get(this):ot.propHooks._default.get(this)},run:function(e){var t,n=ot.propHooks[this.prop];return this.options.duration?this.pos=t=E.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ot.propHooks._default.set(this),this}},ot.prototype.init.prototype=ot.prototype,ot.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=E.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){E.fx.step[e.prop]?E.fx.step[e.prop](e):1!==e.elem.nodeType||!E.cssHooks[e.prop]&&null==e.elem.style[Je(e.prop)]?e.elem[e.prop]=e.now:E.style(e.elem,e.prop,e.now+e.unit)}}},ot.propHooks.scrollTop=ot.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},E.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},E.fx=ot.prototype.init,E.fx.step={};var at,lt,ut=/^(?:toggle|show|hide)$/,dt=/queueHooks$/;function ct(){lt&&(!1===o.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(ct):n.setTimeout(ct,E.fx.interval),E.fx.tick())}function ht(){return n.setTimeout((function(){at=void 0})),at=Date.now()}function pt(e,t){var n,i=0,r={height:e};for(t=t?1:0;i<4;i+=2-t)r["margin"+(n=se[i])]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function ft(e,t,n){for(var i,r=(mt.tweeners[t]||[]).concat(mt.tweeners["*"]),s=0,o=r.length;s<o;s++)if(i=r[s].call(n,t,e))return i}function mt(e,t,n){var i,r,s=0,o=mt.prefilters.length,a=E.Deferred().always((function(){delete l.elem})),l=function(){if(r)return!1;for(var t=at||ht(),n=Math.max(0,u.startTime+u.duration-t),i=1-(n/u.duration||0),s=0,o=u.tweens.length;s<o;s++)u.tweens[s].run(i);return a.notifyWith(e,[u,i,n]),i<1&&o?n:(o||a.notifyWith(e,[u,1,0]),a.resolveWith(e,[u]),!1)},u=a.promise({elem:e,props:E.extend({},t),opts:E.extend(!0,{specialEasing:{},easing:E.easing._default},n),originalProperties:t,originalOptions:n,startTime:at||ht(),duration:n.duration,tweens:[],createTween:function(t,n){var i=E.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(i),i},stop:function(t){var n=0,i=t?u.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)u.tweens[n].run(1);return t?(a.notifyWith(e,[u,1,0]),a.resolveWith(e,[u,t])):a.rejectWith(e,[u,t]),this}}),d=u.props;for(!function(e,t){var n,i,r,s,o;for(n in e)if(r=t[i=K(n)],s=e[n],Array.isArray(s)&&(r=s[1],s=e[n]=s[0]),n!==i&&(e[i]=s,delete e[n]),(o=E.cssHooks[i])&&"expand"in o)for(n in s=o.expand(s),delete e[i],s)n in e||(e[n]=s[n],t[n]=r);else t[i]=r}(d,u.opts.specialEasing);s<o;s++)if(i=mt.prefilters[s].call(u,e,d,u.opts))return y(i.stop)&&(E._queueHooks(u.elem,u.opts.queue).stop=i.stop.bind(i)),i;return E.map(d,ft,u),y(u.opts.start)&&u.opts.start.call(e,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),E.fx.timer(E.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u}E.Animation=E.extend(mt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ce(n.elem,e,re.exec(t),n),n}]},tweener:function(e,t){y(e)?(t=e,e=["*"]):e=e.match(R);for(var n,i=0,r=e.length;i<r;i++)n=e[i],mt.tweeners[n]=mt.tweeners[n]||[],mt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,r,s,o,a,l,u,d,c="width"in t||"height"in t,h=this,p={},f=e.style,m=e.nodeType&&ue(e),g=J.get(e,"fxshow");for(i in n.queue||(null==(o=E._queueHooks(e,"fx")).unqueued&&(o.unqueued=0,a=o.empty.fire,o.empty.fire=function(){o.unqueued||a()}),o.unqueued++,h.always((function(){h.always((function(){o.unqueued--,E.queue(e,"fx").length||o.empty.fire()}))}))),t)if(r=t[i],ut.test(r)){if(delete t[i],s=s||"toggle"===r,r===(m?"hide":"show")){if("show"!==r||!g||void 0===g[i])continue;m=!0}p[i]=g&&g[i]||E.style(e,i)}if((l=!E.isEmptyObject(t))||!E.isEmptyObject(p))for(i in c&&1===e.nodeType&&(n.overflow=[f.overflow,f.overflowX,f.overflowY],null==(u=g&&g.display)&&(u=J.get(e,"display")),"none"===(d=E.css(e,"display"))&&(u?d=u:(fe([e],!0),u=e.style.display||u,d=E.css(e,"display"),fe([e]))),("inline"===d||"inline-block"===d&&null!=u)&&"none"===E.css(e,"float")&&(l||(h.done((function(){f.display=u})),null==u&&(d=f.display,u="none"===d?"":d)),f.display="inline-block")),n.overflow&&(f.overflow="hidden",h.always((function(){f.overflow=n.overflow[0],f.overflowX=n.overflow[1],f.overflowY=n.overflow[2]}))),l=!1,p)l||(g?"hidden"in g&&(m=g.hidden):g=J.access(e,"fxshow",{display:u}),s&&(g.hidden=!m),m&&fe([e],!0),h.done((function(){for(i in m||fe([e]),J.remove(e,"fxshow"),p)E.style(e,i,p[i])}))),l=ft(m?g[i]:0,i,h),i in g||(g[i]=l.start,m&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?mt.prefilters.unshift(e):mt.prefilters.push(e)}}),E.speed=function(e,t,n){var i=e&&"object"==typeof e?E.extend({},e):{complete:n||!n&&t||y(e)&&e,duration:e,easing:n&&t||t&&!y(t)&&t};return E.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in E.fx.speeds?i.duration=E.fx.speeds[i.duration]:i.duration=E.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){y(i.old)&&i.old.call(this),i.queue&&E.dequeue(this,i.queue)},i},E.fn.extend({fadeTo:function(e,t,n,i){return this.filter(ue).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var r=E.isEmptyObject(e),s=E.speed(t,n,i),o=function(){var t=mt(this,E.extend({},e),s);(r||J.get(this,"finish"))&&t.stop(!0)};return o.finish=o,r||!1===s.queue?this.each(o):this.queue(s.queue,o)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each((function(){var t=!0,r=null!=e&&e+"queueHooks",s=E.timers,o=J.get(this);if(r)o[r]&&o[r].stop&&i(o[r]);else for(r in o)o[r]&&o[r].stop&&dt.test(r)&&i(o[r]);for(r=s.length;r--;)s[r].elem!==this||null!=e&&s[r].queue!==e||(s[r].anim.stop(n),t=!1,s.splice(r,1));!t&&n||E.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=J.get(this),i=n[e+"queue"],r=n[e+"queueHooks"],s=E.timers,o=i?i.length:0;for(n.finish=!0,E.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=s.length;t--;)s[t].elem===this&&s[t].queue===e&&(s[t].anim.stop(!0),s.splice(t,1));for(t=0;t<o;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish}))}}),E.each(["toggle","show","hide"],(function(e,t){var n=E.fn[t];E.fn[t]=function(e,i,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(pt(t,!0),e,i,r)}})),E.each({slideDown:pt("show"),slideUp:pt("hide"),slideToggle:pt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){E.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}})),E.timers=[],E.fx.tick=function(){var e,t=0,n=E.timers;for(at=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||E.fx.stop(),at=void 0},E.fx.timer=function(e){E.timers.push(e),E.fx.start()},E.fx.interval=13,E.fx.start=function(){lt||(lt=!0,ct())},E.fx.stop=function(){lt=null},E.fx.speeds={slow:600,fast:200,_default:400},E.fn.delay=function(e,t){return e=E.fx&&E.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,i){var r=n.setTimeout(t,e);i.stop=function(){n.clearTimeout(r)}}))},function(){var e=o.createElement("input"),t=o.createElement("select").appendChild(o.createElement("option"));e.type="checkbox",v.checkOn=""!==e.value,v.optSelected=t.selected,(e=o.createElement("input")).value="t",e.type="radio",v.radioValue="t"===e.value}();var gt,vt=E.expr.attrHandle;E.fn.extend({attr:function(e,t){return W(this,E.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){E.removeAttr(this,e)}))}}),E.extend({attr:function(e,t,n){var i,r,s=e.nodeType;if(3!==s&&8!==s&&2!==s)return void 0===e.getAttribute?E.prop(e,t,n):(1===s&&E.isXMLDoc(e)||(r=E.attrHooks[t.toLowerCase()]||(E.expr.match.bool.test(t)?gt:void 0)),void 0!==n?null===n?void E.removeAttr(e,t):r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(i=r.get(e,t))?i:null==(i=E.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!v.radioValue&&"radio"===t&&P(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,r=t&&t.match(R);if(r&&1===e.nodeType)for(;n=r[i++];)e.removeAttribute(n)}}),gt={set:function(e,t,n){return!1===t?E.removeAttr(e,n):e.setAttribute(n,n),n}},E.each(E.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=vt[t]||E.find.attr;vt[t]=function(e,t,i){var r,s,o=t.toLowerCase();return i||(s=vt[o],vt[o]=r,r=null!=n(e,t,i)?o:null,vt[o]=s),r}}));var yt=/^(?:input|select|textarea|button)$/i,bt=/^(?:a|area)$/i;function _t(e){return(e.match(R)||[]).join(" ")}function xt(e){return e.getAttribute&&e.getAttribute("class")||""}function wt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(R)||[]}E.fn.extend({prop:function(e,t){return W(this,E.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[E.propFix[e]||e]}))}}),E.extend({prop:function(e,t,n){var i,r,s=e.nodeType;if(3!==s&&8!==s&&2!==s)return 1===s&&E.isXMLDoc(e)||(t=E.propFix[t]||t,r=E.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=E.find.attr(e,"tabindex");return t?parseInt(t,10):yt.test(e.nodeName)||bt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(E.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),E.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){E.propFix[this.toLowerCase()]=this})),E.fn.extend({addClass:function(e){var t,n,i,r,s,o,a,l=0;if(y(e))return this.each((function(t){E(this).addClass(e.call(this,t,xt(this)))}));if((t=wt(e)).length)for(;n=this[l++];)if(r=xt(n),i=1===n.nodeType&&" "+_t(r)+" "){for(o=0;s=t[o++];)i.indexOf(" "+s+" ")<0&&(i+=s+" ");r!==(a=_t(i))&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,i,r,s,o,a,l=0;if(y(e))return this.each((function(t){E(this).removeClass(e.call(this,t,xt(this)))}));if(!arguments.length)return this.attr("class","");if((t=wt(e)).length)for(;n=this[l++];)if(r=xt(n),i=1===n.nodeType&&" "+_t(r)+" "){for(o=0;s=t[o++];)for(;i.indexOf(" "+s+" ")>-1;)i=i.replace(" "+s+" "," ");r!==(a=_t(i))&&n.setAttribute("class",a)}return this},toggleClass:function(e,t){var n=typeof e,i="string"===n||Array.isArray(e);return"boolean"==typeof t&&i?t?this.addClass(e):this.removeClass(e):y(e)?this.each((function(n){E(this).toggleClass(e.call(this,n,xt(this),t),t)})):this.each((function(){var t,r,s,o;if(i)for(r=0,s=E(this),o=wt(e);t=o[r++];)s.hasClass(t)?s.removeClass(t):s.addClass(t);else void 0!==e&&"boolean"!==n||((t=xt(this))&&J.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":J.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+_t(xt(n))+" ").indexOf(t)>-1)return!0;return!1}});var Et=/\r/g;E.fn.extend({val:function(e){var t,n,i,r=this[0];return arguments.length?(i=y(e),this.each((function(n){var r;1===this.nodeType&&(null==(r=i?e.call(this,n,E(this).val()):e)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=E.map(r,(function(e){return null==e?"":e+""}))),(t=E.valHooks[this.type]||E.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))}))):r?(t=E.valHooks[r.type]||E.valHooks[r.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(Et,""):null==n?"":n:void 0}}),E.extend({valHooks:{option:{get:function(e){var t=E.find.attr(e,"value");return null!=t?t:_t(E.text(e))}},select:{get:function(e){var t,n,i,r=e.options,s=e.selectedIndex,o="select-one"===e.type,a=o?null:[],l=o?s+1:r.length;for(i=s<0?l:o?s:0;i<l;i++)if(((n=r[i]).selected||i===s)&&!n.disabled&&(!n.parentNode.disabled||!P(n.parentNode,"optgroup"))){if(t=E(n).val(),o)return t;a.push(t)}return a},set:function(e,t){for(var n,i,r=e.options,s=E.makeArray(t),o=r.length;o--;)((i=r[o]).selected=E.inArray(E.valHooks.option.get(i),s)>-1)&&(n=!0);return n||(e.selectedIndex=-1),s}}}}),E.each(["radio","checkbox"],(function(){E.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=E.inArray(E(e).val(),t)>-1}},v.checkOn||(E.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),v.focusin="onfocusin"in n;var Tt=/^(?:focusinfocus|focusoutblur)$/,Ct=function(e){e.stopPropagation()};E.extend(E.event,{trigger:function(e,t,i,r){var s,a,l,u,d,c,h,p,m=[i||o],g=f.call(e,"type")?e.type:e,v=f.call(e,"namespace")?e.namespace.split("."):[];if(a=p=l=i=i||o,3!==i.nodeType&&8!==i.nodeType&&!Tt.test(g+E.event.triggered)&&(g.indexOf(".")>-1&&(v=g.split("."),g=v.shift(),v.sort()),d=g.indexOf(":")<0&&"on"+g,(e=e[E.expando]?e:new E.Event(g,"object"==typeof e&&e)).isTrigger=r?2:3,e.namespace=v.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),t=null==t?[e]:E.makeArray(t,[e]),h=E.event.special[g]||{},r||!h.trigger||!1!==h.trigger.apply(i,t))){if(!r&&!h.noBubble&&!b(i)){for(u=h.delegateType||g,Tt.test(u+g)||(a=a.parentNode);a;a=a.parentNode)m.push(a),l=a;l===(i.ownerDocument||o)&&m.push(l.defaultView||l.parentWindow||n)}for(s=0;(a=m[s++])&&!e.isPropagationStopped();)p=a,e.type=s>1?u:h.bindType||g,(c=(J.get(a,"events")||{})[e.type]&&J.get(a,"handle"))&&c.apply(a,t),(c=d&&a[d])&&c.apply&&G(a)&&(e.result=c.apply(a,t),!1===e.result&&e.preventDefault());return e.type=g,r||e.isDefaultPrevented()||h._default&&!1!==h._default.apply(m.pop(),t)||!G(i)||d&&y(i[g])&&!b(i)&&((l=i[d])&&(i[d]=null),E.event.triggered=g,e.isPropagationStopped()&&p.addEventListener(g,Ct),i[g](),e.isPropagationStopped()&&p.removeEventListener(g,Ct),E.event.triggered=void 0,l&&(i[d]=l)),e.result}},simulate:function(e,t,n){var i=E.extend(new E.Event,n,{type:e,isSimulated:!0});E.event.trigger(i,null,t)}}),E.fn.extend({trigger:function(e,t){return this.each((function(){E.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return E.event.trigger(e,t,n,!0)}}),v.focusin||E.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){E.event.simulate(t,e.target,E.event.fix(e))};E.event.special[t]={setup:function(){var i=this.ownerDocument||this,r=J.access(i,t);r||i.addEventListener(e,n,!0),J.access(i,t,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=J.access(i,t)-1;r?J.access(i,t,r):(i.removeEventListener(e,n,!0),J.remove(i,t))}}}));var St=n.location,Ht=Date.now(),Lt=/\?/;E.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||E.error("Invalid XML: "+e),t};var kt=/\[\]$/,Pt=/\r?\n/g,It=/^(?:submit|button|image|reset|file)$/i,At=/^(?:input|select|textarea|keygen)/i;function Dt(e,t,n,i){var r;if(Array.isArray(t))E.each(t,(function(t,r){n||kt.test(e)?i(e,r):Dt(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,n,i)}));else if(n||"object"!==w(t))i(e,t);else for(r in t)Dt(e+"["+r+"]",t[r],n,i)}E.param=function(e,t){var n,i=[],r=function(e,t){var n=y(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!E.isPlainObject(e))E.each(e,(function(){r(this.name,this.value)}));else for(n in e)Dt(n,e[n],t,r);return i.join("&")},E.fn.extend({serialize:function(){return E.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=E.prop(this,"elements");return e?E.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!E(this).is(":disabled")&&At.test(this.nodeName)&&!It.test(e)&&(this.checked||!me.test(e))})).map((function(e,t){var n=E(this).val();return null==n?null:Array.isArray(n)?E.map(n,(function(e){return{name:t.name,value:e.replace(Pt,"\r\n")}})):{name:t.name,value:n.replace(Pt,"\r\n")}})).get()}});var Mt=/%20/g,Ot=/#.*$/,Nt=/([?&])_=[^&]*/,jt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Rt=/^(?:GET|HEAD)$/,$t=/^\/\//,Vt={},qt={},Ft="*/".concat("*"),zt=o.createElement("a");function Bt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,r=0,s=t.toLowerCase().match(R)||[];if(y(n))for(;i=s[r++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function Wt(e,t,n,i){var r={},s=e===qt;function o(a){var l;return r[a]=!0,E.each(e[a]||[],(function(e,a){var u=a(t,n,i);return"string"!=typeof u||s||r[u]?s?!(l=u):void 0:(t.dataTypes.unshift(u),o(u),!1)})),l}return o(t.dataTypes[0])||!r["*"]&&o("*")}function Ut(e,t){var n,i,r=E.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:i||(i={}))[n]=t[n]);return i&&E.extend(!0,e,i),e}zt.href=St.href,E.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:St.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(St.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ft,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":E.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Ut(Ut(e,E.ajaxSettings),t):Ut(E.ajaxSettings,e)},ajaxPrefilter:Bt(Vt),ajaxTransport:Bt(qt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var i,r,s,a,l,u,d,c,h,p,f=E.ajaxSetup({},t),m=f.context||f,g=f.context&&(m.nodeType||m.jquery)?E(m):E.event,v=E.Deferred(),y=E.Callbacks("once memory"),b=f.statusCode||{},_={},x={},w="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(d){if(!a)for(a={};t=jt.exec(s);)a[t[1].toLowerCase()+" "]=(a[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=a[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return d?s:null},setRequestHeader:function(e,t){return null==d&&(e=x[e.toLowerCase()]=x[e.toLowerCase()]||e,_[e]=t),this},overrideMimeType:function(e){return null==d&&(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(d)T.always(e[T.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||w;return i&&i.abort(t),C(0,t),this}};if(v.promise(T),f.url=((e||f.url||St.href)+"").replace($t,St.protocol+"//"),f.type=t.method||t.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(R)||[""],null==f.crossDomain){u=o.createElement("a");try{u.href=f.url,u.href=u.href,f.crossDomain=zt.protocol+"//"+zt.host!=u.protocol+"//"+u.host}catch(e){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=E.param(f.data,f.traditional)),Wt(Vt,f,t,T),d)return T;for(h in(c=E.event&&f.global)&&0==E.active++&&E.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!Rt.test(f.type),r=f.url.replace(Ot,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(Mt,"+")):(p=f.url.slice(r.length),f.data&&(f.processData||"string"==typeof f.data)&&(r+=(Lt.test(r)?"&":"?")+f.data,delete f.data),!1===f.cache&&(r=r.replace(Nt,"$1"),p=(Lt.test(r)?"&":"?")+"_="+Ht+++p),f.url=r+p),f.ifModified&&(E.lastModified[r]&&T.setRequestHeader("If-Modified-Since",E.lastModified[r]),E.etag[r]&&T.setRequestHeader("If-None-Match",E.etag[r])),(f.data&&f.hasContent&&!1!==f.contentType||t.contentType)&&T.setRequestHeader("Content-Type",f.contentType),T.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Ft+"; q=0.01":""):f.accepts["*"]),f.headers)T.setRequestHeader(h,f.headers[h]);if(f.beforeSend&&(!1===f.beforeSend.call(m,T,f)||d))return T.abort();if(w="abort",y.add(f.complete),T.done(f.success),T.fail(f.error),i=Wt(qt,f,t,T)){if(T.readyState=1,c&&g.trigger("ajaxSend",[T,f]),d)return T;f.async&&f.timeout>0&&(l=n.setTimeout((function(){T.abort("timeout")}),f.timeout));try{d=!1,i.send(_,C)}catch(e){if(d)throw e;C(-1,e)}}else C(-1,"No Transport");function C(e,t,o,a){var u,h,p,_,x,w=t;d||(d=!0,l&&n.clearTimeout(l),i=void 0,s=a||"",T.readyState=e>0?4:0,u=e>=200&&e<300||304===e,o&&(_=function(e,t,n){for(var i,r,s,o,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(r in a)if(a[r]&&a[r].test(i)){l.unshift(r);break}if(l[0]in n)s=l[0];else{for(r in n){if(!l[0]||e.converters[r+" "+l[0]]){s=r;break}o||(o=r)}s=s||o}if(s)return s!==l[0]&&l.unshift(s),n[s]}(f,T,o)),_=function(e,t,n,i){var r,s,o,a,l,u={},d=e.dataTypes.slice();if(d[1])for(o in e.converters)u[o.toLowerCase()]=e.converters[o];for(s=d.shift();s;)if(e.responseFields[s]&&(n[e.responseFields[s]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=s,s=d.shift())if("*"===s)s=l;else if("*"!==l&&l!==s){if(!(o=u[l+" "+s]||u["* "+s]))for(r in u)if((a=r.split(" "))[1]===s&&(o=u[l+" "+a[0]]||u["* "+a[0]])){!0===o?o=u[r]:!0!==u[r]&&(s=a[0],d.unshift(a[1]));break}if(!0!==o)if(o&&e.throws)t=o(t);else try{t=o(t)}catch(e){return{state:"parsererror",error:o?e:"No conversion from "+l+" to "+s}}}return{state:"success",data:t}}(f,_,T,u),u?(f.ifModified&&((x=T.getResponseHeader("Last-Modified"))&&(E.lastModified[r]=x),(x=T.getResponseHeader("etag"))&&(E.etag[r]=x)),204===e||"HEAD"===f.type?w="nocontent":304===e?w="notmodified":(w=_.state,h=_.data,u=!(p=_.error))):(p=w,!e&&w||(w="error",e<0&&(e=0))),T.status=e,T.statusText=(t||w)+"",u?v.resolveWith(m,[h,w,T]):v.rejectWith(m,[T,w,p]),T.statusCode(b),b=void 0,c&&g.trigger(u?"ajaxSuccess":"ajaxError",[T,f,u?h:p]),y.fireWith(m,[T,w]),c&&(g.trigger("ajaxComplete",[T,f]),--E.active||E.event.trigger("ajaxStop")))}return T},getJSON:function(e,t,n){return E.get(e,t,n,"json")},getScript:function(e,t){return E.get(e,void 0,t,"script")}}),E.each(["get","post"],(function(e,t){E[t]=function(e,n,i,r){return y(n)&&(r=r||i,i=n,n=void 0),E.ajax(E.extend({url:e,type:t,dataType:r,data:n,success:i},E.isPlainObject(e)&&e))}})),E._evalUrl=function(e,t){return E.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){E.globalEval(e,t)}})},E.fn.extend({wrapAll:function(e){var t;return this[0]&&(y(e)&&(e=e.call(this[0])),t=E(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return y(e)?this.each((function(t){E(this).wrapInner(e.call(this,t))})):this.each((function(){var t=E(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=y(e);return this.each((function(n){E(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){E(this).replaceWith(this.childNodes)})),this}}),E.expr.pseudos.hidden=function(e){return!E.expr.pseudos.visible(e)},E.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},E.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var Xt={0:200,1223:204},Yt=E.ajaxSettings.xhr();v.cors=!!Yt&&"withCredentials"in Yt,v.ajax=Yt=!!Yt,E.ajaxTransport((function(e){var t,i;if(v.cors||Yt&&!e.crossDomain)return{send:function(r,s){var o,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(o in e.xhrFields)a[o]=e.xhrFields[o];for(o in e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest"),r)a.setRequestHeader(o,r[o]);t=function(e){return function(){t&&(t=i=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?s(0,"error"):s(a.status,a.statusText):s(Xt[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=t(),i=a.onerror=a.ontimeout=t("error"),void 0!==a.onabort?a.onabort=i:a.onreadystatechange=function(){4===a.readyState&&n.setTimeout((function(){t&&i()}))},t=t("abort");try{a.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),E.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),E.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return E.globalEval(e),e}}}),E.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),E.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(i,r){t=E("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&r("error"===e.type?404:200,e.type)}),o.head.appendChild(t[0])},abort:function(){n&&n()}}}));var Kt,Gt=[],Qt=/(=)\?(?=&|$)|\?\?/;E.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Gt.pop()||E.expando+"_"+Ht++;return this[e]=!0,e}}),E.ajaxPrefilter("json jsonp",(function(e,t,i){var r,s,o,a=!1!==e.jsonp&&(Qt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Qt.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=y(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Qt,"$1"+r):!1!==e.jsonp&&(e.url+=(Lt.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return o||E.error(r+" was not called"),o[0]},e.dataTypes[0]="json",s=n[r],n[r]=function(){o=arguments},i.always((function(){void 0===s?E(n).removeProp(r):n[r]=s,e[r]&&(e.jsonpCallback=t.jsonpCallback,Gt.push(r)),o&&y(s)&&s(o[0]),o=s=void 0})),"script"})),v.createHTMLDocument=((Kt=o.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Kt.childNodes.length),E.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(v.createHTMLDocument?((i=(t=o.implementation.createHTMLDocument("")).createElement("base")).href=o.location.href,t.head.appendChild(i)):t=o),s=!n&&[],(r=I.exec(e))?[t.createElement(r[1])]:(r=Te([e],t,s),s&&s.length&&E(s).remove(),E.merge([],r.childNodes)));var i,r,s},E.fn.load=function(e,t,n){var i,r,s,o=this,a=e.indexOf(" ");return a>-1&&(i=_t(e.slice(a)),e=e.slice(0,a)),y(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),o.length>0&&E.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done((function(e){s=arguments,o.html(i?E("<div>").append(E.parseHTML(e)).find(i):e)})).always(n&&function(e,t){o.each((function(){n.apply(this,s||[e.responseText,t,e])}))}),this},E.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){E.fn[t]=function(e){return this.on(t,e)}})),E.expr.pseudos.animated=function(e){return E.grep(E.timers,(function(t){return e===t.elem})).length},E.offset={setOffset:function(e,t,n){var i,r,s,o,a,l,u=E.css(e,"position"),d=E(e),c={};"static"===u&&(e.style.position="relative"),a=d.offset(),s=E.css(e,"top"),l=E.css(e,"left"),("absolute"===u||"fixed"===u)&&(s+l).indexOf("auto")>-1?(o=(i=d.position()).top,r=i.left):(o=parseFloat(s)||0,r=parseFloat(l)||0),y(t)&&(t=t.call(e,n,E.extend({},a))),null!=t.top&&(c.top=t.top-a.top+o),null!=t.left&&(c.left=t.left-a.left+r),"using"in t?t.using.call(e,c):d.css(c)}},E.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){E.offset.setOffset(this,e,t)}));var t,n,i=this[0];return i?i.getClientRects().length?(t=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,i=this[0],r={top:0,left:0};if("fixed"===E.css(i,"position"))t=i.getBoundingClientRect();else{for(t=this.offset(),n=i.ownerDocument,e=i.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===E.css(e,"position");)e=e.parentNode;e&&e!==i&&1===e.nodeType&&((r=E(e).offset()).top+=E.css(e,"borderTopWidth",!0),r.left+=E.css(e,"borderLeftWidth",!0))}return{top:t.top-r.top-E.css(i,"marginTop",!0),left:t.left-r.left-E.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===E.css(e,"position");)e=e.offsetParent;return e||oe}))}}),E.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;E.fn[e]=function(i){return W(this,(function(e,i,r){var s;if(b(e)?s=e:9===e.nodeType&&(s=e.defaultView),void 0===r)return s?s[t]:e[i];s?s.scrollTo(n?s.pageXOffset:r,n?r:s.pageYOffset):e[i]=r}),e,i,arguments.length)}})),E.each(["top","left"],(function(e,t){E.cssHooks[t]=Ye(v.pixelPosition,(function(e,n){if(n)return n=Xe(e,t),Be.test(n)?E(e).position()[t]+"px":n}))})),E.each({Height:"height",Width:"width"},(function(e,t){E.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,i){E.fn[i]=function(r,s){var o=arguments.length&&(n||"boolean"!=typeof r),a=n||(!0===r||!0===s?"margin":"border");return W(this,(function(t,n,r){var s;return b(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(s=t.documentElement,Math.max(t.body["scroll"+e],s["scroll"+e],t.body["offset"+e],s["offset"+e],s["client"+e])):void 0===r?E.css(t,n,a):E.style(t,n,r,a)}),t,o?r:void 0,o)}}))})),E.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){E.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}})),E.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),E.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),E.proxy=function(e,t){var n,i,r;if("string"==typeof t&&(n=e[t],t=e,e=n),y(e))return i=l.call(arguments,2),(r=function(){return e.apply(t||this,i.concat(l.call(arguments)))}).guid=e.guid=e.guid||E.guid++,r},E.holdReady=function(e){e?E.readyWait++:E.ready(!0)},E.isArray=Array.isArray,E.parseJSON=JSON.parse,E.nodeName=P,E.isFunction=y,E.isWindow=b,E.camelCase=K,E.type=w,E.now=Date.now,E.isNumeric=function(e){var t=E.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},void 0===(i=function(){return E}.apply(t,[]))||(e.exports=i);var Jt=n.jQuery,Zt=n.$;return E.noConflict=function(e){return n.$===E&&(n.$=Zt),e&&n.jQuery===E&&(n.jQuery=Jt),E},r||(n.jQuery=n.$=E),E}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.ContentRect=function(e){if("getBBox"in e){var t=e.getBBox();return Object.freeze({height:t.height,left:0,top:0,width:t.width})}var n=window.getComputedStyle(e);return Object.freeze({height:parseFloat(n.height||"0"),left:parseFloat(n.paddingLeft||"0"),top:parseFloat(n.paddingTop||"0"),width:parseFloat(n.width||"0")})}},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0}),n(4),n(17);const i=n(18);n(19);const r=[];e(".panel").get().forEach(e=>{r.push(new i.default(e))});const s=e(".initSliderHere").liquidSlider({min:-50,max:20,step:1,isVertical:!0});s.addView(r[0]),r[0].boundController=s;const o=e(".initSliderHere").liquidSlider({isReversed:!0});o.addView(r[1]),r[1].boundController=o;const a=e(".initSliderHere").liquidSlider({items:[1,{toString:()=>"two"},"<img src='https://img.icons8.com/cotton/2x/like--v1.png' alt='heart'>","last"],min:0,max:22,isRange:!0,isReversed:!1,isVertical:!0,withMarkup:!0});a.addView(r[2]),r[2].boundController=a;const l=e(".initSliderHere").liquidSlider({handlers:[{isEnd:!0,rangePair:"start"},{itemIndex:2,rangePair:0},{itemIndex:3,rangePair:3},{itemIndex:6}],showTooltips:!1,withMarkup:!0,isVertical:!1});l.addView(r[3]),r[3].boundController=l}).call(this,n(1))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(1),r=n(5),s=n(0);i.fn.liquidSlider=function(e){return new r.default(i(this).get()[0],Object.assign(Object.assign({},s.DEFAULT_SLIDER_PARAMS),e))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(6),r=n(15),s=n(0);t.default=class{constructor(e,t){var n;this._element=e,this.parameters=t,this._boundPassHandlerPositionChange=this._passHandlerPositionChange.bind(this),this._boundPassHandlerValueChange=this._passHandlerValueChange.bind(this);const o=new i.default(e,t);this._views=[o],this._model=new r.default(t),s.addListenerAfter("handlerValueChanged",this._boundPassHandlerValueChange,this._model),s.addListenerAfter("handlerPositionChanged",this._boundPassHandlerPositionChange,this._views[0]),this._passSliderData(),this._passHandlersData(o,null===(n=t)||void 0===n?void 0:n.handlers)}addViews(e){e.forEach(e=>{this.addView(e)})}addView(e){var t;this._views.push(e),s.addListenerAfter("handlerPositionChanged",this._boundPassHandlerPositionChange,e),e.passVisualProps(this.parameters),this._passSliderData(),this._passHandlersData(e,null===(t=this.parameters)||void 0===t?void 0:t.handlers)}_passSliderData(){this._views.forEach(e=>{e.passDataProps(this._model.getSliderData())})}_passHandlerPositionChange(e){this._model.handleHandlerPositionChanged(e)}_passHandlerValueChange(e){this._views.forEach(t=>{t.handlersValuesChangedListener(e)})}_passHandlersData(e,t){var n;const i=this._model.getHandlersData();(null===(n=t)||void 0===n?void 0:n.length)>0&&i.handlersArray.forEach((e,n)=>{i.handlersArray[n]=Object.assign(Object.assign({},t[n]),e)}),e.initHandlers(i)}addHandler(e,t){const n=this._model.addHandler(e);n&&this._addHandlerView(Object.assign(Object.assign({},n),{rangePair:t}))}_addHandlerView(e){this._views.forEach(t=>{t.addHandler(e)})}removeHandler(e){this._model.removeHandler(e)&&this._views.forEach(t=>{t.removeHandler(e)})}setMin(e){null!=e&&(this._model.setMinMax({min:e}),this._passSliderData())}setMax(e){null!=e&&(this._model.setMinMax({max:e}),this._passSliderData())}setStep(e){null!=e&&(this._model.setStep({step:e}),this._passSliderData())}setTooltipVisibility(e){null!=e&&this._views.forEach(t=>{t.passVisualProps({tooltipsVisible:e})})}setVertical(e){null!=e&&this._views.forEach(t=>{t.passVisualProps({isVertical:e})})}setMarkupVisibility(e){null!=e&&this._views.forEach(t=>{t.passVisualProps({withMarkup:e})})}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(7);t.default=class{constructor(e,t){this._element=e,this._slider=new i.default(this,t)}get body(){return this._element}handlerPositionChanged(e,t){return{view:this,index:e,position:t}}handlersValuesChangedListener(e){this._slider.setHandlersData([e])}initHandlers(e){this._slider.initHandlers(e),this._slider.createRanges()}passVisualProps(e){this._slider.update(e)}passDataProps(e){this._slider.update(e)}addHandler(e){this._slider.addHandler(e)}removeHandler(e){this._slider.removeHandler(e)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(8),r=n(0),s=n(11),o=n(13),a=n(14);class l{constructor(e,t){var n,i,r,s;this._parentView=e,this.isReversed=!1,this._rangePairStartKey="start",this._rangePairEndKey="end",this._step=.01,this._ranges=[],this._boundHandleWindowMouseOut=this._handleWindowMouseOut.bind(this),this._handleMouseMoveBound=this._handleMouseMove.bind(this),this.handlerSize=0,this.handlers=[],void 0!==(null===(n=t)||void 0===n?void 0:n.isVertical)&&(this.isVertical=t.isVertical),void 0!==(null===(i=t)||void 0===i?void 0:i.isReversed)&&(this.isReversed=t.isReversed),void 0!==(null===(r=t)||void 0===r?void 0:r.showTooltips)&&this.setTooltipsVisibility(t.showTooltips),void 0!==(null===(s=t)||void 0===s?void 0:s.withMarkup)&&(this._withMarkup=t.withMarkup),this._createElements(),this._setMouseEvents(),this._setResizeObserver()}get bodyElement(){return this._elements.body}get handlersContainer(){return this._elements.handlers}get scaleStart(){return this.isVertical?this._elements.scale.getBoundingClientRect().top:this._elements.scale.getBoundingClientRect().left}get scaleEnd(){return this.isVertical?this._elements.scale.getBoundingClientRect().bottom:this._elements.scale.getBoundingClientRect().right}get scaleBorderWidth(){return Number.parseFloat(getComputedStyle(this._elements.scale).getPropertyValue(`border-${this.offsetDirection}-width`))}get shrinkRatio(){return this.getWorkZoneLength()/this.getScaleLength()}get offsetDirection(){return this.isVertical?"top":"left"}get expandDimension(){return this.isVertical?"height":"width"}getScaleLength(){return Number.parseFloat(this._elements.scale.getBoundingClientRect()[this.expandDimension])}setOrientation(e){var t;const n=[this._elements];(null===(t=this._markup)||void 0===t?void 0:t.wrap)&&n.push({wrap:this._markup.wrap}),this.handlers.forEach(e=>{n.push(e.element),n.push(e.tooltip.element)}),this._ranges.forEach(e=>{n.push(e)});const i=this.getOrientationClass();this.isVertical=e;const r=this.getOrientationClass();n.forEach(e=>{Object.keys(e).forEach(t=>{var n;(null===(n=e[t])||void 0===n?void 0:n.classList)&&(e[t].classList.remove(i),e[t].classList.add(r))})})}setTooltipsVisibility(e){const t=null==e?this._tooltipsAlwaysVisible:e;this._tooltipsAlwaysVisible=t,this.handlers.forEach(e=>{e.setTooltipVisibility(t)})}getOrientationClass(){return this.isVertical?`${r.DEFAULT_SLIDER_CLASS}_vertical`:`${l._DEFAULT_CLASS}_horizontal`}calculateMouseRelativePos(e){const t=this.isVertical?e.clientY:e.clientX,n=this.handlerSize/2,i=(t-this.scaleStart-n)/this.shrinkRatio;return r.clamp(i/this.getScaleLength(),0,1)}clearRanges(){this._ranges.forEach(e=>{e.remove()}),this._ranges=[]}createRanges(){this.clearRanges(),this.handlers.forEach(e=>{const t=this._createRange(e);t&&this._ranges.push(t)})}initHandlers(e){this._clearHandlers(),this.handlers=e.handlersArray.map((t,n,i)=>{const r=new s.default(this,Object.assign(Object.assign({},t),{withTooltip:this._tooltipsAlwaysVisible}));return e.customHandlers||(2===i.length?(0===n&&(r.rangePair=this.isReversed?this._rangePairStartKey:1),1===n&&(r.rangePair=this.isReversed?this._rangePairEndKey:0)):r.rangePair=this.isReversed?this._rangePairEndKey:this._rangePairStartKey),r}),this._setHandlerSize(),this._initMarkup(),this.createRanges()}addHandler(e){if(!e)return;const t=new s.default(this,{handlerIndex:e.handlerIndex,item:e.item,positionPart:e.positionPart,rangePair:e.rangePair,withTooltip:this._tooltipsAlwaysVisible});this.handlers.push(t);const n=this._createRange(t);n&&this._ranges.push(n)}removeHandler(e){const t=this.handlers.findIndex(t=>t.index===e),n=this.handlers[t];this._ranges.filter(e=>e.hasHandler(n)).forEach(e=>{const t=this._ranges.indexOf(e);e.remove(),this._ranges.splice(t,1)}),n.remove(),this.handlers.splice(t,1)}getWorkZoneLength(){const{handlerSize:e}=this;return this.getScaleLength()-e}calculateHandlerOffset(e){return this.getWorkZoneLength()*e}calcRelativeHandlerSize(){return this.handlerSize/this.getWorkZoneLength()}setHandlersData(e){e.some(e=>null===e)||e.forEach(({index:e,item:t,relativeValue:n})=>{const i=this.handlers.findIndex(t=>t.index===e);-1!==i&&(this.handlers[i].setValue(t),this.handlers[i].setPosition(n))})}update(e){var t,n,i,r,s,o;Number.isFinite(null===(t=e)||void 0===t?void 0:t.step)&&(this._step=e.step),Number.isFinite(null===(n=e)||void 0===n?void 0:n.min)&&(this._min=e.min),Number.isFinite(null===(i=e)||void 0===i?void 0:i.max)&&(this._max=e.max),void 0!==(null===(r=e)||void 0===r?void 0:r.tooltipsVisible)&&this.setTooltipsVisibility(e.tooltipsVisible),void 0!==(null===(s=e)||void 0===s?void 0:s.isVertical)&&this.setOrientation(e.isVertical),void 0!==(null===(o=e)||void 0===o?void 0:o.withMarkup)&&(this._withMarkup=e.withMarkup),this._refreshElements()}addOnMouseDownListener(e){this._elements.body.removeEventListener("mousedown",this._handleMouseDown),r.addListenerAfter(this._handleMouseDown.name,e,this),this._elements.body.addEventListener("mousedown",this._handleMouseDown)}_setHandlerSize(){const e=this.handlers[0];this.handlerSize=e.size}_createElements(){const e=this._parentView.body;this._elements={wrap:document.createElement("div"),body:document.createElement("div"),scale:document.createElement("div"),handlers:document.createElement("div"),min:document.createElement("span"),max:document.createElement("span")};const{wrap:t}=this._elements;t.classList.add(r.DEFAULT_SLIDER_CLASS),e.replaceWith(t),Object.keys(this._elements).forEach(e=>{const n=this._elements[e];switch(n.classList.add(`${r.DEFAULT_SLIDER_CLASS}__${e}`),e){case"wrap":break;case"body":n.addEventListener("mousedown",l._preventDefault),t.append(n);break;case"min":case"max":t.append(n);break;default:this._elements.body.append(n)}}),this.setOrientation(this.isVertical)}_setMouseEvents(){document.body.addEventListener("mousedown",this._handleDocumentMouseDown.bind(this)),this._elements.body.addEventListener("mousedown",this._handleMouseDown.bind(this)),document.body.addEventListener("mouseup",this._handleMouseUp.bind(this))}_setResizeObserver(){this._resizeObserver=new i.ResizeObserver(this._refreshElements.bind(this)),this._resizeObserver.observe(this._elements.body)}_handleWindowMouseOut(e){"HTML"===e.target.nodeName&&document.body.removeEventListener("mousemove",this._handleMouseMoveBound)}_handleDocumentMouseDown(e){const t=e.target;this._elements.wrap.contains(t)||this._deactivateActiveHandler()}_handleMouseUp(){document.body.removeEventListener("mousemove",this._handleMouseMoveBound),document.body.removeEventListener("mouseout",this._handleWindowMouseOut)}_handleMouseDown(e){const t=this._getClosestToMouseHandler(e.clientX,e.clientY);return t?(this._activateHandler(t),this._activeHandler.body.focus(),this._handleMouseMove(e),document.body.addEventListener("mousemove",this._handleMouseMoveBound),window.addEventListener("mouseout",this._boundHandleWindowMouseOut),e):e}_handleMouseMove(e){const t=this._getClosestToMouseHandler(e.clientX,e.clientY);if(t!==this._activeHandler)return;this._activateHandler(t);const n=this.calculateMouseRelativePos(e);let i;const s=1%this._step,o=1-s;i=n>o&&0!==s?r.standardize(n,{min:o,max:1,step:s}):r.standardize(n,{min:0,max:o,step:this._step}),i!==r.roundToDecimal(t.positionPart,4)&&this._parentView.handlerPositionChanged(t.index,i)}_deactivateActiveHandler(){this._activateHandler(null)}_activateHandler(e){this._activeHandler&&this._activeHandler.setTooltipVisibility(this._tooltipsAlwaysVisible),this._activeHandler=e,e&&e.setTooltipVisibility(!0)}_getClosestToMouseHandler(e,t){return this.isVertical?this._findClosestHandler(t):this._findClosestHandler(e)}_findClosestHandler(e){let t=Number.MAX_VALUE,n=null;return this.handlers.forEach(i=>{const r=Math.abs(i.positionCoordinate-e);t>r&&(n=i,t=r)}),n}_findSuitableHandler(e){return this.handlers.find(t=>t.index===e.rangePair)}_createRange(e){if(null===e.rangePair)return null;const t=this._findSuitableHandler(e);return t||e.rangePair===this._rangePairStartKey||e.rangePair===this._rangePairEndKey?new o.default(this,this._elements.scale,e,t):null}_initMarkup(){this._markup=new a.default(this),this._updateMarkup()}_updateMarkup(){this._markup&&(this._markup.clearAllMarks(),this._withMarkup&&requestAnimationFrame(()=>{for(let e=0;e<=1;e=r.roundToDecimal(e+this._step,5)){const t=r.standardize(e,{min:0,max:1,step:this._step})*this.shrinkRatio;this._markup.addMark(t,this.calcRelativeHandlerSize())}}))}_clearHandlers(){this.clearRanges(),this._elements.handlers.innerHTML="",this.handlers=[]}_refreshElements(){var e,t;this._updateMarkup(),this._ranges.forEach(e=>{e.refreshPosition()}),this.handlers.forEach(e=>{e.refreshPosition()}),this._elements.min.innerText=null===(e=this._min)||void 0===e?void 0:e.toFixed(2),this._elements.max.innerText=null===(t=this._max)||void 0===t?void 0:t.toFixed(2)}}t.default=l,l._DEFAULT_CLASS="liquidSlider",l._preventDefault=e=>e.preventDefault()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(9),r=n(10),s=[],o=function(){function e(e){this.$$observationTargets=[],this.$$activeTargets=[],this.$$skippedTargets=[];var t=function(e){if(void 0===e)return"Failed to construct 'ResizeObserver': 1 argument required, but only 0 present.";if("function"!=typeof e)return"Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function."}(e);if(t)throw TypeError(t);this.$$callback=e,s.push(this)}return e.prototype.observe=function(e){var t=a("observe",e);if(t)throw TypeError(t);l(this.$$observationTargets,e)>0||(this.$$observationTargets.push(new i.ResizeObservation(e)),f())},e.prototype.unobserve=function(e){var t=a("unobserve",e);if(t)throw TypeError(t);var n=l(this.$$observationTargets,e);n<0||(this.$$observationTargets.splice(n,1),g())},e.prototype.disconnect=function(){this.$$observationTargets=[],this.$$activeTargets=[]},e}();function a(e,t){return void 0===t?"Failed to execute '"+e+"' on 'ResizeObserver': 1 argument required, but only 0 present.":t instanceof window.Element?void 0:"Failed to execute '"+e+"' on 'ResizeObserver': parameter 1 is not of type 'Element'."}function l(e,t){for(var n=0;n<e.length;n+=1)if(e[n].target===t)return n;return-1}t.ResizeObserver=o;var u,d=function(e){s.forEach((function(t){t.$$activeTargets=[],t.$$skippedTargets=[],t.$$observationTargets.forEach((function(n){n.isActive()&&(h(n.target)>e?t.$$activeTargets.push(n):t.$$skippedTargets.push(n))}))}))},c=function(){var e=1/0;return s.forEach((function(t){if(t.$$activeTargets.length){var n=[];t.$$activeTargets.forEach((function(t){var i=new r.ResizeObserverEntry(t.target);n.push(i),t.$$broadcastWidth=i.contentRect.width,t.$$broadcastHeight=i.contentRect.height;var s=h(t.target);s<e&&(e=s)})),t.$$callback(n,t),t.$$activeTargets=[]}})),e},h=function(e){for(var t=0;e.parentNode;)e=e.parentNode,t+=1;return t},p=function(){var e,t=0;for(d(t);s.some((function(e){return!!e.$$activeTargets.length}));)t=c(),d(t);s.some((function(e){return!!e.$$skippedTargets.length}))&&(e=new window.ErrorEvent("ResizeLoopError",{message:"ResizeObserver loop completed with undelivered notifications."}),window.dispatchEvent(e))},f=function(){u||m()},m=function(){u=window.requestAnimationFrame((function(){p(),m()}))},g=function(){u&&!s.some((function(e){return!!e.$$observationTargets.length}))&&(window.cancelAnimationFrame(u),u=void 0)};t.install=function(){return window.ResizeObserver=o}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(2),r=function(){function e(e){this.target=e,this.$$broadcastWidth=this.$$broadcastHeight=0}return Object.defineProperty(e.prototype,"broadcastWidth",{get:function(){return this.$$broadcastWidth},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"broadcastHeight",{get:function(){return this.$$broadcastHeight},enumerable:!0,configurable:!0}),e.prototype.isActive=function(){var e=i.ContentRect(this.target);return!!e&&(e.width!==this.broadcastWidth||e.height!==this.broadcastHeight)},e}();t.ResizeObservation=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=n(2),r=function(e){this.target=e,this.contentRect=i.ContentRect(e)};t.ResizeObserverEntry=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),r=n(12);class s{constructor(e,t){this.ownerSlider=e,this._additionalClasses=[],this.rangePair=t.rangePair,this.index=t.handlerIndex,this.positionPart=t.positionPart,this._createElement(e.handlersContainer);const n=void 0===t.withTooltip||t.withTooltip;this.tooltip=new r.default(this.element.wrap,this,{visibilityState:n,item:t.item}),this.setValue(t.item),requestAnimationFrame(this.refreshPosition.bind(this))}setValue(e){this.tooltip.value=e}get value(){return this.tooltip.value}get positionCoordinate(){return i.calculateElementCenter(this.element.body,this.ownerSlider.isVertical)}get body(){return this.element.body}get width(){return this.element.body.getBoundingClientRect().width}get height(){return this.element.body.getBoundingClientRect().height}_createElement(e){const t=document.createElement("div"),n=document.createElement("div"),i=this.ownerSlider.getOrientationClass();this.element={wrap:t,body:n},this.element.body.setAttribute("tabindex","-1"),t.classList.add(`${s._DEFAULT_CLASS}Container`,i),t.classList.add(...this._additionalClasses),e.appendChild(t),n.classList.add(`${s._DEFAULT_CLASS}Body`,i),t.appendChild(n)}get size(){return this[this.ownerSlider.expandDimension]}calculateOffset(){return this.ownerSlider.calculateHandlerOffset(this.positionPart)}_centerShift(e){const t=this.size,n=this.tooltip.getSize();return e-.5*Math.max(0,n-t)}_calculateAccurateOffset(){const e=this.calculateOffset();return this._centerShift(e)}refreshPosition(){const e=this._calculateAccurateOffset();this.element.wrap.style.removeProperty("left"),this.element.wrap.style.removeProperty("top"),this.element.wrap.style[this.ownerSlider.offsetDirection]=`${e}px`,this.tooltip.updateHTML()}setPosition(e){this.positionPart=e,this.element&&this.refreshPosition()}setTooltipVisibility(e){this.tooltip.setVisibility(e)}remove(){this.element.wrap.remove()}}t.default=s,s._DEFAULT_CLASS=`${i.DEFAULT_SLIDER_CLASS}__handler`},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0);class r{constructor(e,t,n){this.parentHandler=t,this._innerHTML="";const i=this._initDefaultParameters(),r=Object.assign(Object.assign({},i),n);this._createElement(e),this.value=r.item,this.setVisibility(void 0===r.visibilityState||r.visibilityState)}set value(e){this._value=e,this.innerHTML=e}get value(){return this._value}set innerHTML(e){this._innerHTML=`${e}`,this.updateHTML()}get element(){return this._element}get width(){return this.element.getBoundingClientRect().width}get height(){return this.element.getBoundingClientRect().height}_isSliderVertical(){return this.parentHandler.ownerSlider.isVertical}getSize(){return this._isSliderVertical()?this.height:this.width}setVisibility(e){e?this._show():this._hide()}updateHTML(){this._element.innerHTML=this._innerHTML}_initDefaultParameters(){return{additionalClasses:[],bodyHTML:this._innerHTML,withTooltip:!0,isEnd:!0}}_show(){this._element.classList.add(`${r.DEFAULT_CLASS}_visible`),this._element.classList.remove(`${r.DEFAULT_CLASS}_hidden`)}_hide(){this._element.classList.add(`${r.DEFAULT_CLASS}_hidden`),this._element.classList.remove(`${r.DEFAULT_CLASS}_visible`)}_createElement(e){const t=this.parentHandler.ownerSlider.getOrientationClass();this._element=document.createElement("div"),this._element.classList.add(`${r.DEFAULT_CLASS}`,t),this._element.innerHTML=this._innerHTML,e.appendChild(this._element)}}t.default=r,r.DEFAULT_CLASS=`${i.DEFAULT_SLIDER_CLASS}__handlerTooltip`},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0);class r{constructor(e,t,n,r){this.parentSlider=e,this.parentElement=t,this._handlerRefreshPositionName="refreshPosition",this._boundRefreshPosition=this.refreshPosition.bind(this),r?this._arrangeHandlers(n,r):(this.startHandler=i.HANDLER_PAIR_OPTIONS.get(n.rangePair)?n:null,this.endHandler=i.HANDLER_PAIR_OPTIONS.get(n.rangePair)?null:n),this._createElement(),requestAnimationFrame(this.refreshPosition.bind(this)),this.startHandler&&i.addListenerAfter(this._handlerRefreshPositionName,this._boundRefreshPosition,this.startHandler),this.endHandler&&i.addListenerAfter(this._handlerRefreshPositionName,this._boundRefreshPosition,this.endHandler)}_createElement(){const e=document.createElement("div"),t=this.parentSlider.getOrientationClass();this._element=e,e.classList.add(`${r._DEFAULT_CLASS}`,t),this.parentElement.appendChild(e)}refreshPosition(){const{parentSlider:e}=this,t=this.startHandler?this.startHandler.positionCoordinate-e.scaleStart:e.scaleBorderWidth,n=this.endHandler?this.endHandler.positionCoordinate-e.scaleStart:e.scaleEnd-e.scaleStart-e.scaleBorderWidth,i=Math.min(t,n),r=i,s=Math.max(t,n)-i;this._element.style.removeProperty("left"),this._element.style.removeProperty("top"),this._element.style.removeProperty("width"),this._element.style.removeProperty("height"),this._element.style[e.offsetDirection]=`${r}px`,this._element.style[e.expandDimension]=`${s}px`}_arrangeHandlers(e,t){e.positionPart<=t.positionPart?(this.startHandler=e,this.endHandler=t):(this.startHandler=t,this.endHandler=e)}hasHandler(e){return e===this.startHandler||e===this.endHandler}remove(){i.removeListener(this._handlerRefreshPositionName,this._boundRefreshPosition,this.startHandler),i.removeListener(this._handlerRefreshPositionName,this._boundRefreshPosition,this.endHandler),this._element.remove()}}t.default=r,r._DEFAULT_CLASS=`${i.DEFAULT_SLIDER_CLASS}__range`},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0);class r{constructor(e){this.ownerSlider=e,this.wrap=void 0,this._marks=[],this._createWrap()}clearAllMarks(){this._marks=[],this.wrap.innerHTML=""}addMark(e,t){const n=this._createMarkElement();this._marks.push(n);const i=this._calculateMarkOffset(e,t);n.style[this.ownerSlider.offsetDirection]=`${i}%`}_getMarkThickness(){const e=this.ownerSlider.expandDimension;return this._marks[0].getBoundingClientRect()[e]}_getRelativeMarkThickness(){const e=this.ownerSlider.shrinkRatio*(this._getMarkThickness()/this.ownerSlider.getScaleLength());return this.ownerSlider.getScaleLength()?e:0}_createWrap(){this.wrap=document.createElement("div"),this.wrap.classList.add(`${r._DEFAULT_CLASS}Wrap`,this.ownerSlider.getOrientationClass()),this.ownerSlider.bodyElement.insertBefore(this.wrap,this.ownerSlider.handlersContainer)}_createMarkElement(){const e=document.createElement("div");return e.classList.add(r._DEFAULT_CLASS,this.ownerSlider.getOrientationClass()),this.wrap.appendChild(e),e}_calculateMarkOffset(e,t){const n=this._getRelativeMarkThickness()/2;return Number((100*(e+t/2-n)).toFixed(4))}}t.default=r,r._DEFAULT_CLASS=`${i.DEFAULT_SLIDER_CLASS}__markup`},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0),r=n(16);t.default=class{constructor(e){var t,n,i,r,s;this._occupiedItems={},this._min=0,this._max=10,this._step=1,this._handlers=[],this.setMinMax(e),this.setStep(e),this.setItems(null===(t=e)||void 0===t?void 0:t.items),(null===(i=null===(n=e)||void 0===n?void 0:n.handlers)||void 0===i?void 0:i.length)?(this.withCustomHandlers=!0,this._createHandlers(e.handlers)):(this.withCustomHandlers=!1,this._generateDefaultHandlersItemIndexes((null===(r=e)||void 0===r?void 0:r.isRange)?2:1,null===(s=e)||void 0===s?void 0:s.values))}get min(){return this._min}get max(){return this._max}get range(){return this._max-this._min}get standardizeParams(){return{min:this._min,max:this._max,step:this._step}}updateHandlersPositions(){this._handlers.forEach(e=>{e.setItemIndex(i.standardize(e.itemIndex,this.standardizeParams))})}setItems(e){var t;(null===(t=e)||void 0===t?void 0:t.length)?(this._items=e,this._initItemsMinMax(e.length)):this._items=null}setStep(e){var t;(null===(t=e)||void 0===t?void 0:t.step)&&(e.items?this._step=Math.round(e.step):this._step=e.step,this.updateHandlersPositions())}setMinMax(e){var t,n,i,r,s,o;const a=(null===(t=e)||void 0===t?void 0:t.min)>this._max,l=(null===(n=e)||void 0===n?void 0:n.max)<this._min,u=a||l,d=(null===(i=e)||void 0===i?void 0:i.min)>(null===(r=e)||void 0===r?void 0:r.max);u||d||(void 0!==(null===(s=e)||void 0===s?void 0:s.min)&&(this._min=e.min),void 0!==(null===(o=e)||void 0===o?void 0:o.max)&&(this._max=e.max),this.updateHandlersPositions())}_initItemsMinMax(e){this._min=0,this._max=e-1}_createHandlers(e){var t;if(!(null===(t=e)||void 0===t?void 0:t.length))return;this._occupiedItems=[],this._handlers=[];this._handlers=e.reduce((e,t)=>{const n=i.standardize(t.itemIndex,this.standardizeParams),r=this._createHandler(n,e.length);return null!==r&&e.push(r),e},[])}addHandler(e){const t=this._handlers.map(e=>e.handlerIndex),n=Math.max(-1,...t)+1,i=this._createHandler(e,n);return i?(this._handlers.push(i),i.handlerIndex=n,{positionPart:i.position,item:i.item,handlerIndex:i.handlerIndex,itemIndex:i.itemIndex}):null}removeHandler(e){const t=this._handlers.findIndex(t=>t.handlerIndex===e);return!(t<0)&&(this.releaseItem(this._handlers[t].itemIndex),this._handlers.splice(t,1),!0)}calculateValue(e){return this._items?this._items[e]:e}_generateDefaultHandlersItemIndexes(e,t){var n;this._handlers=[];const r=this.range/(e+1),s=[];for(let o=0;o<e;o+=1)Number.isFinite(null===(n=t)||void 0===n?void 0:n[o])?s.push({itemIndex:i.standardize(t[o],this.standardizeParams)}):s.push({itemIndex:i.standardize(this._min+(o+1)*r,this.standardizeParams)});this._createHandlers(s)}_createHandler(e,t){var n;const i=this.getFirstFreeItemIndex(e);if(null===i)return null;const s=(null===(n=this._items)||void 0===n?void 0:n.length)>0?this._items[i]:i;return new r.default(s,i,this,t)}handlerValueChanged(e){return-1===this._handlers.findIndex(t=>t.handlerIndex===e.handlerIndex)?null:{index:e.handlerIndex,relativeValue:e.position,item:e.item}}getHandlersData(){return{customHandlers:this.withCustomHandlers,handlersArray:this._handlers.map(e=>({handlerIndex:e.handlerIndex,item:e.item,positionPart:e.position,itemIndex:e.itemIndex}))}}getSliderData(){return{step:this._step/this.range,absoluteStep:this._step,min:this._min,max:this._max}}_getItemIndexFromPosition(e){return 1===e?this._max:i.standardize(this._min+e*this.range,this.standardizeParams)}handleHandlerPositionChanged(e){const t=this._getItemIndexFromPosition(e.position),n=this._handlers.findIndex(t=>t.handlerIndex===e.index);this._handlers[n].setItemIndex(t)}checkItemOccupancy(e){return!(void 0===this._occupiedItems[e])}occupyItem(e,t){this._occupiedItems[e]=t}releaseItem(e){delete this._occupiedItems[e]}getFirstFreeItemIndex(e){let t;const n=e||this._min;return t=this.findFirstFreeItemIndex(n,this._max),null===t&&(t=this.findFirstFreeItemIndex(this._min,n)),t}findFirstFreeItemIndex(e,t){let n=null;for(let r=i.standardize(e,this.standardizeParams);r<=i.standardize(t,this.standardizeParams);r+=this._step)if(!this.checkItemOccupancy(r)){n=r;break}return n}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=n(0);t.default=class{constructor(e,t,n,i){this._item=e,this.itemIndex=t,this._parentModel=n,this.handlerIndex=i,this.setItemIndex(t)}get item(){return this._item}get position(){return this._position}setItemIndex(e){const t=this.itemIndex;this._parentModel.checkItemOccupancy(e)?this.updatePosition():(this.itemIndex=e,this._item=this._parentModel.calculateValue(this.itemIndex),this.updatePosition(),this._parentModel.releaseItem(t),this._parentModel.occupyItem(e,this.handlerIndex))}calculatePosition(){return i.clamp((this.itemIndex-this._parentModel.min)/this._parentModel.range,0,1)}updatePosition(){this._position=this.calculatePosition(),this._parentModel.handlerValueChanged(this)}}},function(e,t,n){},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class i{constructor(e){this._parentElement=e,this._handlers=[],this._options=(new Map).set("ÐÐ¸ÐºÐµÐ¼",null).set("ÐÐ°ÑÐ°Ð»Ð¾Ð¼","start").set("ÐÐ¾Ð½ÑÐ¾Ð¼","end"),this._boundNewHandlerElementsClick=this._newHandlerElementsClick.bind(this),this._boundMarkupInputChange=this._handleMarkupInputChange.bind(this),this._boundHandleOrientationInputChange=this._handleOrientationInputChange.bind(this),this._boundHandleStepInputChange=this._handleStepInputChange.bind(this),this._boundHandleMinInputChange=this._handleMinInputChange.bind(this),this._boundHandleTooltipVisibilityInputChange=this._handleTooltipVisibilityInputChange.bind(this),this._boundHandleMaxInputChange=this._handleMaxInputChange.bind(this),this._elements={wrap:void 0,body:void 0,handlerInputs:[],maxInput:void 0,minInput:void 0,stepInput:void 0,orientationInput:void 0,tooltipsVisibilityInput:void 0,markupVisibilityInput:void 0,newHandlerElements:void 0},this._createBaseElements(),this._createNewHandlerSection()}get body(){return this._elements.body}_createBaseElements(){this._elements.wrap=this._parentElement.parentElement,this._elements.body=this._parentElement,this._elements.body.classList.add(`${i.classPrefix}body`),this._createPropertyElements("Ð¨Ð°Ð³","step"),this._elements.stepInput.addEventListener("change",this._boundHandleStepInputChange),this._createPropertyElements("ÐÐ¸Ð½Ð¸Ð¼ÑÐ¼","min"),this._elements.minInput.addEventListener("change",this._boundHandleMinInputChange),this._createPropertyElements("ÐÐ°ÐºÑÐ¸Ð¼ÑÐ¼","max"),this._elements.maxInput.addEventListener("change",this._boundHandleMaxInputChange),this._createPropertyElements("ÐÐµÑÑÐ¸ÐºÐ°Ð»ÑÐ½ÑÐ¹?","orientation",!0),this._elements.orientationInput.addEventListener("change",this._boundHandleOrientationInputChange),this._createPropertyElements("Ð¢ÑÐ»ÑÐ¸Ð¿Ñ Ð²Ð¸Ð´Ð½Ñ?","tooltipsVisibility",!0),this._elements.tooltipsVisibilityInput.addEventListener("change",this._boundHandleTooltipVisibilityInputChange),this._createPropertyElements("Ð Ð°Ð·Ð¼ÐµÑÐºÐ° Ð²Ð¸Ð´Ð½Ð°?","markupVisibility",!0),this._elements.markupVisibilityInput.addEventListener("change",this._boundMarkupInputChange)}_newHandlerElementsClick(){const e=Number.parseFloat(this._elements.newHandlerElements.itemIndexInput.value);if(Number.isNaN(e))return;const t=this._options.get(this._elements.newHandlerElements.handlerPairSelect.selectedOptions[0].text);this.boundController.addHandler(e,t)}_handleMarkupInputChange(e){this._withMarkup=e.target.checked,this.boundController.setMarkupVisibility(this._withMarkup)}_handleOrientationInputChange(e){this._setOrientation(e.target.checked)}_handleStepInputChange(){const{stepInput:e}=this._elements;this.boundController.setStep(Number.parseFloat(e.value))}_handleMinInputChange(){const{minInput:e}=this._elements;this.boundController.setMin(Number.parseFloat(e.value))}_handleTooltipVisibilityInputChange(){const e=this._elements.tooltipsVisibilityInput;this._tooltipsAreVisible=e.checked,this.boundController.setTooltipVisibility(e.checked)}_handleMaxInputChange(){const{maxInput:e}=this._elements;this.boundController.setMax(Number.parseFloat(e.value))}_createNewHandlerSection(){const e=this._createWrap("newHandler");i._createLabel("ÐÐ½Ð°ÑÐµÐ½Ð¸Ðµ","newHandler",e);const t=i._createInput("newHandler",e);i._createLabel("Ð¡Ð¾ÐµÐ´Ð¸Ð½Ð¸ÑÑ Ñ...","newHandler",e);const n=document.createElement("select");n.classList.add(`${i.classPrefix}newHandlerPairSelect`),e.append(n);const r=document.createElement("button");r.innerText="Ð¡Ð¾Ð·Ð´Ð°ÑÑ \n Ð½Ð¾Ð²ÑÐ¹ ÑÑÐ½Ð´Ð»ÐµÑ",r.classList.add(`${i.classPrefix}newHandlerButton`),r.addEventListener("click",this._boundNewHandlerElementsClick),e.append(r),this._elements.newHandlerElements={itemIndexInput:t,createButton:r,handlerPairSelect:n},this._fillHandlerBindingSelect()}_fillHandlerBindingSelect(){this._options.forEach((e,t)=>{this._addHandlerRangePairOption(t,e)})}_addHandlerRangePairOption(e,t){const{handlerPairSelect:n}=this._elements.newHandlerElements;let i;i="number"==typeof e?(e+1).toString():e,this._options.set(i,t);const r=document.createElement("option");r.value=e.toString(),r.innerText=i,n.options.add(r)}static _createElement(e,t,n){const r=document.createElement(e);return r.classList.add(i.classPrefix+t),n&&n.append(r),r}_createWrap(e){return i._createElement("div",`${e}Wrap`,this._elements.body)}static _createLabel(e,t,n){const r=i._createElement("label",`${t}Label`,n);return r.innerText=e,r}static _createInput(e,t,n){const r=i._createElement("input",`${e}Input`,t);return n&&r.setAttribute("type","checkbox"),r}static _createButton(e,t,n){const i=this._createElement("button",`${t}Button`,n);return i.innerText=e,i}_createPropertyElements(e,t,n){const r=this._createWrap(t);return i._createLabel(e,t,r),this._elements[`${t}Input`]=i._createInput(t,r,n),r}_createHandlerSection(e){const t=this._createWrap("value");i._createLabel(`ÐÐ¾Ð»Ð¾Ð¶ÐµÐ½Ð¸Ðµ ${e+1} `,"value",t);const n=i._createInput("value",t);i._createLabel(`ÐÐ½Ð°ÑÐµÐ½Ð¸Ðµ ${e+1} `,"item",t);const r=i._createElement("div","item",t);i._createButton("Ñ","delete",t).addEventListener("click",()=>{this.boundController.removeHandler(e)}),this._elements.handlerInputs.push({wrap:t,index:e,positionElement:n,itemIndexElement:r}),this._elements.handlerInputs[this._elements.handlerInputs.length-1].positionElement.addEventListener("change",this._handlePositionInputChange),this._elements.body.append(t)}_handlePositionInputChange(e){const t=e.target,n=this._elements.handlerInputs.find(e=>e.positionElement===t).index;this.handlerPositionChanged(n,Number.parseFloat(t.value))}_refreshElements(){this._refreshOrientation(),this._refreshMarkupVisibility(),this._refreshTooltipVisibility(),this._handlers.forEach(e=>{this._refreshHandlerPosition(e.index),this._refreshHandlerItem(e.index)})}_refreshMarkupVisibility(){this._elements.markupVisibilityInput.checked=this._withMarkup}_refreshTooltipVisibility(){this._elements.tooltipsVisibilityInput.checked=this._tooltipsAreVisible}_refreshOrientation(){this._elements.wrap.classList.add(this._isVertical?"vertical":"horizontal"),this._elements.wrap.classList.remove(this._isVertical?"horizontal":"vertical"),this._elements.orientationInput.checked=this._isVertical}_refreshHandlerItem(e){const t=this._elements.handlerInputs.findIndex(t=>t.index===e);this._elements.handlerInputs[t].itemIndexElement.innerText=this._handlers[t].item.toString()}_refreshHandlerPosition(e){const t=this._elements.handlerInputs.findIndex(t=>t.index===e);this._elements.handlerInputs[t].positionElement.value=`${this._handlers[t].positionPart.toFixed(2)}`}_setOrientation(e){this.boundController.setVertical(e)}passVisualProps(e){var t,n,i,r,s,o;void 0!==(null===(t=e)||void 0===t?void 0:t.isVertical)&&null!==(null===(n=e)||void 0===n?void 0:n.isVertical)&&(this._isVertical=e.isVertical),void 0!==(null===(i=e)||void 0===i?void 0:i.withMarkup)&&null!==(null===(r=e)||void 0===r?void 0:r.withMarkup)&&(this._withMarkup=e.withMarkup),void 0!==(null===(s=e)||void 0===s?void 0:s.showTooltips)&&null!==(null===(o=e)||void 0===o?void 0:o.showTooltips)&&(this._tooltipsAreVisible=e.showTooltips),this._refreshElements()}addHandler(e){this._handlers.push({index:e.handlerIndex,positionPart:e.positionPart,item:e.item,itemIndex:e.itemIndex}),this._createHandlerSection(e.handlerIndex),this._addHandlerRangePairOption(e.handlerIndex,e.handlerIndex),this._refreshElements()}removeHandler(e){const t=this._handlers.findIndex(t=>t.index===e);this._handlers.splice(t,1);const n=this._elements.handlerInputs.findIndex(t=>t.index===e);this._elements.handlerInputs[n].wrap.remove(),this._elements.handlerInputs.splice(n,1);const i=this._elements.newHandlerElements.handlerPairSelect.options;Object.entries(i).forEach((t,n)=>{t[1].innerText===(e+1).toString()&&i.remove(n)})}handlerPositionChanged(e,t){return{view:this,index:e,position:t}}handlersValuesChangedListener(e){if(null===e)return;const t=this._handlers.find(t=>t.index===e.index);t&&(t.positionPart=e.relativeValue,t.item=e.item,this._refreshElements())}initHandlers(e){this._handlers=[],e.handlersArray.forEach((e,t)=>{this._handlers.push({index:e.handlerIndex,positionPart:e.positionPart,item:e.item,itemIndex:e.itemIndex}),this._createHandlerSection(e.handlerIndex),this._addHandlerRangePairOption(t,t)}),this._refreshElements()}passDataProps(e){const t=this._elements.maxInput;t.value||(t.value=e.max.toFixed(2));const n=this._elements.minInput;n.value||(n.value=e.min.toFixed(2));const i=this._elements.stepInput;i.value||(i.value=e.absoluteStep.toFixed(2))}}t.default=i,i.classPrefix="panel__"},function(e,t,n){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,